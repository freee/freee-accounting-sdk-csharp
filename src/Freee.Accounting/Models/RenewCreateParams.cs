/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// RenewCreateParams
    /// </summary>
    [DataContract(Name = "renewCreateParams")]
    public partial class RenewCreateParams : IEquatable<RenewCreateParams>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RenewCreateParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RenewCreateParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RenewCreateParams" /> class.
        /// </summary>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="details">+更新の明細行 (required).</param>
        /// <param name="renewTargetId">+更新対象行ID (details(取引の明細行), accruals(債権債務行), renewsのdetails(+更新の明細行)のIDを指定)  (required).</param>
        /// <param name="updateDate">更新日 (yyyy-mm-dd) (required).</param>
        public RenewCreateParams(int companyId = default(int), List<RenewCreateParamsDetails> details = default(List<RenewCreateParamsDetails>), long renewTargetId = default(long), string updateDate = default(string))
        {
            this.CompanyId = companyId;
            // to ensure "details" is required (not null)
            if (details == null)
            {
                throw new ArgumentNullException("details is a required property for RenewCreateParams and cannot be null");
            }
            this.Details = details;
            this.RenewTargetId = renewTargetId;
            // to ensure "updateDate" is required (not null)
            if (updateDate == null)
            {
                throw new ArgumentNullException("updateDate is a required property for RenewCreateParams and cannot be null");
            }
            this.UpdateDate = updateDate;
        }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// +更新の明細行
        /// </summary>
        /// <value>+更新の明細行</value>
        [DataMember(Name = "details", IsRequired = true, EmitDefaultValue = false)]
        public List<RenewCreateParamsDetails> Details { get; set; }

        /// <summary>
        /// +更新対象行ID (details(取引の明細行), accruals(債権債務行), renewsのdetails(+更新の明細行)のIDを指定) 
        /// </summary>
        /// <value>+更新対象行ID (details(取引の明細行), accruals(債権債務行), renewsのdetails(+更新の明細行)のIDを指定) </value>
        [DataMember(Name = "renew_target_id", IsRequired = true, EmitDefaultValue = false)]
        public long RenewTargetId { get; set; }

        /// <summary>
        /// 更新日 (yyyy-mm-dd)
        /// </summary>
        /// <value>更新日 (yyyy-mm-dd)</value>
        [DataMember(Name = "update_date", IsRequired = true, EmitDefaultValue = false)]
        public string UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RenewCreateParams {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  RenewTargetId: ").Append(RenewTargetId).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RenewCreateParams);
        }

        /// <summary>
        /// Returns true if RenewCreateParams instances are equal
        /// </summary>
        /// <param name="input">Instance of RenewCreateParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RenewCreateParams input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    input.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && 
                (
                    this.RenewTargetId == input.RenewTargetId ||
                    this.RenewTargetId.Equals(input.RenewTargetId)
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.Details != null)
                {
                    hashCode = (hashCode * 59) + this.Details.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RenewTargetId.GetHashCode();
                if (this.UpdateDate != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateDate.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
