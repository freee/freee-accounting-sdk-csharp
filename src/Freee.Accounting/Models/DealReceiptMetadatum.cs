/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// DealReceiptMetadatum
    /// </summary>
    [DataContract(Name = "deal_receipt_metadatum")]
    public partial class DealReceiptMetadatum : IEquatable<DealReceiptMetadatum>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DealReceiptMetadatum" /> class.
        /// </summary>
        /// <param name="amount">金額.</param>
        /// <param name="issueDate">発行日 (yyyy-mm-dd).</param>
        /// <param name="partnerName">発行元.</param>
        public DealReceiptMetadatum(long? amount = default(long?), string issueDate = default(string), string partnerName = default(string))
        {
            this.Amount = amount;
            this.IssueDate = issueDate;
            this.PartnerName = partnerName;
        }

        /// <summary>
        /// 金額
        /// </summary>
        /// <value>金額</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public long? Amount { get; set; }

        /// <summary>
        /// 発行日 (yyyy-mm-dd)
        /// </summary>
        /// <value>発行日 (yyyy-mm-dd)</value>
        [DataMember(Name = "issue_date", EmitDefaultValue = true)]
        public string IssueDate { get; set; }

        /// <summary>
        /// 発行元
        /// </summary>
        /// <value>発行元</value>
        [DataMember(Name = "partner_name", EmitDefaultValue = true)]
        public string PartnerName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DealReceiptMetadatum {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  PartnerName: ").Append(PartnerName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DealReceiptMetadatum);
        }

        /// <summary>
        /// Returns true if DealReceiptMetadatum instances are equal
        /// </summary>
        /// <param name="input">Instance of DealReceiptMetadatum to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DealReceiptMetadatum input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.PartnerName == input.PartnerName ||
                    (this.PartnerName != null &&
                    this.PartnerName.Equals(input.PartnerName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.IssueDate != null)
                {
                    hashCode = (hashCode * 59) + this.IssueDate.GetHashCode();
                }
                if (this.PartnerName != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerName.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
