/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// ApprovalRequestActionCreateParams
    /// </summary>
    [DataContract(Name = "approvalRequestActionCreateParams")]
    public partial class ApprovalRequestActionCreateParams : IEquatable<ApprovalRequestActionCreateParams>
    {
        /// <summary>
        /// 操作(approve: 承認する、force_approve: 代理承認する、cancel: 申請を取り消す、reject: 却下する、feedback: 申請者へ差し戻す、force_feedback: 承認済み・却下済みを取り消す)
        /// </summary>
        /// <value>操作(approve: 承認する、force_approve: 代理承認する、cancel: 申請を取り消す、reject: 却下する、feedback: 申請者へ差し戻す、force_feedback: 承認済み・却下済みを取り消す)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApprovalActionEnum
        {
            /// <summary>
            /// Enum Approve for value: approve
            /// </summary>
            [EnumMember(Value = "approve")]
            Approve = 1,

            /// <summary>
            /// Enum ForceApprove for value: force_approve
            /// </summary>
            [EnumMember(Value = "force_approve")]
            ForceApprove = 2,

            /// <summary>
            /// Enum Cancel for value: cancel
            /// </summary>
            [EnumMember(Value = "cancel")]
            Cancel = 3,

            /// <summary>
            /// Enum Reject for value: reject
            /// </summary>
            [EnumMember(Value = "reject")]
            Reject = 4,

            /// <summary>
            /// Enum Feedback for value: feedback
            /// </summary>
            [EnumMember(Value = "feedback")]
            Feedback = 5,

            /// <summary>
            /// Enum ForceFeedback for value: force_feedback
            /// </summary>
            [EnumMember(Value = "force_feedback")]
            ForceFeedback = 6

        }


        /// <summary>
        /// 操作(approve: 承認する、force_approve: 代理承認する、cancel: 申請を取り消す、reject: 却下する、feedback: 申請者へ差し戻す、force_feedback: 承認済み・却下済みを取り消す)
        /// </summary>
        /// <value>操作(approve: 承認する、force_approve: 代理承認する、cancel: 申請を取り消す、reject: 却下する、feedback: 申請者へ差し戻す、force_feedback: 承認済み・却下済みを取り消す)</value>
        [DataMember(Name = "approval_action", IsRequired = true, EmitDefaultValue = false)]
        public ApprovalActionEnum ApprovalAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestActionCreateParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApprovalRequestActionCreateParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestActionCreateParams" /> class.
        /// </summary>
        /// <param name="approvalAction">操作(approve: 承認する、force_approve: 代理承認する、cancel: 申請を取り消す、reject: 却下する、feedback: 申請者へ差し戻す、force_feedback: 承認済み・却下済みを取り消す) (required).</param>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="nextApproverId">次ステップの承認者のユーザーID.</param>
        /// <param name="targetRound">対象round。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。各種申請の取得APIレスポンス.current_roundを送信してください。 (required).</param>
        /// <param name="targetStepId">対象承認ステップID 各種申請の取得APIレスポンス.current_step_idを送信してください。 (required).</param>
        public ApprovalRequestActionCreateParams(ApprovalActionEnum approvalAction = default(ApprovalActionEnum), int companyId = default(int), int? nextApproverId = default(int?), int targetRound = default(int), int targetStepId = default(int))
        {
            this.ApprovalAction = approvalAction;
            this.CompanyId = companyId;
            this.TargetRound = targetRound;
            this.TargetStepId = targetStepId;
            this.NextApproverId = nextApproverId;
        }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// 次ステップの承認者のユーザーID
        /// </summary>
        /// <value>次ステップの承認者のユーザーID</value>
        [DataMember(Name = "next_approver_id", EmitDefaultValue = true)]
        public int? NextApproverId { get; set; }

        /// <summary>
        /// 対象round。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。各種申請の取得APIレスポンス.current_roundを送信してください。
        /// </summary>
        /// <value>対象round。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。各種申請の取得APIレスポンス.current_roundを送信してください。</value>
        [DataMember(Name = "target_round", IsRequired = true, EmitDefaultValue = false)]
        public int TargetRound { get; set; }

        /// <summary>
        /// 対象承認ステップID 各種申請の取得APIレスポンス.current_step_idを送信してください。
        /// </summary>
        /// <value>対象承認ステップID 各種申請の取得APIレスポンス.current_step_idを送信してください。</value>
        [DataMember(Name = "target_step_id", IsRequired = true, EmitDefaultValue = false)]
        public int TargetStepId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApprovalRequestActionCreateParams {\n");
            sb.Append("  ApprovalAction: ").Append(ApprovalAction).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  NextApproverId: ").Append(NextApproverId).Append("\n");
            sb.Append("  TargetRound: ").Append(TargetRound).Append("\n");
            sb.Append("  TargetStepId: ").Append(TargetStepId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApprovalRequestActionCreateParams);
        }

        /// <summary>
        /// Returns true if ApprovalRequestActionCreateParams instances are equal
        /// </summary>
        /// <param name="input">Instance of ApprovalRequestActionCreateParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalRequestActionCreateParams input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApprovalAction == input.ApprovalAction ||
                    this.ApprovalAction.Equals(input.ApprovalAction)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.NextApproverId == input.NextApproverId ||
                    (this.NextApproverId != null &&
                    this.NextApproverId.Equals(input.NextApproverId))
                ) && 
                (
                    this.TargetRound == input.TargetRound ||
                    this.TargetRound.Equals(input.TargetRound)
                ) && 
                (
                    this.TargetStepId == input.TargetStepId ||
                    this.TargetStepId.Equals(input.TargetStepId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ApprovalAction.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.NextApproverId != null)
                {
                    hashCode = (hashCode * 59) + this.NextApproverId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TargetRound.GetHashCode();
                hashCode = (hashCode * 59) + this.TargetStepId.GetHashCode();
                return hashCode;
            }
        }

    }

}
