/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// PartnerCreateParamsAddressAttributes
    /// </summary>
    [DataContract(Name = "partnerCreateParams_address_attributes")]
    public partial class PartnerCreateParamsAddressAttributes : IEquatable<PartnerCreateParamsAddressAttributes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartnerCreateParamsAddressAttributes" /> class.
        /// </summary>
        /// <param name="prefectureCode">都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄.</param>
        /// <param name="streetName1">市区町村・番地（255文字以内）.</param>
        /// <param name="streetName2">建物名・部屋番号など（255文字以内）.</param>
        /// <param name="zipcode">郵便番号（8文字以内）.</param>
        public PartnerCreateParamsAddressAttributes(int prefectureCode = default(int), string streetName1 = default(string), string streetName2 = default(string), string zipcode = default(string))
        {
            this.PrefectureCode = prefectureCode;
            this.StreetName1 = streetName1;
            this.StreetName2 = streetName2;
            this.Zipcode = zipcode;
        }

        /// <summary>
        /// 都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
        /// </summary>
        /// <value>都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄</value>
        [DataMember(Name = "prefecture_code", EmitDefaultValue = false)]
        public int PrefectureCode { get; set; }

        /// <summary>
        /// 市区町村・番地（255文字以内）
        /// </summary>
        /// <value>市区町村・番地（255文字以内）</value>
        [DataMember(Name = "street_name1", EmitDefaultValue = false)]
        public string StreetName1 { get; set; }

        /// <summary>
        /// 建物名・部屋番号など（255文字以内）
        /// </summary>
        /// <value>建物名・部屋番号など（255文字以内）</value>
        [DataMember(Name = "street_name2", EmitDefaultValue = false)]
        public string StreetName2 { get; set; }

        /// <summary>
        /// 郵便番号（8文字以内）
        /// </summary>
        /// <value>郵便番号（8文字以内）</value>
        [DataMember(Name = "zipcode", EmitDefaultValue = false)]
        public string Zipcode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartnerCreateParamsAddressAttributes {\n");
            sb.Append("  PrefectureCode: ").Append(PrefectureCode).Append("\n");
            sb.Append("  StreetName1: ").Append(StreetName1).Append("\n");
            sb.Append("  StreetName2: ").Append(StreetName2).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartnerCreateParamsAddressAttributes);
        }

        /// <summary>
        /// Returns true if PartnerCreateParamsAddressAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of PartnerCreateParamsAddressAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartnerCreateParamsAddressAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PrefectureCode == input.PrefectureCode ||
                    this.PrefectureCode.Equals(input.PrefectureCode)
                ) && 
                (
                    this.StreetName1 == input.StreetName1 ||
                    (this.StreetName1 != null &&
                    this.StreetName1.Equals(input.StreetName1))
                ) && 
                (
                    this.StreetName2 == input.StreetName2 ||
                    (this.StreetName2 != null &&
                    this.StreetName2.Equals(input.StreetName2))
                ) && 
                (
                    this.Zipcode == input.Zipcode ||
                    (this.Zipcode != null &&
                    this.Zipcode.Equals(input.Zipcode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PrefectureCode.GetHashCode();
                if (this.StreetName1 != null)
                {
                    hashCode = (hashCode * 59) + this.StreetName1.GetHashCode();
                }
                if (this.StreetName2 != null)
                {
                    hashCode = (hashCode * 59) + this.StreetName2.GetHashCode();
                }
                if (this.Zipcode != null)
                {
                    hashCode = (hashCode * 59) + this.Zipcode.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
