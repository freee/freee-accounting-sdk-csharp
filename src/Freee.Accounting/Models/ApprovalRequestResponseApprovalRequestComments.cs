/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// ApprovalRequestResponseApprovalRequestComments
    /// </summary>
    [DataContract(Name = "approvalRequestResponse_approval_request_comments")]
    public partial class ApprovalRequestResponseApprovalRequestComments : IEquatable<ApprovalRequestResponseApprovalRequestComments>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestResponseApprovalRequestComments" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApprovalRequestResponseApprovalRequestComments() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestResponseApprovalRequestComments" /> class.
        /// </summary>
        /// <param name="comment">コメント内容 (required).</param>
        /// <param name="postedAt">コメント日時(ISO8601形式) (required).</param>
        /// <param name="userId">ユーザーID (required).</param>
        public ApprovalRequestResponseApprovalRequestComments(string comment = default(string), string postedAt = default(string), int userId = default(int))
        {
            // to ensure "comment" is required (not null)
            if (comment == null)
            {
                throw new ArgumentNullException("comment is a required property for ApprovalRequestResponseApprovalRequestComments and cannot be null");
            }
            this.Comment = comment;
            // to ensure "postedAt" is required (not null)
            if (postedAt == null)
            {
                throw new ArgumentNullException("postedAt is a required property for ApprovalRequestResponseApprovalRequestComments and cannot be null");
            }
            this.PostedAt = postedAt;
            this.UserId = userId;
        }

        /// <summary>
        /// コメント内容
        /// </summary>
        /// <value>コメント内容</value>
        [DataMember(Name = "comment", IsRequired = true, EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// コメント日時(ISO8601形式)
        /// </summary>
        /// <value>コメント日時(ISO8601形式)</value>
        [DataMember(Name = "posted_at", IsRequired = true, EmitDefaultValue = false)]
        public string PostedAt { get; set; }

        /// <summary>
        /// ユーザーID
        /// </summary>
        /// <value>ユーザーID</value>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApprovalRequestResponseApprovalRequestComments {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  PostedAt: ").Append(PostedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApprovalRequestResponseApprovalRequestComments);
        }

        /// <summary>
        /// Returns true if ApprovalRequestResponseApprovalRequestComments instances are equal
        /// </summary>
        /// <param name="input">Instance of ApprovalRequestResponseApprovalRequestComments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalRequestResponseApprovalRequestComments input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.PostedAt == input.PostedAt ||
                    (this.PostedAt != null &&
                    this.PostedAt.Equals(input.PostedAt))
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.PostedAt != null)
                {
                    hashCode = (hashCode * 59) + this.PostedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                return hashCode;
            }
        }

    }

}
