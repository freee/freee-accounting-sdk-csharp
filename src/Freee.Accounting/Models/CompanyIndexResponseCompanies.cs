/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// CompanyIndexResponseCompanies
    /// </summary>
    [DataContract(Name = "companyIndexResponse_companies")]
    public partial class CompanyIndexResponseCompanies : IEquatable<CompanyIndexResponseCompanies>
    {
        /// <summary>
        /// ユーザーの権限
        /// </summary>
        /// <value>ユーザーの権限</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            [EnumMember(Value = "admin")]
            Admin = 1,

            /// <summary>
            /// Enum SimpleAccounting for value: simple_accounting
            /// </summary>
            [EnumMember(Value = "simple_accounting")]
            SimpleAccounting = 2,

            /// <summary>
            /// Enum SelfOnly for value: self_only
            /// </summary>
            [EnumMember(Value = "self_only")]
            SelfOnly = 3,

            /// <summary>
            /// Enum ReadOnly for value: read_only
            /// </summary>
            [EnumMember(Value = "read_only")]
            ReadOnly = 4,

            /// <summary>
            /// Enum Workflow for value: workflow
            /// </summary>
            [EnumMember(Value = "workflow")]
            Workflow = 5

        }


        /// <summary>
        /// ユーザーの権限
        /// </summary>
        /// <value>ユーザーの権限</value>
        [DataMember(Name = "role", IsRequired = true, EmitDefaultValue = false)]
        public RoleEnum Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyIndexResponseCompanies" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompanyIndexResponseCompanies() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyIndexResponseCompanies" /> class.
        /// </summary>
        /// <param name="displayName">事業所名 (required).</param>
        /// <param name="id">事業所ID (required).</param>
        /// <param name="name">事業所名 (required).</param>
        /// <param name="nameKana">事業所名（カナ） (required).</param>
        /// <param name="role">ユーザーの権限 (required).</param>
        public CompanyIndexResponseCompanies(string displayName = default(string), int id = default(int), string name = default(string), string nameKana = default(string), RoleEnum role = default(RoleEnum))
        {
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for CompanyIndexResponseCompanies and cannot be null");
            }
            this.DisplayName = displayName;
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CompanyIndexResponseCompanies and cannot be null");
            }
            this.Name = name;
            // to ensure "nameKana" is required (not null)
            if (nameKana == null)
            {
                throw new ArgumentNullException("nameKana is a required property for CompanyIndexResponseCompanies and cannot be null");
            }
            this.NameKana = nameKana;
            this.Role = role;
        }

        /// <summary>
        /// 事業所名
        /// </summary>
        /// <value>事業所名</value>
        [DataMember(Name = "display_name", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// 事業所名
        /// </summary>
        /// <value>事業所名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// 事業所名（カナ）
        /// </summary>
        /// <value>事業所名（カナ）</value>
        [DataMember(Name = "name_kana", IsRequired = true, EmitDefaultValue = true)]
        public string NameKana { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyIndexResponseCompanies {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameKana: ").Append(NameKana).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyIndexResponseCompanies);
        }

        /// <summary>
        /// Returns true if CompanyIndexResponseCompanies instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyIndexResponseCompanies to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyIndexResponseCompanies input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NameKana == input.NameKana ||
                    (this.NameKana != null &&
                    this.NameKana.Equals(input.NameKana))
                ) && 
                (
                    this.Role == input.Role ||
                    this.Role.Equals(input.Role)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NameKana != null)
                {
                    hashCode = (hashCode * 59) + this.NameKana.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Role.GetHashCode();
                return hashCode;
            }
        }

    }

}
