/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// CompaniesPlanResponse
    /// </summary>
    [DataContract(Name = "companiesPlanResponse")]
    public partial class CompaniesPlanResponse : IEquatable<CompaniesPlanResponse>
    {
        /// <summary>
        /// 事業形態（個人事業主: personal、法人: corporate）
        /// </summary>
        /// <value>事業形態（個人事業主: personal、法人: corporate）</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrgCodeEnum
        {
            /// <summary>
            /// Enum Personal for value: personal
            /// </summary>
            [EnumMember(Value = "personal")]
            Personal = 1,

            /// <summary>
            /// Enum Corporate for value: corporate
            /// </summary>
            [EnumMember(Value = "corporate")]
            Corporate = 2

        }


        /// <summary>
        /// 事業形態（個人事業主: personal、法人: corporate）
        /// </summary>
        /// <value>事業形態（個人事業主: personal、法人: corporate）</value>
        [DataMember(Name = "org_code", IsRequired = true, EmitDefaultValue = false)]
        public OrgCodeEnum OrgCode { get; set; }
        /// <summary>
        /// 会計プラン 個人用(non_charged: 無料プラン、starter: スターター、standard: スタンダード、premium: プレミアム) 法人用(non_charged: 無料プラン、minimum: ミニマム、basic: ベーシック、professional: プロフェッショナル、enterprise: エンタープライズ)
        /// </summary>
        /// <value>会計プラン 個人用(non_charged: 無料プラン、starter: スターター、standard: スタンダード、premium: プレミアム) 法人用(non_charged: 無料プラン、minimum: ミニマム、basic: ベーシック、professional: プロフェッショナル、enterprise: エンタープライズ)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlanEnum
        {
            /// <summary>
            /// Enum NonCharged for value: non_charged
            /// </summary>
            [EnumMember(Value = "non_charged")]
            NonCharged = 1,

            /// <summary>
            /// Enum Starter for value: starter
            /// </summary>
            [EnumMember(Value = "starter")]
            Starter = 2,

            /// <summary>
            /// Enum Standard for value: standard
            /// </summary>
            [EnumMember(Value = "standard")]
            Standard = 3,

            /// <summary>
            /// Enum Premium for value: premium
            /// </summary>
            [EnumMember(Value = "premium")]
            Premium = 4,

            /// <summary>
            /// Enum Minimum for value: minimum
            /// </summary>
            [EnumMember(Value = "minimum")]
            Minimum = 5,

            /// <summary>
            /// Enum Basic for value: basic
            /// </summary>
            [EnumMember(Value = "basic")]
            Basic = 6,

            /// <summary>
            /// Enum Professional for value: professional
            /// </summary>
            [EnumMember(Value = "professional")]
            Professional = 7,

            /// <summary>
            /// Enum Enterprise for value: enterprise
            /// </summary>
            [EnumMember(Value = "enterprise")]
            Enterprise = 8

        }


        /// <summary>
        /// 会計プラン 個人用(non_charged: 無料プラン、starter: スターター、standard: スタンダード、premium: プレミアム) 法人用(non_charged: 無料プラン、minimum: ミニマム、basic: ベーシック、professional: プロフェッショナル、enterprise: エンタープライズ)
        /// </summary>
        /// <value>会計プラン 個人用(non_charged: 無料プラン、starter: スターター、standard: スタンダード、premium: プレミアム) 法人用(non_charged: 無料プラン、minimum: ミニマム、basic: ベーシック、professional: プロフェッショナル、enterprise: エンタープライズ)</value>
        [DataMember(Name = "plan", IsRequired = true, EmitDefaultValue = false)]
        public PlanEnum Plan { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompaniesPlanResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompaniesPlanResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompaniesPlanResponse" /> class.
        /// </summary>
        /// <param name="id">事業所ID (required).</param>
        /// <param name="orgCode">事業形態（個人事業主: personal、法人: corporate） (required).</param>
        /// <param name="plan">会計プラン 個人用(non_charged: 無料プラン、starter: スターター、standard: スタンダード、premium: プレミアム) 法人用(non_charged: 無料プラン、minimum: ミニマム、basic: ベーシック、professional: プロフェッショナル、enterprise: エンタープライズ) (required).</param>
        public CompaniesPlanResponse(int id = default(int), OrgCodeEnum orgCode = default(OrgCodeEnum), PlanEnum plan = default(PlanEnum))
        {
            this.Id = id;
            this.OrgCode = orgCode;
            this.Plan = plan;
        }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompaniesPlanResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrgCode: ").Append(OrgCode).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompaniesPlanResponse);
        }

        /// <summary>
        /// Returns true if CompaniesPlanResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CompaniesPlanResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompaniesPlanResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.OrgCode == input.OrgCode ||
                    this.OrgCode.Equals(input.OrgCode)
                ) && 
                (
                    this.Plan == input.Plan ||
                    this.Plan.Equals(input.Plan)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.OrgCode.GetHashCode();
                hashCode = (hashCode * 59) + this.Plan.GetHashCode();
                return hashCode;
            }
        }

    }

}
