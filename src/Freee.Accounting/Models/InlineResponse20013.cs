/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// InlineResponse20013
    /// </summary>
    [DataContract(Name = "inline_response_200_13")]
    public partial class InlineResponse20013 : IEquatable<InlineResponse20013>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20013" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse20013() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20013" /> class.
        /// </summary>
        /// <param name="tags">tags (required).</param>
        /// <param name="accessControls">accessControls (required).</param>
        /// <param name="accountItemStatements">accountItemStatements (required).</param>
        /// <param name="accountItems">accountItems (required).</param>
        /// <param name="annualReports">annualReports (required).</param>
        /// <param name="appRoleLogs">appRoleLogs (required).</param>
        /// <param name="approvalFlowRoutes">approvalFlowRoutes (required).</param>
        /// <param name="approvalRequests">approvalRequests (required).</param>
        /// <param name="backups">backups (required).</param>
        /// <param name="bankAccountantStaffUsers">bankAccountantStaffUsers (required).</param>
        /// <param name="bizAllocations">bizAllocations (required).</param>
        /// <param name="companies">companies (required).</param>
        /// <param name="companyInternalAnnouncements">companyInternalAnnouncements (required).</param>
        /// <param name="consumptionEntries">consumptionEntries (required).</param>
        /// <param name="costAllocations">costAllocations (required).</param>
        /// <param name="dealTemplates">dealTemplates (required).</param>
        /// <param name="deals">deals (required).</param>
        /// <param name="docChangeLogs">docChangeLogs (required).</param>
        /// <param name="docPostings">docPostings (required).</param>
        /// <param name="docs">docs (required).</param>
        /// <param name="expenseApplicationSyncPayroll">expenseApplicationSyncPayroll (required).</param>
        /// <param name="expenseApplicationTemplates">expenseApplicationTemplates (required).</param>
        /// <param name="expenseApplications">expenseApplications (required).</param>
        /// <param name="fixedAssets">fixedAssets (required).</param>
        /// <param name="inventoryRefreshes">inventoryRefreshes (required).</param>
        /// <param name="invitations">invitations (required).</param>
        /// <param name="items">items (required).</param>
        /// <param name="manualJournalTemplates">manualJournalTemplates (required).</param>
        /// <param name="manualJournals">manualJournals (required).</param>
        /// <param name="monthEnd">monthEnd (required).</param>
        /// <param name="oauthApplications">oauthApplications (required).</param>
        /// <param name="oauthAuthorizations">oauthAuthorizations (required).</param>
        /// <param name="openingBalances">openingBalances (required).</param>
        /// <param name="partners">partners (required).</param>
        /// <param name="paymentRecords">paymentRecords (required).</param>
        /// <param name="paymentRequests">paymentRequests (required).</param>
        /// <param name="payrollItemSets">payrollItemSets (required).</param>
        /// <param name="receiptStreamEditor">receiptStreamEditor (required).</param>
        /// <param name="receipts">receipts (required).</param>
        /// <param name="reports">reports (required).</param>
        /// <param name="reportsBs">reportsBs (required).</param>
        /// <param name="reportsCashBalance">reportsCashBalance (required).</param>
        /// <param name="reportsCrosstabs">reportsCrosstabs (required).</param>
        /// <param name="reportsCustomReportsAggregate">reportsCustomReportsAggregate (required).</param>
        /// <param name="reportsGeneralLedgers">reportsGeneralLedgers (required).</param>
        /// <param name="reportsIncomeExpense">reportsIncomeExpense (required).</param>
        /// <param name="reportsJournals">reportsJournals (required).</param>
        /// <param name="reportsManagementsNavigation">reportsManagementsNavigation (required).</param>
        /// <param name="reportsManagementsPlanning">reportsManagementsPlanning (required).</param>
        /// <param name="reportsPayables">reportsPayables (required).</param>
        /// <param name="reportsPl">reportsPl (required).</param>
        /// <param name="reportsReceivables">reportsReceivables (required).</param>
        /// <param name="requestForms">requestForms (required).</param>
        /// <param name="resets">resets (required).</param>
        /// <param name="sections">sections (required).</param>
        /// <param name="signInLogs">signInLogs (required).</param>
        /// <param name="spreadsheets">spreadsheets (required).</param>
        /// <param name="systemConversion">systemConversion (required).</param>
        /// <param name="systemMessagesForAdmin">systemMessagesForAdmin (required).</param>
        /// <param name="taxReports">taxReports (required).</param>
        /// <param name="taxReturn">taxReturn (required).</param>
        /// <param name="taxes">taxes (required).</param>
        /// <param name="transfers">transfers (required).</param>
        /// <param name="txnRelationshipLogs">txnRelationshipLogs (required).</param>
        /// <param name="userAttributeLogs">userAttributeLogs (required).</param>
        /// <param name="userMatchers">userMatchers (required).</param>
        /// <param name="walletTxns">walletTxns (required).</param>
        /// <param name="walletables">walletables (required).</param>
        /// <param name="workflows">workflows (required).</param>
        /// <param name="yearEnd">yearEnd (required).</param>
        public InlineResponse20013(UserCapability tags = default(UserCapability), UserCapabilityWithWrite accessControls = default(UserCapabilityWithWrite), UserCapabilityJustRead accountItemStatements = default(UserCapabilityJustRead), UserCapability accountItems = default(UserCapability), UserCapabilityJustRead annualReports = default(UserCapabilityJustRead), UserCapabilityJustRead appRoleLogs = default(UserCapabilityJustRead), UserCapability approvalFlowRoutes = default(UserCapability), UserCapabilityWithSelfOnly approvalRequests = default(UserCapabilityWithSelfOnly), UserCapabilityJustRead backups = default(UserCapabilityJustRead), UserCapability bankAccountantStaffUsers = default(UserCapability), UserCapability bizAllocations = default(UserCapability), UserCapabilityJustReadUpdate companies = default(UserCapabilityJustReadUpdate), UserCapabilityJustUpdate companyInternalAnnouncements = default(UserCapabilityJustUpdate), UserCapabilityJustRead consumptionEntries = default(UserCapabilityJustRead), UserCapabilityJustReadUpdate costAllocations = default(UserCapabilityJustReadUpdate), UserCapability dealTemplates = default(UserCapability), UserCapabilityWithSelfOnly deals = default(UserCapabilityWithSelfOnly), UserCapabilityJustRead docChangeLogs = default(UserCapabilityJustRead), UserCapabilityJustCreate docPostings = default(UserCapabilityJustCreate), UserCapabilityWithSelfOnly docs = default(UserCapabilityWithSelfOnly), UserCapabilityJustCreate expenseApplicationSyncPayroll = default(UserCapabilityJustCreate), UserCapability expenseApplicationTemplates = default(UserCapability), UserCapabilityWithSelfOnly expenseApplications = default(UserCapabilityWithSelfOnly), UserCapability fixedAssets = default(UserCapability), UserCapability inventoryRefreshes = default(UserCapability), UserCapability invitations = default(UserCapability), UserCapability items = default(UserCapability), UserCapability manualJournalTemplates = default(UserCapability), UserCapabilityWithSelfOnly manualJournals = default(UserCapabilityWithSelfOnly), UserCapabilityJustRead monthEnd = default(UserCapabilityJustRead), UserCapability oauthApplications = default(UserCapability), UserCapability oauthAuthorizations = default(UserCapability), UserCapabilityJustReadUpdate openingBalances = default(UserCapabilityJustReadUpdate), UserCapability partners = default(UserCapability), UserCapability paymentRecords = default(UserCapability), UserCapabilityWithSelfOnly paymentRequests = default(UserCapabilityWithSelfOnly), UserCapability payrollItemSets = default(UserCapability), UserCapabilityJustRead receiptStreamEditor = default(UserCapabilityJustRead), UserCapabilityWithSelfOnly receipts = default(UserCapabilityWithSelfOnly), UserCapabilityJustRead reports = default(UserCapabilityJustRead), UserCapabilityJustRead reportsBs = default(UserCapabilityJustRead), UserCapabilityJustRead reportsCashBalance = default(UserCapabilityJustRead), UserCapabilityJustRead reportsCrosstabs = default(UserCapabilityJustRead), UserCapabilityJustRead reportsCustomReportsAggregate = default(UserCapabilityJustRead), UserCapabilityJustRead reportsGeneralLedgers = default(UserCapabilityJustRead), UserCapabilityJustRead reportsIncomeExpense = default(UserCapabilityJustRead), UserCapabilityJustRead reportsJournals = default(UserCapabilityJustRead), UserCapabilityJustReadWrite reportsManagementsNavigation = default(UserCapabilityJustReadWrite), UserCapabilityJustReadWrite reportsManagementsPlanning = default(UserCapabilityJustReadWrite), UserCapabilityJustReadWrite reportsPayables = default(UserCapabilityJustReadWrite), UserCapabilityJustRead reportsPl = default(UserCapabilityJustRead), UserCapabilityJustRead reportsReceivables = default(UserCapabilityJustRead), UserCapability requestForms = default(UserCapability), UserCapabilityJustRead resets = default(UserCapabilityJustRead), UserCapability sections = default(UserCapability), UserCapabilityJustRead signInLogs = default(UserCapabilityJustRead), UserCapabilityJustCreateRead spreadsheets = default(UserCapabilityJustCreateRead), UserCapabilityJustRead systemConversion = default(UserCapabilityJustRead), UserCapabilityJustRead systemMessagesForAdmin = default(UserCapabilityJustRead), UserCapabilityJustRead taxReports = default(UserCapabilityJustRead), UserCapabilityJustRead taxReturn = default(UserCapabilityJustRead), UserCapabilityJustReadUpdate taxes = default(UserCapabilityJustReadUpdate), UserCapabilityWithSelfOnly transfers = default(UserCapabilityWithSelfOnly), UserCapabilityJustRead txnRelationshipLogs = default(UserCapabilityJustRead), UserCapabilityJustRead userAttributeLogs = default(UserCapabilityJustRead), UserCapability userMatchers = default(UserCapability), UserCapabilityWithConfirm walletTxns = default(UserCapabilityWithConfirm), UserCapabilityWithSync walletables = default(UserCapabilityWithSync), UserCapabilityJustReadUpdateDestroy workflows = default(UserCapabilityJustReadUpdateDestroy), UserCapabilityJustReadUpdate yearEnd = default(UserCapabilityJustReadUpdate))
        {
            // to ensure "tags" is required (not null)
            if (tags == null) {
                throw new ArgumentNullException("tags is a required property for InlineResponse20013 and cannot be null");
            }
            this.Tags = tags;
            // to ensure "accessControls" is required (not null)
            if (accessControls == null) {
                throw new ArgumentNullException("accessControls is a required property for InlineResponse20013 and cannot be null");
            }
            this.AccessControls = accessControls;
            // to ensure "accountItemStatements" is required (not null)
            if (accountItemStatements == null) {
                throw new ArgumentNullException("accountItemStatements is a required property for InlineResponse20013 and cannot be null");
            }
            this.AccountItemStatements = accountItemStatements;
            // to ensure "accountItems" is required (not null)
            if (accountItems == null) {
                throw new ArgumentNullException("accountItems is a required property for InlineResponse20013 and cannot be null");
            }
            this.AccountItems = accountItems;
            // to ensure "annualReports" is required (not null)
            if (annualReports == null) {
                throw new ArgumentNullException("annualReports is a required property for InlineResponse20013 and cannot be null");
            }
            this.AnnualReports = annualReports;
            // to ensure "appRoleLogs" is required (not null)
            if (appRoleLogs == null) {
                throw new ArgumentNullException("appRoleLogs is a required property for InlineResponse20013 and cannot be null");
            }
            this.AppRoleLogs = appRoleLogs;
            // to ensure "approvalFlowRoutes" is required (not null)
            if (approvalFlowRoutes == null) {
                throw new ArgumentNullException("approvalFlowRoutes is a required property for InlineResponse20013 and cannot be null");
            }
            this.ApprovalFlowRoutes = approvalFlowRoutes;
            // to ensure "approvalRequests" is required (not null)
            if (approvalRequests == null) {
                throw new ArgumentNullException("approvalRequests is a required property for InlineResponse20013 and cannot be null");
            }
            this.ApprovalRequests = approvalRequests;
            // to ensure "backups" is required (not null)
            if (backups == null) {
                throw new ArgumentNullException("backups is a required property for InlineResponse20013 and cannot be null");
            }
            this.Backups = backups;
            // to ensure "bankAccountantStaffUsers" is required (not null)
            if (bankAccountantStaffUsers == null) {
                throw new ArgumentNullException("bankAccountantStaffUsers is a required property for InlineResponse20013 and cannot be null");
            }
            this.BankAccountantStaffUsers = bankAccountantStaffUsers;
            // to ensure "bizAllocations" is required (not null)
            if (bizAllocations == null) {
                throw new ArgumentNullException("bizAllocations is a required property for InlineResponse20013 and cannot be null");
            }
            this.BizAllocations = bizAllocations;
            // to ensure "companies" is required (not null)
            if (companies == null) {
                throw new ArgumentNullException("companies is a required property for InlineResponse20013 and cannot be null");
            }
            this.Companies = companies;
            // to ensure "companyInternalAnnouncements" is required (not null)
            if (companyInternalAnnouncements == null) {
                throw new ArgumentNullException("companyInternalAnnouncements is a required property for InlineResponse20013 and cannot be null");
            }
            this.CompanyInternalAnnouncements = companyInternalAnnouncements;
            // to ensure "consumptionEntries" is required (not null)
            if (consumptionEntries == null) {
                throw new ArgumentNullException("consumptionEntries is a required property for InlineResponse20013 and cannot be null");
            }
            this.ConsumptionEntries = consumptionEntries;
            // to ensure "costAllocations" is required (not null)
            if (costAllocations == null) {
                throw new ArgumentNullException("costAllocations is a required property for InlineResponse20013 and cannot be null");
            }
            this.CostAllocations = costAllocations;
            // to ensure "dealTemplates" is required (not null)
            if (dealTemplates == null) {
                throw new ArgumentNullException("dealTemplates is a required property for InlineResponse20013 and cannot be null");
            }
            this.DealTemplates = dealTemplates;
            // to ensure "deals" is required (not null)
            if (deals == null) {
                throw new ArgumentNullException("deals is a required property for InlineResponse20013 and cannot be null");
            }
            this.Deals = deals;
            // to ensure "docChangeLogs" is required (not null)
            if (docChangeLogs == null) {
                throw new ArgumentNullException("docChangeLogs is a required property for InlineResponse20013 and cannot be null");
            }
            this.DocChangeLogs = docChangeLogs;
            // to ensure "docPostings" is required (not null)
            if (docPostings == null) {
                throw new ArgumentNullException("docPostings is a required property for InlineResponse20013 and cannot be null");
            }
            this.DocPostings = docPostings;
            // to ensure "docs" is required (not null)
            if (docs == null) {
                throw new ArgumentNullException("docs is a required property for InlineResponse20013 and cannot be null");
            }
            this.Docs = docs;
            // to ensure "expenseApplicationSyncPayroll" is required (not null)
            if (expenseApplicationSyncPayroll == null) {
                throw new ArgumentNullException("expenseApplicationSyncPayroll is a required property for InlineResponse20013 and cannot be null");
            }
            this.ExpenseApplicationSyncPayroll = expenseApplicationSyncPayroll;
            // to ensure "expenseApplicationTemplates" is required (not null)
            if (expenseApplicationTemplates == null) {
                throw new ArgumentNullException("expenseApplicationTemplates is a required property for InlineResponse20013 and cannot be null");
            }
            this.ExpenseApplicationTemplates = expenseApplicationTemplates;
            // to ensure "expenseApplications" is required (not null)
            if (expenseApplications == null) {
                throw new ArgumentNullException("expenseApplications is a required property for InlineResponse20013 and cannot be null");
            }
            this.ExpenseApplications = expenseApplications;
            // to ensure "fixedAssets" is required (not null)
            if (fixedAssets == null) {
                throw new ArgumentNullException("fixedAssets is a required property for InlineResponse20013 and cannot be null");
            }
            this.FixedAssets = fixedAssets;
            // to ensure "inventoryRefreshes" is required (not null)
            if (inventoryRefreshes == null) {
                throw new ArgumentNullException("inventoryRefreshes is a required property for InlineResponse20013 and cannot be null");
            }
            this.InventoryRefreshes = inventoryRefreshes;
            // to ensure "invitations" is required (not null)
            if (invitations == null) {
                throw new ArgumentNullException("invitations is a required property for InlineResponse20013 and cannot be null");
            }
            this.Invitations = invitations;
            // to ensure "items" is required (not null)
            if (items == null) {
                throw new ArgumentNullException("items is a required property for InlineResponse20013 and cannot be null");
            }
            this.Items = items;
            // to ensure "manualJournalTemplates" is required (not null)
            if (manualJournalTemplates == null) {
                throw new ArgumentNullException("manualJournalTemplates is a required property for InlineResponse20013 and cannot be null");
            }
            this.ManualJournalTemplates = manualJournalTemplates;
            // to ensure "manualJournals" is required (not null)
            if (manualJournals == null) {
                throw new ArgumentNullException("manualJournals is a required property for InlineResponse20013 and cannot be null");
            }
            this.ManualJournals = manualJournals;
            // to ensure "monthEnd" is required (not null)
            if (monthEnd == null) {
                throw new ArgumentNullException("monthEnd is a required property for InlineResponse20013 and cannot be null");
            }
            this.MonthEnd = monthEnd;
            // to ensure "oauthApplications" is required (not null)
            if (oauthApplications == null) {
                throw new ArgumentNullException("oauthApplications is a required property for InlineResponse20013 and cannot be null");
            }
            this.OauthApplications = oauthApplications;
            // to ensure "oauthAuthorizations" is required (not null)
            if (oauthAuthorizations == null) {
                throw new ArgumentNullException("oauthAuthorizations is a required property for InlineResponse20013 and cannot be null");
            }
            this.OauthAuthorizations = oauthAuthorizations;
            // to ensure "openingBalances" is required (not null)
            if (openingBalances == null) {
                throw new ArgumentNullException("openingBalances is a required property for InlineResponse20013 and cannot be null");
            }
            this.OpeningBalances = openingBalances;
            // to ensure "partners" is required (not null)
            if (partners == null) {
                throw new ArgumentNullException("partners is a required property for InlineResponse20013 and cannot be null");
            }
            this.Partners = partners;
            // to ensure "paymentRecords" is required (not null)
            if (paymentRecords == null) {
                throw new ArgumentNullException("paymentRecords is a required property for InlineResponse20013 and cannot be null");
            }
            this.PaymentRecords = paymentRecords;
            // to ensure "paymentRequests" is required (not null)
            if (paymentRequests == null) {
                throw new ArgumentNullException("paymentRequests is a required property for InlineResponse20013 and cannot be null");
            }
            this.PaymentRequests = paymentRequests;
            // to ensure "payrollItemSets" is required (not null)
            if (payrollItemSets == null) {
                throw new ArgumentNullException("payrollItemSets is a required property for InlineResponse20013 and cannot be null");
            }
            this.PayrollItemSets = payrollItemSets;
            // to ensure "receiptStreamEditor" is required (not null)
            if (receiptStreamEditor == null) {
                throw new ArgumentNullException("receiptStreamEditor is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReceiptStreamEditor = receiptStreamEditor;
            // to ensure "receipts" is required (not null)
            if (receipts == null) {
                throw new ArgumentNullException("receipts is a required property for InlineResponse20013 and cannot be null");
            }
            this.Receipts = receipts;
            // to ensure "reports" is required (not null)
            if (reports == null) {
                throw new ArgumentNullException("reports is a required property for InlineResponse20013 and cannot be null");
            }
            this.Reports = reports;
            // to ensure "reportsBs" is required (not null)
            if (reportsBs == null) {
                throw new ArgumentNullException("reportsBs is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReportsBs = reportsBs;
            // to ensure "reportsCashBalance" is required (not null)
            if (reportsCashBalance == null) {
                throw new ArgumentNullException("reportsCashBalance is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReportsCashBalance = reportsCashBalance;
            // to ensure "reportsCrosstabs" is required (not null)
            if (reportsCrosstabs == null) {
                throw new ArgumentNullException("reportsCrosstabs is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReportsCrosstabs = reportsCrosstabs;
            // to ensure "reportsCustomReportsAggregate" is required (not null)
            if (reportsCustomReportsAggregate == null) {
                throw new ArgumentNullException("reportsCustomReportsAggregate is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReportsCustomReportsAggregate = reportsCustomReportsAggregate;
            // to ensure "reportsGeneralLedgers" is required (not null)
            if (reportsGeneralLedgers == null) {
                throw new ArgumentNullException("reportsGeneralLedgers is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReportsGeneralLedgers = reportsGeneralLedgers;
            // to ensure "reportsIncomeExpense" is required (not null)
            if (reportsIncomeExpense == null) {
                throw new ArgumentNullException("reportsIncomeExpense is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReportsIncomeExpense = reportsIncomeExpense;
            // to ensure "reportsJournals" is required (not null)
            if (reportsJournals == null) {
                throw new ArgumentNullException("reportsJournals is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReportsJournals = reportsJournals;
            // to ensure "reportsManagementsNavigation" is required (not null)
            if (reportsManagementsNavigation == null) {
                throw new ArgumentNullException("reportsManagementsNavigation is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReportsManagementsNavigation = reportsManagementsNavigation;
            // to ensure "reportsManagementsPlanning" is required (not null)
            if (reportsManagementsPlanning == null) {
                throw new ArgumentNullException("reportsManagementsPlanning is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReportsManagementsPlanning = reportsManagementsPlanning;
            // to ensure "reportsPayables" is required (not null)
            if (reportsPayables == null) {
                throw new ArgumentNullException("reportsPayables is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReportsPayables = reportsPayables;
            // to ensure "reportsPl" is required (not null)
            if (reportsPl == null) {
                throw new ArgumentNullException("reportsPl is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReportsPl = reportsPl;
            // to ensure "reportsReceivables" is required (not null)
            if (reportsReceivables == null) {
                throw new ArgumentNullException("reportsReceivables is a required property for InlineResponse20013 and cannot be null");
            }
            this.ReportsReceivables = reportsReceivables;
            // to ensure "requestForms" is required (not null)
            if (requestForms == null) {
                throw new ArgumentNullException("requestForms is a required property for InlineResponse20013 and cannot be null");
            }
            this.RequestForms = requestForms;
            // to ensure "resets" is required (not null)
            if (resets == null) {
                throw new ArgumentNullException("resets is a required property for InlineResponse20013 and cannot be null");
            }
            this.Resets = resets;
            // to ensure "sections" is required (not null)
            if (sections == null) {
                throw new ArgumentNullException("sections is a required property for InlineResponse20013 and cannot be null");
            }
            this.Sections = sections;
            // to ensure "signInLogs" is required (not null)
            if (signInLogs == null) {
                throw new ArgumentNullException("signInLogs is a required property for InlineResponse20013 and cannot be null");
            }
            this.SignInLogs = signInLogs;
            // to ensure "spreadsheets" is required (not null)
            if (spreadsheets == null) {
                throw new ArgumentNullException("spreadsheets is a required property for InlineResponse20013 and cannot be null");
            }
            this.Spreadsheets = spreadsheets;
            // to ensure "systemConversion" is required (not null)
            if (systemConversion == null) {
                throw new ArgumentNullException("systemConversion is a required property for InlineResponse20013 and cannot be null");
            }
            this.SystemConversion = systemConversion;
            // to ensure "systemMessagesForAdmin" is required (not null)
            if (systemMessagesForAdmin == null) {
                throw new ArgumentNullException("systemMessagesForAdmin is a required property for InlineResponse20013 and cannot be null");
            }
            this.SystemMessagesForAdmin = systemMessagesForAdmin;
            // to ensure "taxReports" is required (not null)
            if (taxReports == null) {
                throw new ArgumentNullException("taxReports is a required property for InlineResponse20013 and cannot be null");
            }
            this.TaxReports = taxReports;
            // to ensure "taxReturn" is required (not null)
            if (taxReturn == null) {
                throw new ArgumentNullException("taxReturn is a required property for InlineResponse20013 and cannot be null");
            }
            this.TaxReturn = taxReturn;
            // to ensure "taxes" is required (not null)
            if (taxes == null) {
                throw new ArgumentNullException("taxes is a required property for InlineResponse20013 and cannot be null");
            }
            this.Taxes = taxes;
            // to ensure "transfers" is required (not null)
            if (transfers == null) {
                throw new ArgumentNullException("transfers is a required property for InlineResponse20013 and cannot be null");
            }
            this.Transfers = transfers;
            // to ensure "txnRelationshipLogs" is required (not null)
            if (txnRelationshipLogs == null) {
                throw new ArgumentNullException("txnRelationshipLogs is a required property for InlineResponse20013 and cannot be null");
            }
            this.TxnRelationshipLogs = txnRelationshipLogs;
            // to ensure "userAttributeLogs" is required (not null)
            if (userAttributeLogs == null) {
                throw new ArgumentNullException("userAttributeLogs is a required property for InlineResponse20013 and cannot be null");
            }
            this.UserAttributeLogs = userAttributeLogs;
            // to ensure "userMatchers" is required (not null)
            if (userMatchers == null) {
                throw new ArgumentNullException("userMatchers is a required property for InlineResponse20013 and cannot be null");
            }
            this.UserMatchers = userMatchers;
            // to ensure "walletTxns" is required (not null)
            if (walletTxns == null) {
                throw new ArgumentNullException("walletTxns is a required property for InlineResponse20013 and cannot be null");
            }
            this.WalletTxns = walletTxns;
            // to ensure "walletables" is required (not null)
            if (walletables == null) {
                throw new ArgumentNullException("walletables is a required property for InlineResponse20013 and cannot be null");
            }
            this.Walletables = walletables;
            // to ensure "workflows" is required (not null)
            if (workflows == null) {
                throw new ArgumentNullException("workflows is a required property for InlineResponse20013 and cannot be null");
            }
            this.Workflows = workflows;
            // to ensure "yearEnd" is required (not null)
            if (yearEnd == null) {
                throw new ArgumentNullException("yearEnd is a required property for InlineResponse20013 and cannot be null");
            }
            this.YearEnd = yearEnd;
        }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability Tags { get; set; }

        /// <summary>
        /// Gets or Sets AccessControls
        /// </summary>
        [DataMember(Name = "access_controls", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityWithWrite AccessControls { get; set; }

        /// <summary>
        /// Gets or Sets AccountItemStatements
        /// </summary>
        [DataMember(Name = "account_item_statements", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead AccountItemStatements { get; set; }

        /// <summary>
        /// Gets or Sets AccountItems
        /// </summary>
        [DataMember(Name = "account_items", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability AccountItems { get; set; }

        /// <summary>
        /// Gets or Sets AnnualReports
        /// </summary>
        [DataMember(Name = "annual_reports", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead AnnualReports { get; set; }

        /// <summary>
        /// Gets or Sets AppRoleLogs
        /// </summary>
        [DataMember(Name = "app_role_logs", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead AppRoleLogs { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalFlowRoutes
        /// </summary>
        [DataMember(Name = "approval_flow_routes", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability ApprovalFlowRoutes { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalRequests
        /// </summary>
        [DataMember(Name = "approval_requests", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityWithSelfOnly ApprovalRequests { get; set; }

        /// <summary>
        /// Gets or Sets Backups
        /// </summary>
        [DataMember(Name = "backups", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead Backups { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountantStaffUsers
        /// </summary>
        [DataMember(Name = "bank_accountant_staff_users", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability BankAccountantStaffUsers { get; set; }

        /// <summary>
        /// Gets or Sets BizAllocations
        /// </summary>
        [DataMember(Name = "biz_allocations", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability BizAllocations { get; set; }

        /// <summary>
        /// Gets or Sets Companies
        /// </summary>
        [DataMember(Name = "companies", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustReadUpdate Companies { get; set; }

        /// <summary>
        /// Gets or Sets CompanyInternalAnnouncements
        /// </summary>
        [DataMember(Name = "company_internal_announcements", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustUpdate CompanyInternalAnnouncements { get; set; }

        /// <summary>
        /// Gets or Sets ConsumptionEntries
        /// </summary>
        [DataMember(Name = "consumption_entries", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead ConsumptionEntries { get; set; }

        /// <summary>
        /// Gets or Sets CostAllocations
        /// </summary>
        [DataMember(Name = "cost_allocations", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustReadUpdate CostAllocations { get; set; }

        /// <summary>
        /// Gets or Sets DealTemplates
        /// </summary>
        [DataMember(Name = "deal_templates", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability DealTemplates { get; set; }

        /// <summary>
        /// Gets or Sets Deals
        /// </summary>
        [DataMember(Name = "deals", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityWithSelfOnly Deals { get; set; }

        /// <summary>
        /// Gets or Sets DocChangeLogs
        /// </summary>
        [DataMember(Name = "doc_change_logs", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead DocChangeLogs { get; set; }

        /// <summary>
        /// Gets or Sets DocPostings
        /// </summary>
        [DataMember(Name = "doc_postings", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustCreate DocPostings { get; set; }

        /// <summary>
        /// Gets or Sets Docs
        /// </summary>
        [DataMember(Name = "docs", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityWithSelfOnly Docs { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseApplicationSyncPayroll
        /// </summary>
        [DataMember(Name = "expense_application_sync_payroll", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustCreate ExpenseApplicationSyncPayroll { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseApplicationTemplates
        /// </summary>
        [DataMember(Name = "expense_application_templates", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability ExpenseApplicationTemplates { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseApplications
        /// </summary>
        [DataMember(Name = "expense_applications", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityWithSelfOnly ExpenseApplications { get; set; }

        /// <summary>
        /// Gets or Sets FixedAssets
        /// </summary>
        [DataMember(Name = "fixed_assets", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability FixedAssets { get; set; }

        /// <summary>
        /// Gets or Sets InventoryRefreshes
        /// </summary>
        [DataMember(Name = "inventory_refreshes", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability InventoryRefreshes { get; set; }

        /// <summary>
        /// Gets or Sets Invitations
        /// </summary>
        [DataMember(Name = "invitations", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability Invitations { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability Items { get; set; }

        /// <summary>
        /// Gets or Sets ManualJournalTemplates
        /// </summary>
        [DataMember(Name = "manual_journal_templates", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability ManualJournalTemplates { get; set; }

        /// <summary>
        /// Gets or Sets ManualJournals
        /// </summary>
        [DataMember(Name = "manual_journals", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityWithSelfOnly ManualJournals { get; set; }

        /// <summary>
        /// Gets or Sets MonthEnd
        /// </summary>
        [DataMember(Name = "month_end", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead MonthEnd { get; set; }

        /// <summary>
        /// Gets or Sets OauthApplications
        /// </summary>
        [DataMember(Name = "oauth_applications", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability OauthApplications { get; set; }

        /// <summary>
        /// Gets or Sets OauthAuthorizations
        /// </summary>
        [DataMember(Name = "oauth_authorizations", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability OauthAuthorizations { get; set; }

        /// <summary>
        /// Gets or Sets OpeningBalances
        /// </summary>
        [DataMember(Name = "opening_balances", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustReadUpdate OpeningBalances { get; set; }

        /// <summary>
        /// Gets or Sets Partners
        /// </summary>
        [DataMember(Name = "partners", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability Partners { get; set; }

        /// <summary>
        /// Gets or Sets PaymentRecords
        /// </summary>
        [DataMember(Name = "payment_records", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability PaymentRecords { get; set; }

        /// <summary>
        /// Gets or Sets PaymentRequests
        /// </summary>
        [DataMember(Name = "payment_requests", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityWithSelfOnly PaymentRequests { get; set; }

        /// <summary>
        /// Gets or Sets PayrollItemSets
        /// </summary>
        [DataMember(Name = "payroll_item_sets", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability PayrollItemSets { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptStreamEditor
        /// </summary>
        [DataMember(Name = "receipt_stream_editor", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead ReceiptStreamEditor { get; set; }

        /// <summary>
        /// Gets or Sets Receipts
        /// </summary>
        [DataMember(Name = "receipts", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityWithSelfOnly Receipts { get; set; }

        /// <summary>
        /// Gets or Sets Reports
        /// </summary>
        [DataMember(Name = "reports", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead Reports { get; set; }

        /// <summary>
        /// Gets or Sets ReportsBs
        /// </summary>
        [DataMember(Name = "reports_bs", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead ReportsBs { get; set; }

        /// <summary>
        /// Gets or Sets ReportsCashBalance
        /// </summary>
        [DataMember(Name = "reports_cash_balance", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead ReportsCashBalance { get; set; }

        /// <summary>
        /// Gets or Sets ReportsCrosstabs
        /// </summary>
        [DataMember(Name = "reports_crosstabs", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead ReportsCrosstabs { get; set; }

        /// <summary>
        /// Gets or Sets ReportsCustomReportsAggregate
        /// </summary>
        [DataMember(Name = "reports_custom_reports_aggregate", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead ReportsCustomReportsAggregate { get; set; }

        /// <summary>
        /// Gets or Sets ReportsGeneralLedgers
        /// </summary>
        [DataMember(Name = "reports_general_ledgers", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead ReportsGeneralLedgers { get; set; }

        /// <summary>
        /// Gets or Sets ReportsIncomeExpense
        /// </summary>
        [DataMember(Name = "reports_income_expense", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead ReportsIncomeExpense { get; set; }

        /// <summary>
        /// Gets or Sets ReportsJournals
        /// </summary>
        [DataMember(Name = "reports_journals", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead ReportsJournals { get; set; }

        /// <summary>
        /// Gets or Sets ReportsManagementsNavigation
        /// </summary>
        [DataMember(Name = "reports_managements_navigation", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustReadWrite ReportsManagementsNavigation { get; set; }

        /// <summary>
        /// Gets or Sets ReportsManagementsPlanning
        /// </summary>
        [DataMember(Name = "reports_managements_planning", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustReadWrite ReportsManagementsPlanning { get; set; }

        /// <summary>
        /// Gets or Sets ReportsPayables
        /// </summary>
        [DataMember(Name = "reports_payables", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustReadWrite ReportsPayables { get; set; }

        /// <summary>
        /// Gets or Sets ReportsPl
        /// </summary>
        [DataMember(Name = "reports_pl", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead ReportsPl { get; set; }

        /// <summary>
        /// Gets or Sets ReportsReceivables
        /// </summary>
        [DataMember(Name = "reports_receivables", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead ReportsReceivables { get; set; }

        /// <summary>
        /// Gets or Sets RequestForms
        /// </summary>
        [DataMember(Name = "request_forms", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability RequestForms { get; set; }

        /// <summary>
        /// Gets or Sets Resets
        /// </summary>
        [DataMember(Name = "resets", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead Resets { get; set; }

        /// <summary>
        /// Gets or Sets Sections
        /// </summary>
        [DataMember(Name = "sections", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability Sections { get; set; }

        /// <summary>
        /// Gets or Sets SignInLogs
        /// </summary>
        [DataMember(Name = "sign_in_logs", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead SignInLogs { get; set; }

        /// <summary>
        /// Gets or Sets Spreadsheets
        /// </summary>
        [DataMember(Name = "spreadsheets", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustCreateRead Spreadsheets { get; set; }

        /// <summary>
        /// Gets or Sets SystemConversion
        /// </summary>
        [DataMember(Name = "system_conversion", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead SystemConversion { get; set; }

        /// <summary>
        /// Gets or Sets SystemMessagesForAdmin
        /// </summary>
        [DataMember(Name = "system_messages_for_admin", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead SystemMessagesForAdmin { get; set; }

        /// <summary>
        /// Gets or Sets TaxReports
        /// </summary>
        [DataMember(Name = "tax_reports", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead TaxReports { get; set; }

        /// <summary>
        /// Gets or Sets TaxReturn
        /// </summary>
        [DataMember(Name = "tax_return", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead TaxReturn { get; set; }

        /// <summary>
        /// Gets or Sets Taxes
        /// </summary>
        [DataMember(Name = "taxes", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustReadUpdate Taxes { get; set; }

        /// <summary>
        /// Gets or Sets Transfers
        /// </summary>
        [DataMember(Name = "transfers", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityWithSelfOnly Transfers { get; set; }

        /// <summary>
        /// Gets or Sets TxnRelationshipLogs
        /// </summary>
        [DataMember(Name = "txn_relationship_logs", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead TxnRelationshipLogs { get; set; }

        /// <summary>
        /// Gets or Sets UserAttributeLogs
        /// </summary>
        [DataMember(Name = "user_attribute_logs", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustRead UserAttributeLogs { get; set; }

        /// <summary>
        /// Gets or Sets UserMatchers
        /// </summary>
        [DataMember(Name = "user_matchers", IsRequired = true, EmitDefaultValue = false)]
        public UserCapability UserMatchers { get; set; }

        /// <summary>
        /// Gets or Sets WalletTxns
        /// </summary>
        [DataMember(Name = "wallet_txns", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityWithConfirm WalletTxns { get; set; }

        /// <summary>
        /// Gets or Sets Walletables
        /// </summary>
        [DataMember(Name = "walletables", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityWithSync Walletables { get; set; }

        /// <summary>
        /// Gets or Sets Workflows
        /// </summary>
        [DataMember(Name = "workflows", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustReadUpdateDestroy Workflows { get; set; }

        /// <summary>
        /// Gets or Sets YearEnd
        /// </summary>
        [DataMember(Name = "year_end", IsRequired = true, EmitDefaultValue = false)]
        public UserCapabilityJustReadUpdate YearEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20013 {\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  AccessControls: ").Append(AccessControls).Append("\n");
            sb.Append("  AccountItemStatements: ").Append(AccountItemStatements).Append("\n");
            sb.Append("  AccountItems: ").Append(AccountItems).Append("\n");
            sb.Append("  AnnualReports: ").Append(AnnualReports).Append("\n");
            sb.Append("  AppRoleLogs: ").Append(AppRoleLogs).Append("\n");
            sb.Append("  ApprovalFlowRoutes: ").Append(ApprovalFlowRoutes).Append("\n");
            sb.Append("  ApprovalRequests: ").Append(ApprovalRequests).Append("\n");
            sb.Append("  Backups: ").Append(Backups).Append("\n");
            sb.Append("  BankAccountantStaffUsers: ").Append(BankAccountantStaffUsers).Append("\n");
            sb.Append("  BizAllocations: ").Append(BizAllocations).Append("\n");
            sb.Append("  Companies: ").Append(Companies).Append("\n");
            sb.Append("  CompanyInternalAnnouncements: ").Append(CompanyInternalAnnouncements).Append("\n");
            sb.Append("  ConsumptionEntries: ").Append(ConsumptionEntries).Append("\n");
            sb.Append("  CostAllocations: ").Append(CostAllocations).Append("\n");
            sb.Append("  DealTemplates: ").Append(DealTemplates).Append("\n");
            sb.Append("  Deals: ").Append(Deals).Append("\n");
            sb.Append("  DocChangeLogs: ").Append(DocChangeLogs).Append("\n");
            sb.Append("  DocPostings: ").Append(DocPostings).Append("\n");
            sb.Append("  Docs: ").Append(Docs).Append("\n");
            sb.Append("  ExpenseApplicationSyncPayroll: ").Append(ExpenseApplicationSyncPayroll).Append("\n");
            sb.Append("  ExpenseApplicationTemplates: ").Append(ExpenseApplicationTemplates).Append("\n");
            sb.Append("  ExpenseApplications: ").Append(ExpenseApplications).Append("\n");
            sb.Append("  FixedAssets: ").Append(FixedAssets).Append("\n");
            sb.Append("  InventoryRefreshes: ").Append(InventoryRefreshes).Append("\n");
            sb.Append("  Invitations: ").Append(Invitations).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ManualJournalTemplates: ").Append(ManualJournalTemplates).Append("\n");
            sb.Append("  ManualJournals: ").Append(ManualJournals).Append("\n");
            sb.Append("  MonthEnd: ").Append(MonthEnd).Append("\n");
            sb.Append("  OauthApplications: ").Append(OauthApplications).Append("\n");
            sb.Append("  OauthAuthorizations: ").Append(OauthAuthorizations).Append("\n");
            sb.Append("  OpeningBalances: ").Append(OpeningBalances).Append("\n");
            sb.Append("  Partners: ").Append(Partners).Append("\n");
            sb.Append("  PaymentRecords: ").Append(PaymentRecords).Append("\n");
            sb.Append("  PaymentRequests: ").Append(PaymentRequests).Append("\n");
            sb.Append("  PayrollItemSets: ").Append(PayrollItemSets).Append("\n");
            sb.Append("  ReceiptStreamEditor: ").Append(ReceiptStreamEditor).Append("\n");
            sb.Append("  Receipts: ").Append(Receipts).Append("\n");
            sb.Append("  Reports: ").Append(Reports).Append("\n");
            sb.Append("  ReportsBs: ").Append(ReportsBs).Append("\n");
            sb.Append("  ReportsCashBalance: ").Append(ReportsCashBalance).Append("\n");
            sb.Append("  ReportsCrosstabs: ").Append(ReportsCrosstabs).Append("\n");
            sb.Append("  ReportsCustomReportsAggregate: ").Append(ReportsCustomReportsAggregate).Append("\n");
            sb.Append("  ReportsGeneralLedgers: ").Append(ReportsGeneralLedgers).Append("\n");
            sb.Append("  ReportsIncomeExpense: ").Append(ReportsIncomeExpense).Append("\n");
            sb.Append("  ReportsJournals: ").Append(ReportsJournals).Append("\n");
            sb.Append("  ReportsManagementsNavigation: ").Append(ReportsManagementsNavigation).Append("\n");
            sb.Append("  ReportsManagementsPlanning: ").Append(ReportsManagementsPlanning).Append("\n");
            sb.Append("  ReportsPayables: ").Append(ReportsPayables).Append("\n");
            sb.Append("  ReportsPl: ").Append(ReportsPl).Append("\n");
            sb.Append("  ReportsReceivables: ").Append(ReportsReceivables).Append("\n");
            sb.Append("  RequestForms: ").Append(RequestForms).Append("\n");
            sb.Append("  Resets: ").Append(Resets).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  SignInLogs: ").Append(SignInLogs).Append("\n");
            sb.Append("  Spreadsheets: ").Append(Spreadsheets).Append("\n");
            sb.Append("  SystemConversion: ").Append(SystemConversion).Append("\n");
            sb.Append("  SystemMessagesForAdmin: ").Append(SystemMessagesForAdmin).Append("\n");
            sb.Append("  TaxReports: ").Append(TaxReports).Append("\n");
            sb.Append("  TaxReturn: ").Append(TaxReturn).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Transfers: ").Append(Transfers).Append("\n");
            sb.Append("  TxnRelationshipLogs: ").Append(TxnRelationshipLogs).Append("\n");
            sb.Append("  UserAttributeLogs: ").Append(UserAttributeLogs).Append("\n");
            sb.Append("  UserMatchers: ").Append(UserMatchers).Append("\n");
            sb.Append("  WalletTxns: ").Append(WalletTxns).Append("\n");
            sb.Append("  Walletables: ").Append(Walletables).Append("\n");
            sb.Append("  Workflows: ").Append(Workflows).Append("\n");
            sb.Append("  YearEnd: ").Append(YearEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20013);
        }

        /// <summary>
        /// Returns true if InlineResponse20013 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20013 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20013 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                ) && 
                (
                    this.AccessControls == input.AccessControls ||
                    (this.AccessControls != null &&
                    this.AccessControls.Equals(input.AccessControls))
                ) && 
                (
                    this.AccountItemStatements == input.AccountItemStatements ||
                    (this.AccountItemStatements != null &&
                    this.AccountItemStatements.Equals(input.AccountItemStatements))
                ) && 
                (
                    this.AccountItems == input.AccountItems ||
                    (this.AccountItems != null &&
                    this.AccountItems.Equals(input.AccountItems))
                ) && 
                (
                    this.AnnualReports == input.AnnualReports ||
                    (this.AnnualReports != null &&
                    this.AnnualReports.Equals(input.AnnualReports))
                ) && 
                (
                    this.AppRoleLogs == input.AppRoleLogs ||
                    (this.AppRoleLogs != null &&
                    this.AppRoleLogs.Equals(input.AppRoleLogs))
                ) && 
                (
                    this.ApprovalFlowRoutes == input.ApprovalFlowRoutes ||
                    (this.ApprovalFlowRoutes != null &&
                    this.ApprovalFlowRoutes.Equals(input.ApprovalFlowRoutes))
                ) && 
                (
                    this.ApprovalRequests == input.ApprovalRequests ||
                    (this.ApprovalRequests != null &&
                    this.ApprovalRequests.Equals(input.ApprovalRequests))
                ) && 
                (
                    this.Backups == input.Backups ||
                    (this.Backups != null &&
                    this.Backups.Equals(input.Backups))
                ) && 
                (
                    this.BankAccountantStaffUsers == input.BankAccountantStaffUsers ||
                    (this.BankAccountantStaffUsers != null &&
                    this.BankAccountantStaffUsers.Equals(input.BankAccountantStaffUsers))
                ) && 
                (
                    this.BizAllocations == input.BizAllocations ||
                    (this.BizAllocations != null &&
                    this.BizAllocations.Equals(input.BizAllocations))
                ) && 
                (
                    this.Companies == input.Companies ||
                    (this.Companies != null &&
                    this.Companies.Equals(input.Companies))
                ) && 
                (
                    this.CompanyInternalAnnouncements == input.CompanyInternalAnnouncements ||
                    (this.CompanyInternalAnnouncements != null &&
                    this.CompanyInternalAnnouncements.Equals(input.CompanyInternalAnnouncements))
                ) && 
                (
                    this.ConsumptionEntries == input.ConsumptionEntries ||
                    (this.ConsumptionEntries != null &&
                    this.ConsumptionEntries.Equals(input.ConsumptionEntries))
                ) && 
                (
                    this.CostAllocations == input.CostAllocations ||
                    (this.CostAllocations != null &&
                    this.CostAllocations.Equals(input.CostAllocations))
                ) && 
                (
                    this.DealTemplates == input.DealTemplates ||
                    (this.DealTemplates != null &&
                    this.DealTemplates.Equals(input.DealTemplates))
                ) && 
                (
                    this.Deals == input.Deals ||
                    (this.Deals != null &&
                    this.Deals.Equals(input.Deals))
                ) && 
                (
                    this.DocChangeLogs == input.DocChangeLogs ||
                    (this.DocChangeLogs != null &&
                    this.DocChangeLogs.Equals(input.DocChangeLogs))
                ) && 
                (
                    this.DocPostings == input.DocPostings ||
                    (this.DocPostings != null &&
                    this.DocPostings.Equals(input.DocPostings))
                ) && 
                (
                    this.Docs == input.Docs ||
                    (this.Docs != null &&
                    this.Docs.Equals(input.Docs))
                ) && 
                (
                    this.ExpenseApplicationSyncPayroll == input.ExpenseApplicationSyncPayroll ||
                    (this.ExpenseApplicationSyncPayroll != null &&
                    this.ExpenseApplicationSyncPayroll.Equals(input.ExpenseApplicationSyncPayroll))
                ) && 
                (
                    this.ExpenseApplicationTemplates == input.ExpenseApplicationTemplates ||
                    (this.ExpenseApplicationTemplates != null &&
                    this.ExpenseApplicationTemplates.Equals(input.ExpenseApplicationTemplates))
                ) && 
                (
                    this.ExpenseApplications == input.ExpenseApplications ||
                    (this.ExpenseApplications != null &&
                    this.ExpenseApplications.Equals(input.ExpenseApplications))
                ) && 
                (
                    this.FixedAssets == input.FixedAssets ||
                    (this.FixedAssets != null &&
                    this.FixedAssets.Equals(input.FixedAssets))
                ) && 
                (
                    this.InventoryRefreshes == input.InventoryRefreshes ||
                    (this.InventoryRefreshes != null &&
                    this.InventoryRefreshes.Equals(input.InventoryRefreshes))
                ) && 
                (
                    this.Invitations == input.Invitations ||
                    (this.Invitations != null &&
                    this.Invitations.Equals(input.Invitations))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.ManualJournalTemplates == input.ManualJournalTemplates ||
                    (this.ManualJournalTemplates != null &&
                    this.ManualJournalTemplates.Equals(input.ManualJournalTemplates))
                ) && 
                (
                    this.ManualJournals == input.ManualJournals ||
                    (this.ManualJournals != null &&
                    this.ManualJournals.Equals(input.ManualJournals))
                ) && 
                (
                    this.MonthEnd == input.MonthEnd ||
                    (this.MonthEnd != null &&
                    this.MonthEnd.Equals(input.MonthEnd))
                ) && 
                (
                    this.OauthApplications == input.OauthApplications ||
                    (this.OauthApplications != null &&
                    this.OauthApplications.Equals(input.OauthApplications))
                ) && 
                (
                    this.OauthAuthorizations == input.OauthAuthorizations ||
                    (this.OauthAuthorizations != null &&
                    this.OauthAuthorizations.Equals(input.OauthAuthorizations))
                ) && 
                (
                    this.OpeningBalances == input.OpeningBalances ||
                    (this.OpeningBalances != null &&
                    this.OpeningBalances.Equals(input.OpeningBalances))
                ) && 
                (
                    this.Partners == input.Partners ||
                    (this.Partners != null &&
                    this.Partners.Equals(input.Partners))
                ) && 
                (
                    this.PaymentRecords == input.PaymentRecords ||
                    (this.PaymentRecords != null &&
                    this.PaymentRecords.Equals(input.PaymentRecords))
                ) && 
                (
                    this.PaymentRequests == input.PaymentRequests ||
                    (this.PaymentRequests != null &&
                    this.PaymentRequests.Equals(input.PaymentRequests))
                ) && 
                (
                    this.PayrollItemSets == input.PayrollItemSets ||
                    (this.PayrollItemSets != null &&
                    this.PayrollItemSets.Equals(input.PayrollItemSets))
                ) && 
                (
                    this.ReceiptStreamEditor == input.ReceiptStreamEditor ||
                    (this.ReceiptStreamEditor != null &&
                    this.ReceiptStreamEditor.Equals(input.ReceiptStreamEditor))
                ) && 
                (
                    this.Receipts == input.Receipts ||
                    (this.Receipts != null &&
                    this.Receipts.Equals(input.Receipts))
                ) && 
                (
                    this.Reports == input.Reports ||
                    (this.Reports != null &&
                    this.Reports.Equals(input.Reports))
                ) && 
                (
                    this.ReportsBs == input.ReportsBs ||
                    (this.ReportsBs != null &&
                    this.ReportsBs.Equals(input.ReportsBs))
                ) && 
                (
                    this.ReportsCashBalance == input.ReportsCashBalance ||
                    (this.ReportsCashBalance != null &&
                    this.ReportsCashBalance.Equals(input.ReportsCashBalance))
                ) && 
                (
                    this.ReportsCrosstabs == input.ReportsCrosstabs ||
                    (this.ReportsCrosstabs != null &&
                    this.ReportsCrosstabs.Equals(input.ReportsCrosstabs))
                ) && 
                (
                    this.ReportsCustomReportsAggregate == input.ReportsCustomReportsAggregate ||
                    (this.ReportsCustomReportsAggregate != null &&
                    this.ReportsCustomReportsAggregate.Equals(input.ReportsCustomReportsAggregate))
                ) && 
                (
                    this.ReportsGeneralLedgers == input.ReportsGeneralLedgers ||
                    (this.ReportsGeneralLedgers != null &&
                    this.ReportsGeneralLedgers.Equals(input.ReportsGeneralLedgers))
                ) && 
                (
                    this.ReportsIncomeExpense == input.ReportsIncomeExpense ||
                    (this.ReportsIncomeExpense != null &&
                    this.ReportsIncomeExpense.Equals(input.ReportsIncomeExpense))
                ) && 
                (
                    this.ReportsJournals == input.ReportsJournals ||
                    (this.ReportsJournals != null &&
                    this.ReportsJournals.Equals(input.ReportsJournals))
                ) && 
                (
                    this.ReportsManagementsNavigation == input.ReportsManagementsNavigation ||
                    (this.ReportsManagementsNavigation != null &&
                    this.ReportsManagementsNavigation.Equals(input.ReportsManagementsNavigation))
                ) && 
                (
                    this.ReportsManagementsPlanning == input.ReportsManagementsPlanning ||
                    (this.ReportsManagementsPlanning != null &&
                    this.ReportsManagementsPlanning.Equals(input.ReportsManagementsPlanning))
                ) && 
                (
                    this.ReportsPayables == input.ReportsPayables ||
                    (this.ReportsPayables != null &&
                    this.ReportsPayables.Equals(input.ReportsPayables))
                ) && 
                (
                    this.ReportsPl == input.ReportsPl ||
                    (this.ReportsPl != null &&
                    this.ReportsPl.Equals(input.ReportsPl))
                ) && 
                (
                    this.ReportsReceivables == input.ReportsReceivables ||
                    (this.ReportsReceivables != null &&
                    this.ReportsReceivables.Equals(input.ReportsReceivables))
                ) && 
                (
                    this.RequestForms == input.RequestForms ||
                    (this.RequestForms != null &&
                    this.RequestForms.Equals(input.RequestForms))
                ) && 
                (
                    this.Resets == input.Resets ||
                    (this.Resets != null &&
                    this.Resets.Equals(input.Resets))
                ) && 
                (
                    this.Sections == input.Sections ||
                    (this.Sections != null &&
                    this.Sections.Equals(input.Sections))
                ) && 
                (
                    this.SignInLogs == input.SignInLogs ||
                    (this.SignInLogs != null &&
                    this.SignInLogs.Equals(input.SignInLogs))
                ) && 
                (
                    this.Spreadsheets == input.Spreadsheets ||
                    (this.Spreadsheets != null &&
                    this.Spreadsheets.Equals(input.Spreadsheets))
                ) && 
                (
                    this.SystemConversion == input.SystemConversion ||
                    (this.SystemConversion != null &&
                    this.SystemConversion.Equals(input.SystemConversion))
                ) && 
                (
                    this.SystemMessagesForAdmin == input.SystemMessagesForAdmin ||
                    (this.SystemMessagesForAdmin != null &&
                    this.SystemMessagesForAdmin.Equals(input.SystemMessagesForAdmin))
                ) && 
                (
                    this.TaxReports == input.TaxReports ||
                    (this.TaxReports != null &&
                    this.TaxReports.Equals(input.TaxReports))
                ) && 
                (
                    this.TaxReturn == input.TaxReturn ||
                    (this.TaxReturn != null &&
                    this.TaxReturn.Equals(input.TaxReturn))
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    (this.Taxes != null &&
                    this.Taxes.Equals(input.Taxes))
                ) && 
                (
                    this.Transfers == input.Transfers ||
                    (this.Transfers != null &&
                    this.Transfers.Equals(input.Transfers))
                ) && 
                (
                    this.TxnRelationshipLogs == input.TxnRelationshipLogs ||
                    (this.TxnRelationshipLogs != null &&
                    this.TxnRelationshipLogs.Equals(input.TxnRelationshipLogs))
                ) && 
                (
                    this.UserAttributeLogs == input.UserAttributeLogs ||
                    (this.UserAttributeLogs != null &&
                    this.UserAttributeLogs.Equals(input.UserAttributeLogs))
                ) && 
                (
                    this.UserMatchers == input.UserMatchers ||
                    (this.UserMatchers != null &&
                    this.UserMatchers.Equals(input.UserMatchers))
                ) && 
                (
                    this.WalletTxns == input.WalletTxns ||
                    (this.WalletTxns != null &&
                    this.WalletTxns.Equals(input.WalletTxns))
                ) && 
                (
                    this.Walletables == input.Walletables ||
                    (this.Walletables != null &&
                    this.Walletables.Equals(input.Walletables))
                ) && 
                (
                    this.Workflows == input.Workflows ||
                    (this.Workflows != null &&
                    this.Workflows.Equals(input.Workflows))
                ) && 
                (
                    this.YearEnd == input.YearEnd ||
                    (this.YearEnd != null &&
                    this.YearEnd.Equals(input.YearEnd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.AccessControls != null)
                {
                    hashCode = (hashCode * 59) + this.AccessControls.GetHashCode();
                }
                if (this.AccountItemStatements != null)
                {
                    hashCode = (hashCode * 59) + this.AccountItemStatements.GetHashCode();
                }
                if (this.AccountItems != null)
                {
                    hashCode = (hashCode * 59) + this.AccountItems.GetHashCode();
                }
                if (this.AnnualReports != null)
                {
                    hashCode = (hashCode * 59) + this.AnnualReports.GetHashCode();
                }
                if (this.AppRoleLogs != null)
                {
                    hashCode = (hashCode * 59) + this.AppRoleLogs.GetHashCode();
                }
                if (this.ApprovalFlowRoutes != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalFlowRoutes.GetHashCode();
                }
                if (this.ApprovalRequests != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalRequests.GetHashCode();
                }
                if (this.Backups != null)
                {
                    hashCode = (hashCode * 59) + this.Backups.GetHashCode();
                }
                if (this.BankAccountantStaffUsers != null)
                {
                    hashCode = (hashCode * 59) + this.BankAccountantStaffUsers.GetHashCode();
                }
                if (this.BizAllocations != null)
                {
                    hashCode = (hashCode * 59) + this.BizAllocations.GetHashCode();
                }
                if (this.Companies != null)
                {
                    hashCode = (hashCode * 59) + this.Companies.GetHashCode();
                }
                if (this.CompanyInternalAnnouncements != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyInternalAnnouncements.GetHashCode();
                }
                if (this.ConsumptionEntries != null)
                {
                    hashCode = (hashCode * 59) + this.ConsumptionEntries.GetHashCode();
                }
                if (this.CostAllocations != null)
                {
                    hashCode = (hashCode * 59) + this.CostAllocations.GetHashCode();
                }
                if (this.DealTemplates != null)
                {
                    hashCode = (hashCode * 59) + this.DealTemplates.GetHashCode();
                }
                if (this.Deals != null)
                {
                    hashCode = (hashCode * 59) + this.Deals.GetHashCode();
                }
                if (this.DocChangeLogs != null)
                {
                    hashCode = (hashCode * 59) + this.DocChangeLogs.GetHashCode();
                }
                if (this.DocPostings != null)
                {
                    hashCode = (hashCode * 59) + this.DocPostings.GetHashCode();
                }
                if (this.Docs != null)
                {
                    hashCode = (hashCode * 59) + this.Docs.GetHashCode();
                }
                if (this.ExpenseApplicationSyncPayroll != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseApplicationSyncPayroll.GetHashCode();
                }
                if (this.ExpenseApplicationTemplates != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseApplicationTemplates.GetHashCode();
                }
                if (this.ExpenseApplications != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseApplications.GetHashCode();
                }
                if (this.FixedAssets != null)
                {
                    hashCode = (hashCode * 59) + this.FixedAssets.GetHashCode();
                }
                if (this.InventoryRefreshes != null)
                {
                    hashCode = (hashCode * 59) + this.InventoryRefreshes.GetHashCode();
                }
                if (this.Invitations != null)
                {
                    hashCode = (hashCode * 59) + this.Invitations.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                if (this.ManualJournalTemplates != null)
                {
                    hashCode = (hashCode * 59) + this.ManualJournalTemplates.GetHashCode();
                }
                if (this.ManualJournals != null)
                {
                    hashCode = (hashCode * 59) + this.ManualJournals.GetHashCode();
                }
                if (this.MonthEnd != null)
                {
                    hashCode = (hashCode * 59) + this.MonthEnd.GetHashCode();
                }
                if (this.OauthApplications != null)
                {
                    hashCode = (hashCode * 59) + this.OauthApplications.GetHashCode();
                }
                if (this.OauthAuthorizations != null)
                {
                    hashCode = (hashCode * 59) + this.OauthAuthorizations.GetHashCode();
                }
                if (this.OpeningBalances != null)
                {
                    hashCode = (hashCode * 59) + this.OpeningBalances.GetHashCode();
                }
                if (this.Partners != null)
                {
                    hashCode = (hashCode * 59) + this.Partners.GetHashCode();
                }
                if (this.PaymentRecords != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentRecords.GetHashCode();
                }
                if (this.PaymentRequests != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentRequests.GetHashCode();
                }
                if (this.PayrollItemSets != null)
                {
                    hashCode = (hashCode * 59) + this.PayrollItemSets.GetHashCode();
                }
                if (this.ReceiptStreamEditor != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptStreamEditor.GetHashCode();
                }
                if (this.Receipts != null)
                {
                    hashCode = (hashCode * 59) + this.Receipts.GetHashCode();
                }
                if (this.Reports != null)
                {
                    hashCode = (hashCode * 59) + this.Reports.GetHashCode();
                }
                if (this.ReportsBs != null)
                {
                    hashCode = (hashCode * 59) + this.ReportsBs.GetHashCode();
                }
                if (this.ReportsCashBalance != null)
                {
                    hashCode = (hashCode * 59) + this.ReportsCashBalance.GetHashCode();
                }
                if (this.ReportsCrosstabs != null)
                {
                    hashCode = (hashCode * 59) + this.ReportsCrosstabs.GetHashCode();
                }
                if (this.ReportsCustomReportsAggregate != null)
                {
                    hashCode = (hashCode * 59) + this.ReportsCustomReportsAggregate.GetHashCode();
                }
                if (this.ReportsGeneralLedgers != null)
                {
                    hashCode = (hashCode * 59) + this.ReportsGeneralLedgers.GetHashCode();
                }
                if (this.ReportsIncomeExpense != null)
                {
                    hashCode = (hashCode * 59) + this.ReportsIncomeExpense.GetHashCode();
                }
                if (this.ReportsJournals != null)
                {
                    hashCode = (hashCode * 59) + this.ReportsJournals.GetHashCode();
                }
                if (this.ReportsManagementsNavigation != null)
                {
                    hashCode = (hashCode * 59) + this.ReportsManagementsNavigation.GetHashCode();
                }
                if (this.ReportsManagementsPlanning != null)
                {
                    hashCode = (hashCode * 59) + this.ReportsManagementsPlanning.GetHashCode();
                }
                if (this.ReportsPayables != null)
                {
                    hashCode = (hashCode * 59) + this.ReportsPayables.GetHashCode();
                }
                if (this.ReportsPl != null)
                {
                    hashCode = (hashCode * 59) + this.ReportsPl.GetHashCode();
                }
                if (this.ReportsReceivables != null)
                {
                    hashCode = (hashCode * 59) + this.ReportsReceivables.GetHashCode();
                }
                if (this.RequestForms != null)
                {
                    hashCode = (hashCode * 59) + this.RequestForms.GetHashCode();
                }
                if (this.Resets != null)
                {
                    hashCode = (hashCode * 59) + this.Resets.GetHashCode();
                }
                if (this.Sections != null)
                {
                    hashCode = (hashCode * 59) + this.Sections.GetHashCode();
                }
                if (this.SignInLogs != null)
                {
                    hashCode = (hashCode * 59) + this.SignInLogs.GetHashCode();
                }
                if (this.Spreadsheets != null)
                {
                    hashCode = (hashCode * 59) + this.Spreadsheets.GetHashCode();
                }
                if (this.SystemConversion != null)
                {
                    hashCode = (hashCode * 59) + this.SystemConversion.GetHashCode();
                }
                if (this.SystemMessagesForAdmin != null)
                {
                    hashCode = (hashCode * 59) + this.SystemMessagesForAdmin.GetHashCode();
                }
                if (this.TaxReports != null)
                {
                    hashCode = (hashCode * 59) + this.TaxReports.GetHashCode();
                }
                if (this.TaxReturn != null)
                {
                    hashCode = (hashCode * 59) + this.TaxReturn.GetHashCode();
                }
                if (this.Taxes != null)
                {
                    hashCode = (hashCode * 59) + this.Taxes.GetHashCode();
                }
                if (this.Transfers != null)
                {
                    hashCode = (hashCode * 59) + this.Transfers.GetHashCode();
                }
                if (this.TxnRelationshipLogs != null)
                {
                    hashCode = (hashCode * 59) + this.TxnRelationshipLogs.GetHashCode();
                }
                if (this.UserAttributeLogs != null)
                {
                    hashCode = (hashCode * 59) + this.UserAttributeLogs.GetHashCode();
                }
                if (this.UserMatchers != null)
                {
                    hashCode = (hashCode * 59) + this.UserMatchers.GetHashCode();
                }
                if (this.WalletTxns != null)
                {
                    hashCode = (hashCode * 59) + this.WalletTxns.GetHashCode();
                }
                if (this.Walletables != null)
                {
                    hashCode = (hashCode * 59) + this.Walletables.GetHashCode();
                }
                if (this.Workflows != null)
                {
                    hashCode = (hashCode * 59) + this.Workflows.GetHashCode();
                }
                if (this.YearEnd != null)
                {
                    hashCode = (hashCode * 59) + this.YearEnd.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
