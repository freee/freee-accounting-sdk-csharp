/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// JournalsResponseJournalsUpToDateReasons
    /// </summary>
    [DataContract(Name = "journalsResponse_journals_up_to_date_reasons")]
    public partial class JournalsResponseJournalsUpToDateReasons : IEquatable<JournalsResponseJournalsUpToDateReasons>
    {
        /// <summary>
        /// コード
        /// </summary>
        /// <value>コード</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            /// <summary>
            /// Enum Creating for value: depreciation_creating
            /// </summary>
            [EnumMember(Value = "depreciation_creating")]
            Creating = 1,

            /// <summary>
            /// Enum CreateError for value: depreciation_create_error
            /// </summary>
            [EnumMember(Value = "depreciation_create_error")]
            CreateError = 2

        }


        /// <summary>
        /// コード
        /// </summary>
        /// <value>コード</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = false)]
        public CodeEnum Code { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JournalsResponseJournalsUpToDateReasons" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JournalsResponseJournalsUpToDateReasons() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JournalsResponseJournalsUpToDateReasons" /> class.
        /// </summary>
        /// <param name="code">コード (required).</param>
        /// <param name="message">集計が最新でない理由 (required).</param>
        public JournalsResponseJournalsUpToDateReasons(CodeEnum code = default(CodeEnum), string message = default(string))
        {
            this.Code = code;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for JournalsResponseJournalsUpToDateReasons and cannot be null");
            }
            this.Message = message;
        }

        /// <summary>
        /// 集計が最新でない理由
        /// </summary>
        /// <value>集計が最新でない理由</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JournalsResponseJournalsUpToDateReasons {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JournalsResponseJournalsUpToDateReasons);
        }

        /// <summary>
        /// Returns true if JournalsResponseJournalsUpToDateReasons instances are equal
        /// </summary>
        /// <param name="input">Instance of JournalsResponseJournalsUpToDateReasons to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JournalsResponseJournalsUpToDateReasons input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    this.Code.Equals(input.Code)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Code.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
