/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// DealCreateResponseDeal
    /// </summary>
    [DataContract(Name = "dealCreateResponse_deal")]
    public partial class DealCreateResponseDeal : IEquatable<DealCreateResponseDeal>
    {
        /// <summary>
        /// 決済状況 (未決済: unsettled, 完了: settled)
        /// </summary>
        /// <value>決済状況 (未決済: unsettled, 完了: settled)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Unsettled for value: unsettled
            /// </summary>
            [EnumMember(Value = "unsettled")]
            Unsettled = 1,

            /// <summary>
            /// Enum Settled for value: settled
            /// </summary>
            [EnumMember(Value = "settled")]
            Settled = 2

        }


        /// <summary>
        /// 決済状況 (未決済: unsettled, 完了: settled)
        /// </summary>
        /// <value>決済状況 (未決済: unsettled, 完了: settled)</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// 収支区分 (収入: income, 支出: expense)
        /// </summary>
        /// <value>収支区分 (収入: income, 支出: expense)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Income for value: income
            /// </summary>
            [EnumMember(Value = "income")]
            Income = 1,

            /// <summary>
            /// Enum Expense for value: expense
            /// </summary>
            [EnumMember(Value = "expense")]
            Expense = 2

        }


        /// <summary>
        /// 収支区分 (収入: income, 支出: expense)
        /// </summary>
        /// <value>収支区分 (収入: income, 支出: expense)</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DealCreateResponseDeal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DealCreateResponseDeal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DealCreateResponseDeal" /> class.
        /// </summary>
        /// <param name="amount">金額 (required).</param>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="details">取引の明細行.</param>
        /// <param name="dueAmount">支払残額.</param>
        /// <param name="dueDate">支払期日 (yyyy-mm-dd).</param>
        /// <param name="id">取引ID (required).</param>
        /// <param name="issueDate">発生日 (yyyy-mm-dd) (required).</param>
        /// <param name="partnerCode">取引先コード.</param>
        /// <param name="partnerId">取引先ID (required).</param>
        /// <param name="payments">取引の支払行.</param>
        /// <param name="refNumber">管理番号.</param>
        /// <param name="status">決済状況 (未決済: unsettled, 完了: settled) (required).</param>
        /// <param name="type">収支区分 (収入: income, 支出: expense).</param>
        public DealCreateResponseDeal(long amount = default(long), int companyId = default(int), List<DealDetails> details = default(List<DealDetails>), int dueAmount = default(int), string dueDate = default(string), int id = default(int), string issueDate = default(string), string partnerCode = default(string), int partnerId = default(int), List<DealPayments> payments = default(List<DealPayments>), string refNumber = default(string), StatusEnum status = default(StatusEnum), TypeEnum? type = default(TypeEnum?))
        {
            this.Amount = amount;
            this.CompanyId = companyId;
            this.Id = id;
            // to ensure "issueDate" is required (not null)
            if (issueDate == null) {
                throw new ArgumentNullException("issueDate is a required property for DealCreateResponseDeal and cannot be null");
            }
            this.IssueDate = issueDate;
            this.PartnerId = partnerId;
            this.Status = status;
            this.Details = details;
            this.DueAmount = dueAmount;
            this.DueDate = dueDate;
            this.PartnerCode = partnerCode;
            this.Payments = payments;
            this.RefNumber = refNumber;
            this.Type = type;
        }

        /// <summary>
        /// 金額
        /// </summary>
        /// <value>金額</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public long Amount { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// 取引の明細行
        /// </summary>
        /// <value>取引の明細行</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public List<DealDetails> Details { get; set; }

        /// <summary>
        /// 支払残額
        /// </summary>
        /// <value>支払残額</value>
        [DataMember(Name = "due_amount", EmitDefaultValue = false)]
        public int DueAmount { get; set; }

        /// <summary>
        /// 支払期日 (yyyy-mm-dd)
        /// </summary>
        /// <value>支払期日 (yyyy-mm-dd)</value>
        [DataMember(Name = "due_date", EmitDefaultValue = false)]
        public string DueDate { get; set; }

        /// <summary>
        /// 取引ID
        /// </summary>
        /// <value>取引ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// 発生日 (yyyy-mm-dd)
        /// </summary>
        /// <value>発生日 (yyyy-mm-dd)</value>
        [DataMember(Name = "issue_date", IsRequired = true, EmitDefaultValue = false)]
        public string IssueDate { get; set; }

        /// <summary>
        /// 取引先コード
        /// </summary>
        /// <value>取引先コード</value>
        [DataMember(Name = "partner_code", EmitDefaultValue = true)]
        public string PartnerCode { get; set; }

        /// <summary>
        /// 取引先ID
        /// </summary>
        /// <value>取引先ID</value>
        [DataMember(Name = "partner_id", IsRequired = true, EmitDefaultValue = false)]
        public int PartnerId { get; set; }

        /// <summary>
        /// 取引の支払行
        /// </summary>
        /// <value>取引の支払行</value>
        [DataMember(Name = "payments", EmitDefaultValue = false)]
        public List<DealPayments> Payments { get; set; }

        /// <summary>
        /// 管理番号
        /// </summary>
        /// <value>管理番号</value>
        [DataMember(Name = "ref_number", EmitDefaultValue = false)]
        public string RefNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DealCreateResponseDeal {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  DueAmount: ").Append(DueAmount).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  PartnerCode: ").Append(PartnerCode).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  RefNumber: ").Append(RefNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DealCreateResponseDeal);
        }

        /// <summary>
        /// Returns true if DealCreateResponseDeal instances are equal
        /// </summary>
        /// <param name="input">Instance of DealCreateResponseDeal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DealCreateResponseDeal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    input.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && 
                (
                    this.DueAmount == input.DueAmount ||
                    this.DueAmount.Equals(input.DueAmount)
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.PartnerCode == input.PartnerCode ||
                    (this.PartnerCode != null &&
                    this.PartnerCode.Equals(input.PartnerCode))
                ) && 
                (
                    this.PartnerId == input.PartnerId ||
                    this.PartnerId.Equals(input.PartnerId)
                ) && 
                (
                    this.Payments == input.Payments ||
                    this.Payments != null &&
                    input.Payments != null &&
                    this.Payments.SequenceEqual(input.Payments)
                ) && 
                (
                    this.RefNumber == input.RefNumber ||
                    (this.RefNumber != null &&
                    this.RefNumber.Equals(input.RefNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.Details != null)
                {
                    hashCode = (hashCode * 59) + this.Details.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DueAmount.GetHashCode();
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.IssueDate != null)
                {
                    hashCode = (hashCode * 59) + this.IssueDate.GetHashCode();
                }
                if (this.PartnerCode != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PartnerId.GetHashCode();
                if (this.Payments != null)
                {
                    hashCode = (hashCode * 59) + this.Payments.GetHashCode();
                }
                if (this.RefNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RefNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

    }

}
