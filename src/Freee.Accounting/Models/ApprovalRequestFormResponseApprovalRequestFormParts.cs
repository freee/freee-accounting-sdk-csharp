/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// ApprovalRequestFormResponseApprovalRequestFormParts
    /// </summary>
    [DataContract(Name = "approvalRequestFormResponse_approval_request_form_parts")]
    public partial class ApprovalRequestFormResponseApprovalRequestFormParts : IEquatable<ApprovalRequestFormResponseApprovalRequestFormParts>
    {
        /// <summary>
        /// 項目種別 (title: 申請タイトル, single_line: 自由記述形式 1行, multi_line: 自由記述形式 複数行, select: プルダウン, date: 日付, amount: 金額, receipt: 添付ファイル, section: 部門ID, partner: 取引先ID, ninja_sign_document: 契約書（freeeサイン連携）)
        /// </summary>
        /// <value>項目種別 (title: 申請タイトル, single_line: 自由記述形式 1行, multi_line: 自由記述形式 複数行, select: プルダウン, date: 日付, amount: 金額, receipt: 添付ファイル, section: 部門ID, partner: 取引先ID, ninja_sign_document: 契約書（freeeサイン連携）)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Title for value: title
            /// </summary>
            [EnumMember(Value = "title")]
            Title = 1,

            /// <summary>
            /// Enum SingleLine for value: single_line
            /// </summary>
            [EnumMember(Value = "single_line")]
            SingleLine = 2,

            /// <summary>
            /// Enum MultiLine for value: multi_line
            /// </summary>
            [EnumMember(Value = "multi_line")]
            MultiLine = 3,

            /// <summary>
            /// Enum Select for value: select
            /// </summary>
            [EnumMember(Value = "select")]
            Select = 4,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 5,

            /// <summary>
            /// Enum Amount for value: amount
            /// </summary>
            [EnumMember(Value = "amount")]
            Amount = 6,

            /// <summary>
            /// Enum Receipt for value: receipt
            /// </summary>
            [EnumMember(Value = "receipt")]
            Receipt = 7,

            /// <summary>
            /// Enum Section for value: section
            /// </summary>
            [EnumMember(Value = "section")]
            Section = 8,

            /// <summary>
            /// Enum Partner for value: partner
            /// </summary>
            [EnumMember(Value = "partner")]
            Partner = 9,

            /// <summary>
            /// Enum NinjaSignDocument for value: ninja_sign_document
            /// </summary>
            [EnumMember(Value = "ninja_sign_document")]
            NinjaSignDocument = 10

        }


        /// <summary>
        /// 項目種別 (title: 申請タイトル, single_line: 自由記述形式 1行, multi_line: 自由記述形式 複数行, select: プルダウン, date: 日付, amount: 金額, receipt: 添付ファイル, section: 部門ID, partner: 取引先ID, ninja_sign_document: 契約書（freeeサイン連携）)
        /// </summary>
        /// <value>項目種別 (title: 申請タイトル, single_line: 自由記述形式 1行, multi_line: 自由記述形式 複数行, select: プルダウン, date: 日付, amount: 金額, receipt: 添付ファイル, section: 部門ID, partner: 取引先ID, ninja_sign_document: 契約書（freeeサイン連携）)</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestFormResponseApprovalRequestFormParts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApprovalRequestFormResponseApprovalRequestFormParts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestFormResponseApprovalRequestFormParts" /> class.
        /// </summary>
        /// <param name="annotation">追加説明.</param>
        /// <param name="id">項目ID (required).</param>
        /// <param name="label">項目名.</param>
        /// <param name="maxAmount">上限金額.</param>
        /// <param name="minAmount">下限金額.</param>
        /// <param name="order">順序.</param>
        /// <param name="required">必須かどうか.</param>
        /// <param name="type">項目種別 (title: 申請タイトル, single_line: 自由記述形式 1行, multi_line: 自由記述形式 複数行, select: プルダウン, date: 日付, amount: 金額, receipt: 添付ファイル, section: 部門ID, partner: 取引先ID, ninja_sign_document: 契約書（freeeサイン連携）).</param>
        /// <param name="values">選択項目.</param>
        public ApprovalRequestFormResponseApprovalRequestFormParts(string annotation = default(string), int id = default(int), string label = default(string), int? maxAmount = default(int?), int? minAmount = default(int?), int order = default(int), bool? required = default(bool?), TypeEnum? type = default(TypeEnum?), List<ApprovalRequestFormResponseApprovalRequestFormValues> values = default(List<ApprovalRequestFormResponseApprovalRequestFormValues>))
        {
            this.Id = id;
            this.Annotation = annotation;
            this.Label = label;
            this.MaxAmount = maxAmount;
            this.MinAmount = minAmount;
            this.Order = order;
            this.Required = required;
            this.Type = type;
            this.Values = values;
        }

        /// <summary>
        /// 追加説明
        /// </summary>
        /// <value>追加説明</value>
        [DataMember(Name = "annotation", EmitDefaultValue = true)]
        public string Annotation { get; set; }

        /// <summary>
        /// 項目ID
        /// </summary>
        /// <value>項目ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// 項目名
        /// </summary>
        /// <value>項目名</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// 上限金額
        /// </summary>
        /// <value>上限金額</value>
        [DataMember(Name = "max_amount", EmitDefaultValue = true)]
        public int? MaxAmount { get; set; }

        /// <summary>
        /// 下限金額
        /// </summary>
        /// <value>下限金額</value>
        [DataMember(Name = "min_amount", EmitDefaultValue = true)]
        public int? MinAmount { get; set; }

        /// <summary>
        /// 順序
        /// </summary>
        /// <value>順序</value>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public int Order { get; set; }

        /// <summary>
        /// 必須かどうか
        /// </summary>
        /// <value>必須かどうか</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool? Required { get; set; }

        /// <summary>
        /// 選択項目
        /// </summary>
        /// <value>選択項目</value>
        [DataMember(Name = "values", EmitDefaultValue = true)]
        public List<ApprovalRequestFormResponseApprovalRequestFormValues> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApprovalRequestFormResponseApprovalRequestFormParts {\n");
            sb.Append("  Annotation: ").Append(Annotation).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  MaxAmount: ").Append(MaxAmount).Append("\n");
            sb.Append("  MinAmount: ").Append(MinAmount).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApprovalRequestFormResponseApprovalRequestFormParts);
        }

        /// <summary>
        /// Returns true if ApprovalRequestFormResponseApprovalRequestFormParts instances are equal
        /// </summary>
        /// <param name="input">Instance of ApprovalRequestFormResponseApprovalRequestFormParts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalRequestFormResponseApprovalRequestFormParts input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Annotation == input.Annotation ||
                    (this.Annotation != null &&
                    this.Annotation.Equals(input.Annotation))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.MaxAmount == input.MaxAmount ||
                    (this.MaxAmount != null &&
                    this.MaxAmount.Equals(input.MaxAmount))
                ) && 
                (
                    this.MinAmount == input.MinAmount ||
                    (this.MinAmount != null &&
                    this.MinAmount.Equals(input.MinAmount))
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Annotation != null)
                {
                    hashCode = (hashCode * 59) + this.Annotation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.MaxAmount != null)
                {
                    hashCode = (hashCode * 59) + this.MaxAmount.GetHashCode();
                }
                if (this.MinAmount != null)
                {
                    hashCode = (hashCode * 59) + this.MinAmount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                if (this.Required != null)
                {
                    hashCode = (hashCode * 59) + this.Required.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
