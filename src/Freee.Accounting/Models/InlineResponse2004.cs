/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// InlineResponse2004
    /// </summary>
    [DataContract(Name = "inline_response_200_4")]
    public partial class InlineResponse2004 : IEquatable<InlineResponse2004>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2004() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004" /> class.
        /// </summary>
        /// <param name="manualJournals">manualJournals (required).</param>
        public InlineResponse2004(List<ManualJournal> manualJournals = default(List<ManualJournal>))
        {
            // to ensure "manualJournals" is required (not null)
            if (manualJournals == null)
            {
                throw new ArgumentNullException("manualJournals is a required property for InlineResponse2004 and cannot be null");
            }
            this.ManualJournals = manualJournals;
        }

        /// <summary>
        /// Gets or Sets ManualJournals
        /// </summary>
        [DataMember(Name = "manual_journals", IsRequired = true, EmitDefaultValue = false)]
        public List<ManualJournal> ManualJournals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2004 {\n");
            sb.Append("  ManualJournals: ").Append(ManualJournals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004);
        }

        /// <summary>
        /// Returns true if InlineResponse2004 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ManualJournals == input.ManualJournals ||
                    this.ManualJournals != null &&
                    input.ManualJournals != null &&
                    this.ManualJournals.SequenceEqual(input.ManualJournals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ManualJournals != null)
                {
                    hashCode = (hashCode * 59) + this.ManualJournals.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
