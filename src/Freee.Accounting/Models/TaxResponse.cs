/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// TaxResponse
    /// </summary>
    [DataContract(Name = "taxResponse")]
    public partial class TaxResponse : IEquatable<TaxResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaxResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxResponse" /> class.
        /// </summary>
        /// <param name="tax">tax (required).</param>
        public TaxResponse(Tax tax = default(Tax))
        {
            // to ensure "tax" is required (not null)
            if (tax == null) {
                throw new ArgumentNullException("tax is a required property for TaxResponse and cannot be null");
            }
            this.Tax = tax;
        }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name = "tax", IsRequired = true, EmitDefaultValue = false)]
        public Tax Tax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaxResponse {\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxResponse);
        }

        /// <summary>
        /// Returns true if TaxResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tax != null)
                {
                    hashCode = (hashCode * 59) + this.Tax.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
