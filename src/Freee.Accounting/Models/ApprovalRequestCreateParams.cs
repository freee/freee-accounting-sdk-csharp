/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// ApprovalRequestCreateParams
    /// </summary>
    [DataContract(Name = "approvalRequestCreateParams")]
    public partial class ApprovalRequestCreateParams : IEquatable<ApprovalRequestCreateParams>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestCreateParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApprovalRequestCreateParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestCreateParams" /> class.
        /// </summary>
        /// <param name="applicationDate">申請日 (yyyy-mm-dd) (required).</param>
        /// <param name="approvalFlowRouteId">申請経路ID (required).</param>
        /// <param name="approverId">承認者のユーザーID.</param>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="draft">falseの時、in_progress:申請中で作成する。それ以外の時はdraft:下書きで作成する (required).</param>
        /// <param name="formId">申請フォームID (required).</param>
        /// <param name="parentId">親申請ID(既存各種申請IDのみ指定可能です。).</param>
        /// <param name="requestItems">requestItems (required).</param>
        public ApprovalRequestCreateParams(string applicationDate = default(string), int approvalFlowRouteId = default(int), int approverId = default(int), int companyId = default(int), bool draft = default(bool), int formId = default(int), int parentId = default(int), List<ApprovalRequestCreateParamsRequestItems> requestItems = default(List<ApprovalRequestCreateParamsRequestItems>))
        {
            // to ensure "applicationDate" is required (not null)
            if (applicationDate == null) {
                throw new ArgumentNullException("applicationDate is a required property for ApprovalRequestCreateParams and cannot be null");
            }
            this.ApplicationDate = applicationDate;
            this.ApprovalFlowRouteId = approvalFlowRouteId;
            this.CompanyId = companyId;
            this.Draft = draft;
            this.FormId = formId;
            // to ensure "requestItems" is required (not null)
            if (requestItems == null) {
                throw new ArgumentNullException("requestItems is a required property for ApprovalRequestCreateParams and cannot be null");
            }
            this.RequestItems = requestItems;
            this.ApproverId = approverId;
            this.ParentId = parentId;
        }

        /// <summary>
        /// 申請日 (yyyy-mm-dd)
        /// </summary>
        /// <value>申請日 (yyyy-mm-dd)</value>
        [DataMember(Name = "application_date", IsRequired = true, EmitDefaultValue = false)]
        public string ApplicationDate { get; set; }

        /// <summary>
        /// 申請経路ID
        /// </summary>
        /// <value>申請経路ID</value>
        [DataMember(Name = "approval_flow_route_id", IsRequired = true, EmitDefaultValue = false)]
        public int ApprovalFlowRouteId { get; set; }

        /// <summary>
        /// 承認者のユーザーID
        /// </summary>
        /// <value>承認者のユーザーID</value>
        [DataMember(Name = "approver_id", EmitDefaultValue = false)]
        public int ApproverId { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// falseの時、in_progress:申請中で作成する。それ以外の時はdraft:下書きで作成する
        /// </summary>
        /// <value>falseの時、in_progress:申請中で作成する。それ以外の時はdraft:下書きで作成する</value>
        [DataMember(Name = "draft", IsRequired = true, EmitDefaultValue = true)]
        public bool Draft { get; set; }

        /// <summary>
        /// 申請フォームID
        /// </summary>
        /// <value>申請フォームID</value>
        [DataMember(Name = "form_id", IsRequired = true, EmitDefaultValue = false)]
        public int FormId { get; set; }

        /// <summary>
        /// 親申請ID(既存各種申請IDのみ指定可能です。)
        /// </summary>
        /// <value>親申請ID(既存各種申請IDのみ指定可能です。)</value>
        [DataMember(Name = "parent_id", EmitDefaultValue = false)]
        public int ParentId { get; set; }

        /// <summary>
        /// Gets or Sets RequestItems
        /// </summary>
        [DataMember(Name = "request_items", IsRequired = true, EmitDefaultValue = false)]
        public List<ApprovalRequestCreateParamsRequestItems> RequestItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApprovalRequestCreateParams {\n");
            sb.Append("  ApplicationDate: ").Append(ApplicationDate).Append("\n");
            sb.Append("  ApprovalFlowRouteId: ").Append(ApprovalFlowRouteId).Append("\n");
            sb.Append("  ApproverId: ").Append(ApproverId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Draft: ").Append(Draft).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  RequestItems: ").Append(RequestItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApprovalRequestCreateParams);
        }

        /// <summary>
        /// Returns true if ApprovalRequestCreateParams instances are equal
        /// </summary>
        /// <param name="input">Instance of ApprovalRequestCreateParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalRequestCreateParams input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicationDate == input.ApplicationDate ||
                    (this.ApplicationDate != null &&
                    this.ApplicationDate.Equals(input.ApplicationDate))
                ) && 
                (
                    this.ApprovalFlowRouteId == input.ApprovalFlowRouteId ||
                    this.ApprovalFlowRouteId.Equals(input.ApprovalFlowRouteId)
                ) && 
                (
                    this.ApproverId == input.ApproverId ||
                    this.ApproverId.Equals(input.ApproverId)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.Draft == input.Draft ||
                    this.Draft.Equals(input.Draft)
                ) && 
                (
                    this.FormId == input.FormId ||
                    this.FormId.Equals(input.FormId)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    this.ParentId.Equals(input.ParentId)
                ) && 
                (
                    this.RequestItems == input.RequestItems ||
                    this.RequestItems != null &&
                    input.RequestItems != null &&
                    this.RequestItems.SequenceEqual(input.RequestItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationDate != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ApprovalFlowRouteId.GetHashCode();
                hashCode = (hashCode * 59) + this.ApproverId.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.Draft.GetHashCode();
                hashCode = (hashCode * 59) + this.FormId.GetHashCode();
                hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                if (this.RequestItems != null)
                {
                    hashCode = (hashCode * 59) + this.RequestItems.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
