/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// ApprovalRequestsIndexResponseApprovalRequests
    /// </summary>
    [DataContract(Name = "approvalRequestsIndexResponse_approval_requests")]
    public partial class ApprovalRequestsIndexResponseApprovalRequests : IEquatable<ApprovalRequestsIndexResponseApprovalRequests>
    {
        /// <summary>
        /// 取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:決済済み, unsettled:未決済)
        /// </summary>
        /// <value>取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:決済済み, unsettled:未決済)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DealStatusEnum
        {
            /// <summary>
            /// Enum Settled for value: settled
            /// </summary>
            [EnumMember(Value = "settled")]
            Settled = 1,

            /// <summary>
            /// Enum Unsettled for value: unsettled
            /// </summary>
            [EnumMember(Value = "unsettled")]
            Unsettled = 2

        }


        /// <summary>
        /// 取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:決済済み, unsettled:未決済)
        /// </summary>
        /// <value>取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:決済済み, unsettled:未決済)</value>
        [DataMember(Name = "deal_status", IsRequired = true, EmitDefaultValue = true)]
        public DealStatusEnum DealStatus { get; set; }
        /// <summary>
        /// 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)
        /// </summary>
        /// <value>申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            [EnumMember(Value = "draft")]
            Draft = 1,

            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgress = 2,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved = 3,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 4,

            /// <summary>
            /// Enum Feedback for value: feedback
            /// </summary>
            [EnumMember(Value = "feedback")]
            Feedback = 5

        }


        /// <summary>
        /// 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)
        /// </summary>
        /// <value>申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestsIndexResponseApprovalRequests" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApprovalRequestsIndexResponseApprovalRequests() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestsIndexResponseApprovalRequests" /> class.
        /// </summary>
        /// <param name="applicantId">申請者のユーザーID (required).</param>
        /// <param name="applicationDate">申請日 (yyyy-mm-dd) (required).</param>
        /// <param name="applicationNumber">申請No. (required).</param>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="currentRound">現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。 (required).</param>
        /// <param name="currentStepId">現在承認ステップID (required).</param>
        /// <param name="dealId">取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます) (required).</param>
        /// <param name="dealStatus">取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:決済済み, unsettled:未決済) (required).</param>
        /// <param name="formId">申請フォームID (required).</param>
        /// <param name="id">各種申請ID (required).</param>
        /// <param name="manualJournalId">振替伝票のID (申請ステータス:statusがapprovedで、関連する振替伝票が存在する時のみmanual_journal_idが表示されます)  &lt;a href&#x3D;\&quot;https://support.freee.co.jp/hc/ja/articles/115003827683-#5\&quot; target&#x3D;\&quot;_blank\&quot;&gt;承認された各種申請から支払依頼等を作成する&lt;/a&gt;  (required).</param>
        /// <param name="requestItems">各種申請の項目一覧（配列） (required).</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) (required).</param>
        /// <param name="title">申請タイトル (required).</param>
        public ApprovalRequestsIndexResponseApprovalRequests(int applicantId = default(int), string applicationDate = default(string), string applicationNumber = default(string), int companyId = default(int), int currentRound = default(int), int? currentStepId = default(int?), int? dealId = default(int?), DealStatusEnum dealStatus = default(DealStatusEnum), int formId = default(int), int id = default(int), int? manualJournalId = default(int?), List<ApprovalRequestResponseApprovalRequestRequestItems> requestItems = default(List<ApprovalRequestResponseApprovalRequestRequestItems>), StatusEnum status = default(StatusEnum), string title = default(string))
        {
            this.ApplicantId = applicantId;
            // to ensure "applicationDate" is required (not null)
            if (applicationDate == null)
            {
                throw new ArgumentNullException("applicationDate is a required property for ApprovalRequestsIndexResponseApprovalRequests and cannot be null");
            }
            this.ApplicationDate = applicationDate;
            // to ensure "applicationNumber" is required (not null)
            if (applicationNumber == null)
            {
                throw new ArgumentNullException("applicationNumber is a required property for ApprovalRequestsIndexResponseApprovalRequests and cannot be null");
            }
            this.ApplicationNumber = applicationNumber;
            this.CompanyId = companyId;
            this.CurrentRound = currentRound;
            // to ensure "currentStepId" is required (not null)
            if (currentStepId == null)
            {
                throw new ArgumentNullException("currentStepId is a required property for ApprovalRequestsIndexResponseApprovalRequests and cannot be null");
            }
            this.CurrentStepId = currentStepId;
            // to ensure "dealId" is required (not null)
            if (dealId == null)
            {
                throw new ArgumentNullException("dealId is a required property for ApprovalRequestsIndexResponseApprovalRequests and cannot be null");
            }
            this.DealId = dealId;
            this.DealStatus = dealStatus;
            this.FormId = formId;
            this.Id = id;
            // to ensure "manualJournalId" is required (not null)
            if (manualJournalId == null)
            {
                throw new ArgumentNullException("manualJournalId is a required property for ApprovalRequestsIndexResponseApprovalRequests and cannot be null");
            }
            this.ManualJournalId = manualJournalId;
            // to ensure "requestItems" is required (not null)
            if (requestItems == null)
            {
                throw new ArgumentNullException("requestItems is a required property for ApprovalRequestsIndexResponseApprovalRequests and cannot be null");
            }
            this.RequestItems = requestItems;
            this.Status = status;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for ApprovalRequestsIndexResponseApprovalRequests and cannot be null");
            }
            this.Title = title;
        }

        /// <summary>
        /// 申請者のユーザーID
        /// </summary>
        /// <value>申請者のユーザーID</value>
        [DataMember(Name = "applicant_id", IsRequired = true, EmitDefaultValue = false)]
        public int ApplicantId { get; set; }

        /// <summary>
        /// 申請日 (yyyy-mm-dd)
        /// </summary>
        /// <value>申請日 (yyyy-mm-dd)</value>
        [DataMember(Name = "application_date", IsRequired = true, EmitDefaultValue = false)]
        public string ApplicationDate { get; set; }

        /// <summary>
        /// 申請No.
        /// </summary>
        /// <value>申請No.</value>
        [DataMember(Name = "application_number", IsRequired = true, EmitDefaultValue = false)]
        public string ApplicationNumber { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// 現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。
        /// </summary>
        /// <value>現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。</value>
        [DataMember(Name = "current_round", IsRequired = true, EmitDefaultValue = false)]
        public int CurrentRound { get; set; }

        /// <summary>
        /// 現在承認ステップID
        /// </summary>
        /// <value>現在承認ステップID</value>
        [DataMember(Name = "current_step_id", IsRequired = true, EmitDefaultValue = true)]
        public int? CurrentStepId { get; set; }

        /// <summary>
        /// 取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます)
        /// </summary>
        /// <value>取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます)</value>
        [DataMember(Name = "deal_id", IsRequired = true, EmitDefaultValue = true)]
        public int? DealId { get; set; }

        /// <summary>
        /// 申請フォームID
        /// </summary>
        /// <value>申請フォームID</value>
        [DataMember(Name = "form_id", IsRequired = true, EmitDefaultValue = false)]
        public int FormId { get; set; }

        /// <summary>
        /// 各種申請ID
        /// </summary>
        /// <value>各種申請ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// 振替伝票のID (申請ステータス:statusがapprovedで、関連する振替伝票が存在する時のみmanual_journal_idが表示されます)  &lt;a href&#x3D;\&quot;https://support.freee.co.jp/hc/ja/articles/115003827683-#5\&quot; target&#x3D;\&quot;_blank\&quot;&gt;承認された各種申請から支払依頼等を作成する&lt;/a&gt; 
        /// </summary>
        /// <value>振替伝票のID (申請ステータス:statusがapprovedで、関連する振替伝票が存在する時のみmanual_journal_idが表示されます)  &lt;a href&#x3D;\&quot;https://support.freee.co.jp/hc/ja/articles/115003827683-#5\&quot; target&#x3D;\&quot;_blank\&quot;&gt;承認された各種申請から支払依頼等を作成する&lt;/a&gt; </value>
        [DataMember(Name = "manual_journal_id", IsRequired = true, EmitDefaultValue = true)]
        public int? ManualJournalId { get; set; }

        /// <summary>
        /// 各種申請の項目一覧（配列）
        /// </summary>
        /// <value>各種申請の項目一覧（配列）</value>
        [DataMember(Name = "request_items", IsRequired = true, EmitDefaultValue = false)]
        public List<ApprovalRequestResponseApprovalRequestRequestItems> RequestItems { get; set; }

        /// <summary>
        /// 申請タイトル
        /// </summary>
        /// <value>申請タイトル</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApprovalRequestsIndexResponseApprovalRequests {\n");
            sb.Append("  ApplicantId: ").Append(ApplicantId).Append("\n");
            sb.Append("  ApplicationDate: ").Append(ApplicationDate).Append("\n");
            sb.Append("  ApplicationNumber: ").Append(ApplicationNumber).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CurrentRound: ").Append(CurrentRound).Append("\n");
            sb.Append("  CurrentStepId: ").Append(CurrentStepId).Append("\n");
            sb.Append("  DealId: ").Append(DealId).Append("\n");
            sb.Append("  DealStatus: ").Append(DealStatus).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ManualJournalId: ").Append(ManualJournalId).Append("\n");
            sb.Append("  RequestItems: ").Append(RequestItems).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApprovalRequestsIndexResponseApprovalRequests);
        }

        /// <summary>
        /// Returns true if ApprovalRequestsIndexResponseApprovalRequests instances are equal
        /// </summary>
        /// <param name="input">Instance of ApprovalRequestsIndexResponseApprovalRequests to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalRequestsIndexResponseApprovalRequests input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicantId == input.ApplicantId ||
                    this.ApplicantId.Equals(input.ApplicantId)
                ) && 
                (
                    this.ApplicationDate == input.ApplicationDate ||
                    (this.ApplicationDate != null &&
                    this.ApplicationDate.Equals(input.ApplicationDate))
                ) && 
                (
                    this.ApplicationNumber == input.ApplicationNumber ||
                    (this.ApplicationNumber != null &&
                    this.ApplicationNumber.Equals(input.ApplicationNumber))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.CurrentRound == input.CurrentRound ||
                    this.CurrentRound.Equals(input.CurrentRound)
                ) && 
                (
                    this.CurrentStepId == input.CurrentStepId ||
                    (this.CurrentStepId != null &&
                    this.CurrentStepId.Equals(input.CurrentStepId))
                ) && 
                (
                    this.DealId == input.DealId ||
                    (this.DealId != null &&
                    this.DealId.Equals(input.DealId))
                ) && 
                (
                    this.DealStatus == input.DealStatus ||
                    this.DealStatus.Equals(input.DealStatus)
                ) && 
                (
                    this.FormId == input.FormId ||
                    this.FormId.Equals(input.FormId)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ManualJournalId == input.ManualJournalId ||
                    (this.ManualJournalId != null &&
                    this.ManualJournalId.Equals(input.ManualJournalId))
                ) && 
                (
                    this.RequestItems == input.RequestItems ||
                    this.RequestItems != null &&
                    input.RequestItems != null &&
                    this.RequestItems.SequenceEqual(input.RequestItems)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ApplicantId.GetHashCode();
                if (this.ApplicationDate != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationDate.GetHashCode();
                }
                if (this.ApplicationNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentRound.GetHashCode();
                if (this.CurrentStepId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentStepId.GetHashCode();
                }
                if (this.DealId != null)
                {
                    hashCode = (hashCode * 59) + this.DealId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DealStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.FormId.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.ManualJournalId != null)
                {
                    hashCode = (hashCode * 59) + this.ManualJournalId.GetHashCode();
                }
                if (this.RequestItems != null)
                {
                    hashCode = (hashCode * 59) + this.RequestItems.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
