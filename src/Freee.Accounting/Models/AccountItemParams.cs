/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// AccountItemParams
    /// </summary>
    [DataContract(Name = "accountItemParams")]
    public partial class AccountItemParams : IEquatable<AccountItemParams>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountItemParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountItemParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountItemParams" /> class.
        /// </summary>
        /// <param name="accountItem">accountItem (required).</param>
        /// <param name="companyId">事業所ID (required).</param>
        public AccountItemParams(AccountItemParamsAccountItem accountItem = default(AccountItemParamsAccountItem), int companyId = default(int))
        {
            // to ensure "accountItem" is required (not null)
            if (accountItem == null) {
                throw new ArgumentNullException("accountItem is a required property for AccountItemParams and cannot be null");
            }
            this.AccountItem = accountItem;
            this.CompanyId = companyId;
        }

        /// <summary>
        /// Gets or Sets AccountItem
        /// </summary>
        [DataMember(Name = "account_item", IsRequired = true, EmitDefaultValue = false)]
        public AccountItemParamsAccountItem AccountItem { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountItemParams {\n");
            sb.Append("  AccountItem: ").Append(AccountItem).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountItemParams);
        }

        /// <summary>
        /// Returns true if AccountItemParams instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountItemParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountItemParams input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountItem == input.AccountItem ||
                    (this.AccountItem != null &&
                    this.AccountItem.Equals(input.AccountItem))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountItem != null)
                {
                    hashCode = (hashCode * 59) + this.AccountItem.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                return hashCode;
            }
        }

    }

}
