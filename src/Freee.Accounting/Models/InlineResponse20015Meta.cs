/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// InlineResponse20015Meta
    /// </summary>
    [DataContract(Name = "inline_response_200_15_meta")]
    public partial class InlineResponse20015Meta : IEquatable<InlineResponse20015Meta>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20015Meta" /> class.
        /// </summary>
        /// <param name="upToDate">集計結果が最新かどうか.</param>
        public InlineResponse20015Meta(bool upToDate = default(bool))
        {
            this.UpToDate = upToDate;
        }

        /// <summary>
        /// 集計結果が最新かどうか
        /// </summary>
        /// <value>集計結果が最新かどうか</value>
        [DataMember(Name = "up_to_date", EmitDefaultValue = true)]
        public bool UpToDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20015Meta {\n");
            sb.Append("  UpToDate: ").Append(UpToDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20015Meta);
        }

        /// <summary>
        /// Returns true if InlineResponse20015Meta instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20015Meta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20015Meta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UpToDate == input.UpToDate ||
                    this.UpToDate.Equals(input.UpToDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UpToDate.GetHashCode();
                return hashCode;
            }
        }

    }

}
