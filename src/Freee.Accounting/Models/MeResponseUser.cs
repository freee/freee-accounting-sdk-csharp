/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// MeResponseUser
    /// </summary>
    [DataContract(Name = "meResponse_user")]
    public partial class MeResponseUser : IEquatable<MeResponseUser>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeResponseUser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MeResponseUser() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeResponseUser" /> class.
        /// </summary>
        /// <param name="companies">companies.</param>
        /// <param name="displayName">表示ユーザー名.</param>
        /// <param name="email">メールアドレス (required).</param>
        /// <param name="firstName">名.</param>
        /// <param name="firstNameKana">名（カナ）.</param>
        /// <param name="id">ユーザーID (required).</param>
        /// <param name="lastName">姓.</param>
        /// <param name="lastNameKana">姓（カナ）.</param>
        public MeResponseUser(List<MeResponseUserCompanies> companies = default(List<MeResponseUserCompanies>), string displayName = default(string), string email = default(string), string firstName = default(string), string firstNameKana = default(string), int id = default(int), string lastName = default(string), string lastNameKana = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null) {
                throw new ArgumentNullException("email is a required property for MeResponseUser and cannot be null");
            }
            this.Email = email;
            this.Id = id;
            this.Companies = companies;
            this.DisplayName = displayName;
            this.FirstName = firstName;
            this.FirstNameKana = firstNameKana;
            this.LastName = lastName;
            this.LastNameKana = lastNameKana;
        }

        /// <summary>
        /// Gets or Sets Companies
        /// </summary>
        [DataMember(Name = "companies", EmitDefaultValue = false)]
        public List<MeResponseUserCompanies> Companies { get; set; }

        /// <summary>
        /// 表示ユーザー名
        /// </summary>
        /// <value>表示ユーザー名</value>
        [DataMember(Name = "display_name", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// メールアドレス
        /// </summary>
        /// <value>メールアドレス</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// 名
        /// </summary>
        /// <value>名</value>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// 名（カナ）
        /// </summary>
        /// <value>名（カナ）</value>
        [DataMember(Name = "first_name_kana", EmitDefaultValue = true)]
        public string FirstNameKana { get; set; }

        /// <summary>
        /// ユーザーID
        /// </summary>
        /// <value>ユーザーID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// 姓
        /// </summary>
        /// <value>姓</value>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// 姓（カナ）
        /// </summary>
        /// <value>姓（カナ）</value>
        [DataMember(Name = "last_name_kana", EmitDefaultValue = true)]
        public string LastNameKana { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MeResponseUser {\n");
            sb.Append("  Companies: ").Append(Companies).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  FirstNameKana: ").Append(FirstNameKana).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LastNameKana: ").Append(LastNameKana).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeResponseUser);
        }

        /// <summary>
        /// Returns true if MeResponseUser instances are equal
        /// </summary>
        /// <param name="input">Instance of MeResponseUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeResponseUser input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Companies == input.Companies ||
                    this.Companies != null &&
                    input.Companies != null &&
                    this.Companies.SequenceEqual(input.Companies)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.FirstNameKana == input.FirstNameKana ||
                    (this.FirstNameKana != null &&
                    this.FirstNameKana.Equals(input.FirstNameKana))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.LastNameKana == input.LastNameKana ||
                    (this.LastNameKana != null &&
                    this.LastNameKana.Equals(input.LastNameKana))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Companies != null)
                {
                    hashCode = (hashCode * 59) + this.Companies.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.FirstNameKana != null)
                {
                    hashCode = (hashCode * 59) + this.FirstNameKana.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.LastNameKana != null)
                {
                    hashCode = (hashCode * 59) + this.LastNameKana.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
