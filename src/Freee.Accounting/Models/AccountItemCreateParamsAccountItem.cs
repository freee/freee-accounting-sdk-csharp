/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// AccountItemCreateParamsAccountItem
    /// </summary>
    [DataContract(Name = "accountItemCreateParams_account_item")]
    public partial class AccountItemCreateParamsAccountItem : IEquatable<AccountItemCreateParamsAccountItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountItemCreateParamsAccountItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountItemCreateParamsAccountItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountItemCreateParamsAccountItem" /> class.
        /// </summary>
        /// <param name="accountCategoryId">勘定科目カテゴリーID Selectablesフォーム用選択項目情報エンドポイント(account_groups.account_category_id)で取得可能です (required).</param>
        /// <param name="accumulatedDepAccountItemId">減価償却累計額勘定科目ID（法人のみ利用可能）.</param>
        /// <param name="correspondingExpenseId">支出取引相手勘定科目ID (required).</param>
        /// <param name="correspondingIncomeId">収入取引相手勘定科目ID (required).</param>
        /// <param name="groupName">決算書表示名（小カテゴリー） Selectablesフォーム用選択項目情報エンドポイント(account_groups.name)で取得可能です (required).</param>
        /// <param name="items">品目.</param>
        /// <param name="name">勘定科目名 (30文字以内) (required).</param>
        /// <param name="partners">取引先.</param>
        /// <param name="searchable">検索可能:2, 検索不可：3(登録時未指定の場合は2で登録されます。更新時未指定の場合はsearchableは変更されません。).</param>
        /// <param name="shortcut">ショートカット1 (20文字以内).</param>
        /// <param name="shortcutNum">ショートカット2(勘定科目コード)(20文字以内).</param>
        /// <param name="taxCode">税区分コード (required).</param>
        public AccountItemCreateParamsAccountItem(int accountCategoryId = default(int), int accumulatedDepAccountItemId = default(int), int correspondingExpenseId = default(int), int correspondingIncomeId = default(int), string groupName = default(string), List<AccountItemCreateParamsAccountItemItems> items = default(List<AccountItemCreateParamsAccountItemItems>), string name = default(string), List<AccountItemCreateParamsAccountItemItems> partners = default(List<AccountItemCreateParamsAccountItemItems>), int searchable = default(int), string shortcut = default(string), string shortcutNum = default(string), int taxCode = default(int))
        {
            this.AccountCategoryId = accountCategoryId;
            this.CorrespondingExpenseId = correspondingExpenseId;
            this.CorrespondingIncomeId = correspondingIncomeId;
            // to ensure "groupName" is required (not null)
            if (groupName == null) {
                throw new ArgumentNullException("groupName is a required property for AccountItemCreateParamsAccountItem and cannot be null");
            }
            this.GroupName = groupName;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for AccountItemCreateParamsAccountItem and cannot be null");
            }
            this.Name = name;
            this.TaxCode = taxCode;
            this.AccumulatedDepAccountItemId = accumulatedDepAccountItemId;
            this.Items = items;
            this.Partners = partners;
            this.Searchable = searchable;
            this.Shortcut = shortcut;
            this.ShortcutNum = shortcutNum;
        }

        /// <summary>
        /// 勘定科目カテゴリーID Selectablesフォーム用選択項目情報エンドポイント(account_groups.account_category_id)で取得可能です
        /// </summary>
        /// <value>勘定科目カテゴリーID Selectablesフォーム用選択項目情報エンドポイント(account_groups.account_category_id)で取得可能です</value>
        [DataMember(Name = "account_category_id", IsRequired = true, EmitDefaultValue = false)]
        public int AccountCategoryId { get; set; }

        /// <summary>
        /// 減価償却累計額勘定科目ID（法人のみ利用可能）
        /// </summary>
        /// <value>減価償却累計額勘定科目ID（法人のみ利用可能）</value>
        [DataMember(Name = "accumulated_dep_account_item_id", EmitDefaultValue = false)]
        public int AccumulatedDepAccountItemId { get; set; }

        /// <summary>
        /// 支出取引相手勘定科目ID
        /// </summary>
        /// <value>支出取引相手勘定科目ID</value>
        [DataMember(Name = "corresponding_expense_id", IsRequired = true, EmitDefaultValue = false)]
        public int CorrespondingExpenseId { get; set; }

        /// <summary>
        /// 収入取引相手勘定科目ID
        /// </summary>
        /// <value>収入取引相手勘定科目ID</value>
        [DataMember(Name = "corresponding_income_id", IsRequired = true, EmitDefaultValue = false)]
        public int CorrespondingIncomeId { get; set; }

        /// <summary>
        /// 決算書表示名（小カテゴリー） Selectablesフォーム用選択項目情報エンドポイント(account_groups.name)で取得可能です
        /// </summary>
        /// <value>決算書表示名（小カテゴリー） Selectablesフォーム用選択項目情報エンドポイント(account_groups.name)で取得可能です</value>
        [DataMember(Name = "group_name", IsRequired = true, EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// 品目
        /// </summary>
        /// <value>品目</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<AccountItemCreateParamsAccountItemItems> Items { get; set; }

        /// <summary>
        /// 勘定科目名 (30文字以内)
        /// </summary>
        /// <value>勘定科目名 (30文字以内)</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// 取引先
        /// </summary>
        /// <value>取引先</value>
        [DataMember(Name = "partners", EmitDefaultValue = false)]
        public List<AccountItemCreateParamsAccountItemItems> Partners { get; set; }

        /// <summary>
        /// 検索可能:2, 検索不可：3(登録時未指定の場合は2で登録されます。更新時未指定の場合はsearchableは変更されません。)
        /// </summary>
        /// <value>検索可能:2, 検索不可：3(登録時未指定の場合は2で登録されます。更新時未指定の場合はsearchableは変更されません。)</value>
        [DataMember(Name = "searchable", EmitDefaultValue = false)]
        public int Searchable { get; set; }

        /// <summary>
        /// ショートカット1 (20文字以内)
        /// </summary>
        /// <value>ショートカット1 (20文字以内)</value>
        [DataMember(Name = "shortcut", EmitDefaultValue = false)]
        public string Shortcut { get; set; }

        /// <summary>
        /// ショートカット2(勘定科目コード)(20文字以内)
        /// </summary>
        /// <value>ショートカット2(勘定科目コード)(20文字以内)</value>
        [DataMember(Name = "shortcut_num", EmitDefaultValue = false)]
        public string ShortcutNum { get; set; }

        /// <summary>
        /// 税区分コード
        /// </summary>
        /// <value>税区分コード</value>
        [DataMember(Name = "tax_code", IsRequired = true, EmitDefaultValue = false)]
        public int TaxCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountItemCreateParamsAccountItem {\n");
            sb.Append("  AccountCategoryId: ").Append(AccountCategoryId).Append("\n");
            sb.Append("  AccumulatedDepAccountItemId: ").Append(AccumulatedDepAccountItemId).Append("\n");
            sb.Append("  CorrespondingExpenseId: ").Append(CorrespondingExpenseId).Append("\n");
            sb.Append("  CorrespondingIncomeId: ").Append(CorrespondingIncomeId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Partners: ").Append(Partners).Append("\n");
            sb.Append("  Searchable: ").Append(Searchable).Append("\n");
            sb.Append("  Shortcut: ").Append(Shortcut).Append("\n");
            sb.Append("  ShortcutNum: ").Append(ShortcutNum).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountItemCreateParamsAccountItem);
        }

        /// <summary>
        /// Returns true if AccountItemCreateParamsAccountItem instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountItemCreateParamsAccountItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountItemCreateParamsAccountItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountCategoryId == input.AccountCategoryId ||
                    this.AccountCategoryId.Equals(input.AccountCategoryId)
                ) && 
                (
                    this.AccumulatedDepAccountItemId == input.AccumulatedDepAccountItemId ||
                    this.AccumulatedDepAccountItemId.Equals(input.AccumulatedDepAccountItemId)
                ) && 
                (
                    this.CorrespondingExpenseId == input.CorrespondingExpenseId ||
                    this.CorrespondingExpenseId.Equals(input.CorrespondingExpenseId)
                ) && 
                (
                    this.CorrespondingIncomeId == input.CorrespondingIncomeId ||
                    this.CorrespondingIncomeId.Equals(input.CorrespondingIncomeId)
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Partners == input.Partners ||
                    this.Partners != null &&
                    input.Partners != null &&
                    this.Partners.SequenceEqual(input.Partners)
                ) && 
                (
                    this.Searchable == input.Searchable ||
                    this.Searchable.Equals(input.Searchable)
                ) && 
                (
                    this.Shortcut == input.Shortcut ||
                    (this.Shortcut != null &&
                    this.Shortcut.Equals(input.Shortcut))
                ) && 
                (
                    this.ShortcutNum == input.ShortcutNum ||
                    (this.ShortcutNum != null &&
                    this.ShortcutNum.Equals(input.ShortcutNum))
                ) && 
                (
                    this.TaxCode == input.TaxCode ||
                    this.TaxCode.Equals(input.TaxCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccountCategoryId.GetHashCode();
                hashCode = (hashCode * 59) + this.AccumulatedDepAccountItemId.GetHashCode();
                hashCode = (hashCode * 59) + this.CorrespondingExpenseId.GetHashCode();
                hashCode = (hashCode * 59) + this.CorrespondingIncomeId.GetHashCode();
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Partners != null)
                {
                    hashCode = (hashCode * 59) + this.Partners.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Searchable.GetHashCode();
                if (this.Shortcut != null)
                {
                    hashCode = (hashCode * 59) + this.Shortcut.GetHashCode();
                }
                if (this.ShortcutNum != null)
                {
                    hashCode = (hashCode * 59) + this.ShortcutNum.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TaxCode.GetHashCode();
                return hashCode;
            }
        }

    }

}
