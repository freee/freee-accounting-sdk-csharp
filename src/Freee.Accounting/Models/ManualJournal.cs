/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// ManualJournal
    /// </summary>
    [DataContract(Name = "manual_journal")]
    public partial class ManualJournal : IEquatable<ManualJournal>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualJournal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ManualJournal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualJournal" /> class.
        /// </summary>
        /// <param name="adjustment">決算整理仕訳フラグ（falseまたは未指定の場合: 日常仕訳） (required).</param>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="details">貸借行一覧（配列）: 貸借合わせて100行まで登録できます。 (required).</param>
        /// <param name="id">振替伝票ID (required).</param>
        /// <param name="issueDate">発生日 (yyyy-mm-dd) (required).</param>
        /// <param name="txnNumber">仕訳番号 (required).</param>
        public ManualJournal(bool adjustment = default(bool), int companyId = default(int), List<ManualJournalDetails> details = default(List<ManualJournalDetails>), int id = default(int), string issueDate = default(string), string txnNumber = default(string))
        {
            this.Adjustment = adjustment;
            this.CompanyId = companyId;
            // to ensure "details" is required (not null)
            if (details == null) {
                throw new ArgumentNullException("details is a required property for ManualJournal and cannot be null");
            }
            this.Details = details;
            this.Id = id;
            // to ensure "issueDate" is required (not null)
            if (issueDate == null) {
                throw new ArgumentNullException("issueDate is a required property for ManualJournal and cannot be null");
            }
            this.IssueDate = issueDate;
            // to ensure "txnNumber" is required (not null)
            if (txnNumber == null) {
                throw new ArgumentNullException("txnNumber is a required property for ManualJournal and cannot be null");
            }
            this.TxnNumber = txnNumber;
        }

        /// <summary>
        /// 決算整理仕訳フラグ（falseまたは未指定の場合: 日常仕訳）
        /// </summary>
        /// <value>決算整理仕訳フラグ（falseまたは未指定の場合: 日常仕訳）</value>
        [DataMember(Name = "adjustment", IsRequired = true, EmitDefaultValue = true)]
        public bool Adjustment { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// 貸借行一覧（配列）: 貸借合わせて100行まで登録できます。
        /// </summary>
        /// <value>貸借行一覧（配列）: 貸借合わせて100行まで登録できます。</value>
        [DataMember(Name = "details", IsRequired = true, EmitDefaultValue = false)]
        public List<ManualJournalDetails> Details { get; set; }

        /// <summary>
        /// 振替伝票ID
        /// </summary>
        /// <value>振替伝票ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// 発生日 (yyyy-mm-dd)
        /// </summary>
        /// <value>発生日 (yyyy-mm-dd)</value>
        [DataMember(Name = "issue_date", IsRequired = true, EmitDefaultValue = false)]
        public string IssueDate { get; set; }

        /// <summary>
        /// 仕訳番号
        /// </summary>
        /// <value>仕訳番号</value>
        [DataMember(Name = "txn_number", IsRequired = true, EmitDefaultValue = true)]
        public string TxnNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManualJournal {\n");
            sb.Append("  Adjustment: ").Append(Adjustment).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  TxnNumber: ").Append(TxnNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManualJournal);
        }

        /// <summary>
        /// Returns true if ManualJournal instances are equal
        /// </summary>
        /// <param name="input">Instance of ManualJournal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManualJournal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Adjustment == input.Adjustment ||
                    this.Adjustment.Equals(input.Adjustment)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    input.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.TxnNumber == input.TxnNumber ||
                    (this.TxnNumber != null &&
                    this.TxnNumber.Equals(input.TxnNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Adjustment.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.Details != null)
                {
                    hashCode = (hashCode * 59) + this.Details.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.IssueDate != null)
                {
                    hashCode = (hashCode * 59) + this.IssueDate.GetHashCode();
                }
                if (this.TxnNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TxnNumber.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
