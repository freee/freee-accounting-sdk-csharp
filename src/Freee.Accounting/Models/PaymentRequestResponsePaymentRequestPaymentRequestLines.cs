/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// PaymentRequestResponsePaymentRequestPaymentRequestLines
    /// </summary>
    [DataContract(Name = "paymentRequestResponse_payment_request_payment_request_lines")]
    public partial class PaymentRequestResponsePaymentRequestPaymentRequestLines : IEquatable<PaymentRequestResponsePaymentRequestPaymentRequestLines>
    {
        /// <summary>
        /// 行の種類 (deal_line: 支払依頼, withholding_tax: 源泉徴収税)
        /// </summary>
        /// <value>行の種類 (deal_line: 支払依頼, withholding_tax: 源泉徴収税)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LineTypeEnum
        {
            /// <summary>
            /// Enum DealLine for value: deal_line
            /// </summary>
            [EnumMember(Value = "deal_line")]
            DealLine = 1,

            /// <summary>
            /// Enum WithholdingTax for value: withholding_tax
            /// </summary>
            [EnumMember(Value = "withholding_tax")]
            WithholdingTax = 2

        }


        /// <summary>
        /// 行の種類 (deal_line: 支払依頼, withholding_tax: 源泉徴収税)
        /// </summary>
        /// <value>行の種類 (deal_line: 支払依頼, withholding_tax: 源泉徴収税)</value>
        [DataMember(Name = "line_type", IsRequired = true, EmitDefaultValue = false)]
        public LineTypeEnum LineType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequestResponsePaymentRequestPaymentRequestLines" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentRequestResponsePaymentRequestPaymentRequestLines() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequestResponsePaymentRequestPaymentRequestLines" /> class.
        /// </summary>
        /// <param name="accountItemId">勘定科目ID (required).</param>
        /// <param name="amount">金額 (required).</param>
        /// <param name="description">内容 (required).</param>
        /// <param name="id">支払依頼の項目行ID (required).</param>
        /// <param name="itemId">品目ID (required).</param>
        /// <param name="lineType">行の種類 (deal_line: 支払依頼, withholding_tax: 源泉徴収税) (required).</param>
        /// <param name="sectionId">部門ID (required).</param>
        /// <param name="segment1TagId">セグメント１ID。セグメント１が使用可能なプランの時のみレスポンスに含まれます。.</param>
        /// <param name="segment2TagId">セグメント２ID。セグメント２が使用可能なプランの時のみレスポンスに含まれます。.</param>
        /// <param name="segment3TagId">セグメント３ID。セグメント３が使用可能なプランの時のみレスポンスに含まれます。.</param>
        /// <param name="tagIds">メモタグID (required).</param>
        /// <param name="taxCode">税区分コード (required).</param>
        public PaymentRequestResponsePaymentRequestPaymentRequestLines(int? accountItemId = default(int?), long amount = default(long), string description = default(string), long id = default(long), int? itemId = default(int?), LineTypeEnum lineType = default(LineTypeEnum), int? sectionId = default(int?), long? segment1TagId = default(long?), long? segment2TagId = default(long?), long? segment3TagId = default(long?), List<int> tagIds = default(List<int>), int? taxCode = default(int?))
        {
            // to ensure "accountItemId" is required (not null)
            if (accountItemId == null) {
                throw new ArgumentNullException("accountItemId is a required property for PaymentRequestResponsePaymentRequestPaymentRequestLines and cannot be null");
            }
            this.AccountItemId = accountItemId;
            this.Amount = amount;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for PaymentRequestResponsePaymentRequestPaymentRequestLines and cannot be null");
            }
            this.Description = description;
            this.Id = id;
            // to ensure "itemId" is required (not null)
            if (itemId == null) {
                throw new ArgumentNullException("itemId is a required property for PaymentRequestResponsePaymentRequestPaymentRequestLines and cannot be null");
            }
            this.ItemId = itemId;
            this.LineType = lineType;
            // to ensure "sectionId" is required (not null)
            if (sectionId == null) {
                throw new ArgumentNullException("sectionId is a required property for PaymentRequestResponsePaymentRequestPaymentRequestLines and cannot be null");
            }
            this.SectionId = sectionId;
            // to ensure "tagIds" is required (not null)
            if (tagIds == null) {
                throw new ArgumentNullException("tagIds is a required property for PaymentRequestResponsePaymentRequestPaymentRequestLines and cannot be null");
            }
            this.TagIds = tagIds;
            // to ensure "taxCode" is required (not null)
            if (taxCode == null) {
                throw new ArgumentNullException("taxCode is a required property for PaymentRequestResponsePaymentRequestPaymentRequestLines and cannot be null");
            }
            this.TaxCode = taxCode;
            this.Segment1TagId = segment1TagId;
            this.Segment2TagId = segment2TagId;
            this.Segment3TagId = segment3TagId;
        }

        /// <summary>
        /// 勘定科目ID
        /// </summary>
        /// <value>勘定科目ID</value>
        [DataMember(Name = "account_item_id", IsRequired = true, EmitDefaultValue = true)]
        public int? AccountItemId { get; set; }

        /// <summary>
        /// 金額
        /// </summary>
        /// <value>金額</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public long Amount { get; set; }

        /// <summary>
        /// 内容
        /// </summary>
        /// <value>内容</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// 支払依頼の項目行ID
        /// </summary>
        /// <value>支払依頼の項目行ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// 品目ID
        /// </summary>
        /// <value>品目ID</value>
        [DataMember(Name = "item_id", IsRequired = true, EmitDefaultValue = true)]
        public int? ItemId { get; set; }

        /// <summary>
        /// 部門ID
        /// </summary>
        /// <value>部門ID</value>
        [DataMember(Name = "section_id", IsRequired = true, EmitDefaultValue = true)]
        public int? SectionId { get; set; }

        /// <summary>
        /// セグメント１ID。セグメント１が使用可能なプランの時のみレスポンスに含まれます。
        /// </summary>
        /// <value>セグメント１ID。セグメント１が使用可能なプランの時のみレスポンスに含まれます。</value>
        [DataMember(Name = "segment_1_tag_id", EmitDefaultValue = true)]
        public long? Segment1TagId { get; set; }

        /// <summary>
        /// セグメント２ID。セグメント２が使用可能なプランの時のみレスポンスに含まれます。
        /// </summary>
        /// <value>セグメント２ID。セグメント２が使用可能なプランの時のみレスポンスに含まれます。</value>
        [DataMember(Name = "segment_2_tag_id", EmitDefaultValue = true)]
        public long? Segment2TagId { get; set; }

        /// <summary>
        /// セグメント３ID。セグメント３が使用可能なプランの時のみレスポンスに含まれます。
        /// </summary>
        /// <value>セグメント３ID。セグメント３が使用可能なプランの時のみレスポンスに含まれます。</value>
        [DataMember(Name = "segment_3_tag_id", EmitDefaultValue = true)]
        public long? Segment3TagId { get; set; }

        /// <summary>
        /// メモタグID
        /// </summary>
        /// <value>メモタグID</value>
        [DataMember(Name = "tag_ids", IsRequired = true, EmitDefaultValue = false)]
        public List<int> TagIds { get; set; }

        /// <summary>
        /// 税区分コード
        /// </summary>
        /// <value>税区分コード</value>
        [DataMember(Name = "tax_code", IsRequired = true, EmitDefaultValue = true)]
        public int? TaxCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentRequestResponsePaymentRequestPaymentRequestLines {\n");
            sb.Append("  AccountItemId: ").Append(AccountItemId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  LineType: ").Append(LineType).Append("\n");
            sb.Append("  SectionId: ").Append(SectionId).Append("\n");
            sb.Append("  Segment1TagId: ").Append(Segment1TagId).Append("\n");
            sb.Append("  Segment2TagId: ").Append(Segment2TagId).Append("\n");
            sb.Append("  Segment3TagId: ").Append(Segment3TagId).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRequestResponsePaymentRequestPaymentRequestLines);
        }

        /// <summary>
        /// Returns true if PaymentRequestResponsePaymentRequestPaymentRequestLines instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRequestResponsePaymentRequestPaymentRequestLines to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequestResponsePaymentRequestPaymentRequestLines input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountItemId == input.AccountItemId ||
                    (this.AccountItemId != null &&
                    this.AccountItemId.Equals(input.AccountItemId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.LineType == input.LineType ||
                    this.LineType.Equals(input.LineType)
                ) && 
                (
                    this.SectionId == input.SectionId ||
                    (this.SectionId != null &&
                    this.SectionId.Equals(input.SectionId))
                ) && 
                (
                    this.Segment1TagId == input.Segment1TagId ||
                    (this.Segment1TagId != null &&
                    this.Segment1TagId.Equals(input.Segment1TagId))
                ) && 
                (
                    this.Segment2TagId == input.Segment2TagId ||
                    (this.Segment2TagId != null &&
                    this.Segment2TagId.Equals(input.Segment2TagId))
                ) && 
                (
                    this.Segment3TagId == input.Segment3TagId ||
                    (this.Segment3TagId != null &&
                    this.Segment3TagId.Equals(input.Segment3TagId))
                ) && 
                (
                    this.TagIds == input.TagIds ||
                    this.TagIds != null &&
                    input.TagIds != null &&
                    this.TagIds.SequenceEqual(input.TagIds)
                ) && 
                (
                    this.TaxCode == input.TaxCode ||
                    (this.TaxCode != null &&
                    this.TaxCode.Equals(input.TaxCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountItemId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountItemId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.ItemId != null)
                {
                    hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LineType.GetHashCode();
                if (this.SectionId != null)
                {
                    hashCode = (hashCode * 59) + this.SectionId.GetHashCode();
                }
                if (this.Segment1TagId != null)
                {
                    hashCode = (hashCode * 59) + this.Segment1TagId.GetHashCode();
                }
                if (this.Segment2TagId != null)
                {
                    hashCode = (hashCode * 59) + this.Segment2TagId.GetHashCode();
                }
                if (this.Segment3TagId != null)
                {
                    hashCode = (hashCode * 59) + this.Segment3TagId.GetHashCode();
                }
                if (this.TagIds != null)
                {
                    hashCode = (hashCode * 59) + this.TagIds.GetHashCode();
                }
                if (this.TaxCode != null)
                {
                    hashCode = (hashCode * 59) + this.TaxCode.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
