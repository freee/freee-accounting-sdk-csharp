/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// MeResponseUserCompanies
    /// </summary>
    [DataContract(Name = "meResponse_user_companies")]
    public partial class MeResponseUserCompanies : IEquatable<MeResponseUserCompanies>
    {
        /// <summary>
        /// ユーザーの権限
        /// </summary>
        /// <value>ユーザーの権限</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            [EnumMember(Value = "admin")]
            Admin = 1,

            /// <summary>
            /// Enum SimpleAccounting for value: simple_accounting
            /// </summary>
            [EnumMember(Value = "simple_accounting")]
            SimpleAccounting = 2,

            /// <summary>
            /// Enum SelfOnly for value: self_only
            /// </summary>
            [EnumMember(Value = "self_only")]
            SelfOnly = 3,

            /// <summary>
            /// Enum ReadOnly for value: read_only
            /// </summary>
            [EnumMember(Value = "read_only")]
            ReadOnly = 4

        }


        /// <summary>
        /// ユーザーの権限
        /// </summary>
        /// <value>ユーザーの権限</value>
        [DataMember(Name = "role", IsRequired = true, EmitDefaultValue = false)]
        public RoleEnum Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeResponseUserCompanies" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MeResponseUserCompanies() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeResponseUserCompanies" /> class.
        /// </summary>
        /// <param name="advisorId">アドバイザープロファイルID（アドバイザー事業所で無い場合にnullになります）.</param>
        /// <param name="displayName">表示名 (required).</param>
        /// <param name="id">事業所ID (required).</param>
        /// <param name="role">ユーザーの権限 (required).</param>
        /// <param name="useCustomRole">カスタム権限（true: 使用する、false: 使用しない） (required).</param>
        public MeResponseUserCompanies(int? advisorId = default(int?), string displayName = default(string), int id = default(int), RoleEnum role = default(RoleEnum), bool useCustomRole = default(bool))
        {
            // to ensure "displayName" is required (not null)
            if (displayName == null) {
                throw new ArgumentNullException("displayName is a required property for MeResponseUserCompanies and cannot be null");
            }
            this.DisplayName = displayName;
            this.Id = id;
            this.Role = role;
            this.UseCustomRole = useCustomRole;
            this.AdvisorId = advisorId;
        }

        /// <summary>
        /// アドバイザープロファイルID（アドバイザー事業所で無い場合にnullになります）
        /// </summary>
        /// <value>アドバイザープロファイルID（アドバイザー事業所で無い場合にnullになります）</value>
        [DataMember(Name = "advisor_id", EmitDefaultValue = true)]
        public int? AdvisorId { get; set; }

        /// <summary>
        /// 表示名
        /// </summary>
        /// <value>表示名</value>
        [DataMember(Name = "display_name", IsRequired = true, EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// カスタム権限（true: 使用する、false: 使用しない）
        /// </summary>
        /// <value>カスタム権限（true: 使用する、false: 使用しない）</value>
        [DataMember(Name = "use_custom_role", IsRequired = true, EmitDefaultValue = true)]
        public bool UseCustomRole { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MeResponseUserCompanies {\n");
            sb.Append("  AdvisorId: ").Append(AdvisorId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  UseCustomRole: ").Append(UseCustomRole).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeResponseUserCompanies);
        }

        /// <summary>
        /// Returns true if MeResponseUserCompanies instances are equal
        /// </summary>
        /// <param name="input">Instance of MeResponseUserCompanies to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeResponseUserCompanies input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdvisorId == input.AdvisorId ||
                    (this.AdvisorId != null &&
                    this.AdvisorId.Equals(input.AdvisorId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Role == input.Role ||
                    this.Role.Equals(input.Role)
                ) && 
                (
                    this.UseCustomRole == input.UseCustomRole ||
                    this.UseCustomRole.Equals(input.UseCustomRole)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdvisorId != null)
                {
                    hashCode = (hashCode * 59) + this.AdvisorId.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Role.GetHashCode();
                hashCode = (hashCode * 59) + this.UseCustomRole.GetHashCode();
                return hashCode;
            }
        }

    }

}
