/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// ApprovalRequestResponseApprovalRequestApprovers
    /// </summary>
    [DataContract(Name = "approvalRequestResponse_approval_request_approvers")]
    public partial class ApprovalRequestResponseApprovalRequestApprovers : IEquatable<ApprovalRequestResponseApprovalRequestApprovers>
    {
        /// <summary>
        /// 承認ステップの承認方法 * &#x60; predefined_user&#x60; - メンバー指定 (1人), * &#x60; selected_user&#x60; - 申請時にメンバー指定 * &#x60; unspecified&#x60; - 指定なし * &#x60; and_resource&#x60; - メンバー指定 (複数、全員の承認), * &#x60; or_resource&#x60; - メンバー指定 (複数、1人の承認) * &#x60; and_position&#x60; - 役職指定 (複数、全員の承認) * &#x60; or_position&#x60; - 役職指定 (複数、1人の承認)
        /// </summary>
        /// <value>承認ステップの承認方法 * &#x60; predefined_user&#x60; - メンバー指定 (1人), * &#x60; selected_user&#x60; - 申請時にメンバー指定 * &#x60; unspecified&#x60; - 指定なし * &#x60; and_resource&#x60; - メンバー指定 (複数、全員の承認), * &#x60; or_resource&#x60; - メンバー指定 (複数、1人の承認) * &#x60; and_position&#x60; - 役職指定 (複数、全員の承認) * &#x60; or_position&#x60; - 役職指定 (複数、1人の承認)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceTypeEnum
        {
            /// <summary>
            /// Enum PredefinedUser for value: predefined_user
            /// </summary>
            [EnumMember(Value = "predefined_user")]
            PredefinedUser = 1,

            /// <summary>
            /// Enum SelectedUser for value: selected_user
            /// </summary>
            [EnumMember(Value = "selected_user")]
            SelectedUser = 2,

            /// <summary>
            /// Enum Unspecified for value: unspecified
            /// </summary>
            [EnumMember(Value = "unspecified")]
            Unspecified = 3,

            /// <summary>
            /// Enum AndResource for value: and_resource
            /// </summary>
            [EnumMember(Value = "and_resource")]
            AndResource = 4,

            /// <summary>
            /// Enum OrResource for value: or_resource
            /// </summary>
            [EnumMember(Value = "or_resource")]
            OrResource = 5,

            /// <summary>
            /// Enum AndPosition for value: and_position
            /// </summary>
            [EnumMember(Value = "and_position")]
            AndPosition = 6,

            /// <summary>
            /// Enum OrPosition for value: or_position
            /// </summary>
            [EnumMember(Value = "or_position")]
            OrPosition = 7

        }


        /// <summary>
        /// 承認ステップの承認方法 * &#x60; predefined_user&#x60; - メンバー指定 (1人), * &#x60; selected_user&#x60; - 申請時にメンバー指定 * &#x60; unspecified&#x60; - 指定なし * &#x60; and_resource&#x60; - メンバー指定 (複数、全員の承認), * &#x60; or_resource&#x60; - メンバー指定 (複数、1人の承認) * &#x60; and_position&#x60; - 役職指定 (複数、全員の承認) * &#x60; or_position&#x60; - 役職指定 (複数、1人の承認)
        /// </summary>
        /// <value>承認ステップの承認方法 * &#x60; predefined_user&#x60; - メンバー指定 (1人), * &#x60; selected_user&#x60; - 申請時にメンバー指定 * &#x60; unspecified&#x60; - 指定なし * &#x60; and_resource&#x60; - メンバー指定 (複数、全員の承認), * &#x60; or_resource&#x60; - メンバー指定 (複数、1人の承認) * &#x60; and_position&#x60; - 役職指定 (複数、全員の承認) * &#x60; or_position&#x60; - 役職指定 (複数、1人の承認)</value>
        [DataMember(Name = "resource_type", IsRequired = true, EmitDefaultValue = false)]
        public ResourceTypeEnum ResourceType { get; set; }
        /// <summary>
        /// 承認者の承認状態 * &#x60;initial&#x60; - 初期状態 * &#x60;approved&#x60; - 承認済 * &#x60;rejected&#x60; - 却下 * &#x60;feedback&#x60; - 差戻し
        /// </summary>
        /// <value>承認者の承認状態 * &#x60;initial&#x60; - 初期状態 * &#x60;approved&#x60; - 承認済 * &#x60;rejected&#x60; - 却下 * &#x60;feedback&#x60; - 差戻し</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Initial for value: initial
            /// </summary>
            [EnumMember(Value = "initial")]
            Initial = 1,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved = 2,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 3,

            /// <summary>
            /// Enum Feedback for value: feedback
            /// </summary>
            [EnumMember(Value = "feedback")]
            Feedback = 4

        }


        /// <summary>
        /// 承認者の承認状態 * &#x60;initial&#x60; - 初期状態 * &#x60;approved&#x60; - 承認済 * &#x60;rejected&#x60; - 却下 * &#x60;feedback&#x60; - 差戻し
        /// </summary>
        /// <value>承認者の承認状態 * &#x60;initial&#x60; - 初期状態 * &#x60;approved&#x60; - 承認済 * &#x60;rejected&#x60; - 却下 * &#x60;feedback&#x60; - 差戻し</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestResponseApprovalRequestApprovers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApprovalRequestResponseApprovalRequestApprovers() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestResponseApprovalRequestApprovers" /> class.
        /// </summary>
        /// <param name="isForceAction">代理承認済みかどうか (required).</param>
        /// <param name="resourceType">承認ステップの承認方法 * &#x60; predefined_user&#x60; - メンバー指定 (1人), * &#x60; selected_user&#x60; - 申請時にメンバー指定 * &#x60; unspecified&#x60; - 指定なし * &#x60; and_resource&#x60; - メンバー指定 (複数、全員の承認), * &#x60; or_resource&#x60; - メンバー指定 (複数、1人の承認) * &#x60; and_position&#x60; - 役職指定 (複数、全員の承認) * &#x60; or_position&#x60; - 役職指定 (複数、1人の承認) (required).</param>
        /// <param name="status">承認者の承認状態 * &#x60;initial&#x60; - 初期状態 * &#x60;approved&#x60; - 承認済 * &#x60;rejected&#x60; - 却下 * &#x60;feedback&#x60; - 差戻し (required).</param>
        /// <param name="stepId">承認ステップID (required).</param>
        /// <param name="userId">承認者のユーザーID 下記の場合はnullになります。 &lt;ul&gt;   &lt;li&gt;resource_type:selected_userの場合で承認者未指定時&lt;/li&gt;   &lt;li&gt;resource_type:or_positionで前stepで部門未指定の場合&lt;/li&gt; &lt;/ul&gt; (required).</param>
        public ApprovalRequestResponseApprovalRequestApprovers(bool isForceAction = default(bool), ResourceTypeEnum resourceType = default(ResourceTypeEnum), StatusEnum status = default(StatusEnum), int stepId = default(int), int? userId = default(int?))
        {
            this.IsForceAction = isForceAction;
            this.ResourceType = resourceType;
            this.Status = status;
            this.StepId = stepId;
            // to ensure "userId" is required (not null)
            if (userId == null) {
                throw new ArgumentNullException("userId is a required property for ApprovalRequestResponseApprovalRequestApprovers and cannot be null");
            }
            this.UserId = userId;
        }

        /// <summary>
        /// 代理承認済みかどうか
        /// </summary>
        /// <value>代理承認済みかどうか</value>
        [DataMember(Name = "is_force_action", IsRequired = true, EmitDefaultValue = true)]
        public bool IsForceAction { get; set; }

        /// <summary>
        /// 承認ステップID
        /// </summary>
        /// <value>承認ステップID</value>
        [DataMember(Name = "step_id", IsRequired = true, EmitDefaultValue = false)]
        public int StepId { get; set; }

        /// <summary>
        /// 承認者のユーザーID 下記の場合はnullになります。 &lt;ul&gt;   &lt;li&gt;resource_type:selected_userの場合で承認者未指定時&lt;/li&gt;   &lt;li&gt;resource_type:or_positionで前stepで部門未指定の場合&lt;/li&gt; &lt;/ul&gt;
        /// </summary>
        /// <value>承認者のユーザーID 下記の場合はnullになります。 &lt;ul&gt;   &lt;li&gt;resource_type:selected_userの場合で承認者未指定時&lt;/li&gt;   &lt;li&gt;resource_type:or_positionで前stepで部門未指定の場合&lt;/li&gt; &lt;/ul&gt;</value>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = true)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApprovalRequestResponseApprovalRequestApprovers {\n");
            sb.Append("  IsForceAction: ").Append(IsForceAction).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StepId: ").Append(StepId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApprovalRequestResponseApprovalRequestApprovers);
        }

        /// <summary>
        /// Returns true if ApprovalRequestResponseApprovalRequestApprovers instances are equal
        /// </summary>
        /// <param name="input">Instance of ApprovalRequestResponseApprovalRequestApprovers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalRequestResponseApprovalRequestApprovers input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsForceAction == input.IsForceAction ||
                    this.IsForceAction.Equals(input.IsForceAction)
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    this.ResourceType.Equals(input.ResourceType)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StepId == input.StepId ||
                    this.StepId.Equals(input.StepId)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsForceAction.GetHashCode();
                hashCode = (hashCode * 59) + this.ResourceType.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.StepId.GetHashCode();
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
