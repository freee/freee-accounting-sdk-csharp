/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// ExpenseApplicationUpdateParamsExpenseApplicationLines1
    /// </summary>
    [DataContract(Name = "expenseApplicationUpdateParams_expense_application_lines_1")]
    public partial class ExpenseApplicationUpdateParamsExpenseApplicationLines1 : IEquatable<ExpenseApplicationUpdateParamsExpenseApplicationLines1>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApplicationUpdateParamsExpenseApplicationLines1" /> class.
        /// </summary>
        /// <param name="amount">金額.</param>
        /// <param name="description">内容 (250文字以内).</param>
        /// <param name="expenseApplicationLineTemplateId">経費科目ID.</param>
        /// <param name="id">経費申請の明細行ID: 既存明細行を更新する場合に指定します。IDを指定しない明細行は、新規行として扱われ追加されます。また、expense_application_linesに含まれない既存の明細行は削除されます。更新後も残したい行は、必ず経費申請の明細行IDを指定してexpense_application_linesに含めてください。.</param>
        public ExpenseApplicationUpdateParamsExpenseApplicationLines1(int amount = default(int), string description = default(string), int expenseApplicationLineTemplateId = default(int), long id = default(long))
        {
            this.Amount = amount;
            this.Description = description;
            this.ExpenseApplicationLineTemplateId = expenseApplicationLineTemplateId;
            this.Id = id;
        }

        /// <summary>
        /// 金額
        /// </summary>
        /// <value>金額</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public int Amount { get; set; }

        /// <summary>
        /// 内容 (250文字以内)
        /// </summary>
        /// <value>内容 (250文字以内)</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// 経費科目ID
        /// </summary>
        /// <value>経費科目ID</value>
        [DataMember(Name = "expense_application_line_template_id", EmitDefaultValue = false)]
        public int ExpenseApplicationLineTemplateId { get; set; }

        /// <summary>
        /// 経費申請の明細行ID: 既存明細行を更新する場合に指定します。IDを指定しない明細行は、新規行として扱われ追加されます。また、expense_application_linesに含まれない既存の明細行は削除されます。更新後も残したい行は、必ず経費申請の明細行IDを指定してexpense_application_linesに含めてください。
        /// </summary>
        /// <value>経費申請の明細行ID: 既存明細行を更新する場合に指定します。IDを指定しない明細行は、新規行として扱われ追加されます。また、expense_application_linesに含まれない既存の明細行は削除されます。更新後も残したい行は、必ず経費申請の明細行IDを指定してexpense_application_linesに含めてください。</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExpenseApplicationUpdateParamsExpenseApplicationLines1 {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpenseApplicationLineTemplateId: ").Append(ExpenseApplicationLineTemplateId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseApplicationUpdateParamsExpenseApplicationLines1);
        }

        /// <summary>
        /// Returns true if ExpenseApplicationUpdateParamsExpenseApplicationLines1 instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseApplicationUpdateParamsExpenseApplicationLines1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseApplicationUpdateParamsExpenseApplicationLines1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExpenseApplicationLineTemplateId == input.ExpenseApplicationLineTemplateId ||
                    this.ExpenseApplicationLineTemplateId.Equals(input.ExpenseApplicationLineTemplateId)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpenseApplicationLineTemplateId.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                return hashCode;
            }
        }

    }

}
