/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// InvoiceIndexResponseTotalAmountPerVatRate
    /// </summary>
    [DataContract(Name = "invoiceIndexResponse_total_amount_per_vat_rate")]
    public partial class InvoiceIndexResponseTotalAmountPerVatRate : IEquatable<InvoiceIndexResponseTotalAmountPerVatRate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceIndexResponseTotalAmountPerVatRate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceIndexResponseTotalAmountPerVatRate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceIndexResponseTotalAmountPerVatRate" /> class.
        /// </summary>
        /// <param name="reducedVat8">軽減税率8%の税込み金額合計 (required).</param>
        /// <param name="vat10">税率10%の税込み金額合計 (required).</param>
        /// <param name="vat5">税率5%の税込み金額合計 (required).</param>
        /// <param name="vat8">税率8%の税込み金額合計 (required).</param>
        public InvoiceIndexResponseTotalAmountPerVatRate(long reducedVat8 = default(long), long vat10 = default(long), long vat5 = default(long), long vat8 = default(long))
        {
            this.ReducedVat8 = reducedVat8;
            this.Vat10 = vat10;
            this.Vat5 = vat5;
            this.Vat8 = vat8;
        }

        /// <summary>
        /// 軽減税率8%の税込み金額合計
        /// </summary>
        /// <value>軽減税率8%の税込み金額合計</value>
        [DataMember(Name = "reduced_vat_8", IsRequired = true, EmitDefaultValue = false)]
        public long ReducedVat8 { get; set; }

        /// <summary>
        /// 税率10%の税込み金額合計
        /// </summary>
        /// <value>税率10%の税込み金額合計</value>
        [DataMember(Name = "vat_10", IsRequired = true, EmitDefaultValue = false)]
        public long Vat10 { get; set; }

        /// <summary>
        /// 税率5%の税込み金額合計
        /// </summary>
        /// <value>税率5%の税込み金額合計</value>
        [DataMember(Name = "vat_5", IsRequired = true, EmitDefaultValue = false)]
        public long Vat5 { get; set; }

        /// <summary>
        /// 税率8%の税込み金額合計
        /// </summary>
        /// <value>税率8%の税込み金額合計</value>
        [DataMember(Name = "vat_8", IsRequired = true, EmitDefaultValue = false)]
        public long Vat8 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceIndexResponseTotalAmountPerVatRate {\n");
            sb.Append("  ReducedVat8: ").Append(ReducedVat8).Append("\n");
            sb.Append("  Vat10: ").Append(Vat10).Append("\n");
            sb.Append("  Vat5: ").Append(Vat5).Append("\n");
            sb.Append("  Vat8: ").Append(Vat8).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceIndexResponseTotalAmountPerVatRate);
        }

        /// <summary>
        /// Returns true if InvoiceIndexResponseTotalAmountPerVatRate instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceIndexResponseTotalAmountPerVatRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceIndexResponseTotalAmountPerVatRate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReducedVat8 == input.ReducedVat8 ||
                    this.ReducedVat8.Equals(input.ReducedVat8)
                ) && 
                (
                    this.Vat10 == input.Vat10 ||
                    this.Vat10.Equals(input.Vat10)
                ) && 
                (
                    this.Vat5 == input.Vat5 ||
                    this.Vat5.Equals(input.Vat5)
                ) && 
                (
                    this.Vat8 == input.Vat8 ||
                    this.Vat8.Equals(input.Vat8)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ReducedVat8.GetHashCode();
                hashCode = (hashCode * 59) + this.Vat10.GetHashCode();
                hashCode = (hashCode * 59) + this.Vat5.GetHashCode();
                hashCode = (hashCode * 59) + this.Vat8.GetHashCode();
                return hashCode;
            }
        }

    }

}
