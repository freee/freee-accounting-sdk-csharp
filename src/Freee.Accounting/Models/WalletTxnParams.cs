/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// WalletTxnParams
    /// </summary>
    [DataContract(Name = "walletTxnParams")]
    public partial class WalletTxnParams : IEquatable<WalletTxnParams>
    {
        /// <summary>
        /// 入金／出金 (入金: income, 出金: expense)
        /// </summary>
        /// <value>入金／出金 (入金: income, 出金: expense)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntrySideEnum
        {
            /// <summary>
            /// Enum Income for value: income
            /// </summary>
            [EnumMember(Value = "income")]
            Income = 1,

            /// <summary>
            /// Enum Expense for value: expense
            /// </summary>
            [EnumMember(Value = "expense")]
            Expense = 2

        }


        /// <summary>
        /// 入金／出金 (入金: income, 出金: expense)
        /// </summary>
        /// <value>入金／出金 (入金: income, 出金: expense)</value>
        [DataMember(Name = "entry_side", IsRequired = true, EmitDefaultValue = false)]
        public EntrySideEnum EntrySide { get; set; }
        /// <summary>
        /// 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)
        /// </summary>
        /// <value>口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WalletableTypeEnum
        {
            /// <summary>
            /// Enum BankAccount for value: bank_account
            /// </summary>
            [EnumMember(Value = "bank_account")]
            BankAccount = 1,

            /// <summary>
            /// Enum CreditCard for value: credit_card
            /// </summary>
            [EnumMember(Value = "credit_card")]
            CreditCard = 2,

            /// <summary>
            /// Enum Wallet for value: wallet
            /// </summary>
            [EnumMember(Value = "wallet")]
            Wallet = 3

        }


        /// <summary>
        /// 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)
        /// </summary>
        /// <value>口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)</value>
        [DataMember(Name = "walletable_type", IsRequired = true, EmitDefaultValue = false)]
        public WalletableTypeEnum WalletableType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletTxnParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WalletTxnParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletTxnParams" /> class.
        /// </summary>
        /// <param name="amount">取引金額 (required).</param>
        /// <param name="balance">残高 (銀行口座等).</param>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="date">取引日 (yyyy-mm-dd) (required).</param>
        /// <param name="description">取引内容.</param>
        /// <param name="entrySide">入金／出金 (入金: income, 出金: expense) (required).</param>
        /// <param name="walletableId">口座ID (required).</param>
        /// <param name="walletableType">口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) (required).</param>
        public WalletTxnParams(long amount = default(long), long balance = default(long), int companyId = default(int), string date = default(string), string description = default(string), EntrySideEnum entrySide = default(EntrySideEnum), int walletableId = default(int), WalletableTypeEnum walletableType = default(WalletableTypeEnum))
        {
            this.Amount = amount;
            this.CompanyId = companyId;
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new ArgumentNullException("date is a required property for WalletTxnParams and cannot be null");
            }
            this.Date = date;
            this.EntrySide = entrySide;
            this.WalletableId = walletableId;
            this.WalletableType = walletableType;
            this.Balance = balance;
            this.Description = description;
        }

        /// <summary>
        /// 取引金額
        /// </summary>
        /// <value>取引金額</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public long Amount { get; set; }

        /// <summary>
        /// 残高 (銀行口座等)
        /// </summary>
        /// <value>残高 (銀行口座等)</value>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public long Balance { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// 取引日 (yyyy-mm-dd)
        /// </summary>
        /// <value>取引日 (yyyy-mm-dd)</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// 取引内容
        /// </summary>
        /// <value>取引内容</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// 口座ID
        /// </summary>
        /// <value>口座ID</value>
        [DataMember(Name = "walletable_id", IsRequired = true, EmitDefaultValue = false)]
        public int WalletableId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WalletTxnParams {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EntrySide: ").Append(EntrySide).Append("\n");
            sb.Append("  WalletableId: ").Append(WalletableId).Append("\n");
            sb.Append("  WalletableType: ").Append(WalletableType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WalletTxnParams);
        }

        /// <summary>
        /// Returns true if WalletTxnParams instances are equal
        /// </summary>
        /// <param name="input">Instance of WalletTxnParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletTxnParams input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Balance == input.Balance ||
                    this.Balance.Equals(input.Balance)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EntrySide == input.EntrySide ||
                    this.EntrySide.Equals(input.EntrySide)
                ) && 
                (
                    this.WalletableId == input.WalletableId ||
                    this.WalletableId.Equals(input.WalletableId)
                ) && 
                (
                    this.WalletableType == input.WalletableType ||
                    this.WalletableType.Equals(input.WalletableType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.Balance.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EntrySide.GetHashCode();
                hashCode = (hashCode * 59) + this.WalletableId.GetHashCode();
                hashCode = (hashCode * 59) + this.WalletableType.GetHashCode();
                return hashCode;
            }
        }

    }

}
