/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// Transfer
    /// </summary>
    [DataContract(Name = "transfer")]
    public partial class Transfer : IEquatable<Transfer>
    {
        /// <summary>
        /// 振替元口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)
        /// </summary>
        /// <value>振替元口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FromWalletableTypeEnum
        {
            /// <summary>
            /// Enum BankAccount for value: bank_account
            /// </summary>
            [EnumMember(Value = "bank_account")]
            BankAccount = 1,

            /// <summary>
            /// Enum Wallet for value: wallet
            /// </summary>
            [EnumMember(Value = "wallet")]
            Wallet = 2,

            /// <summary>
            /// Enum CreditCard for value: credit_card
            /// </summary>
            [EnumMember(Value = "credit_card")]
            CreditCard = 3

        }


        /// <summary>
        /// 振替元口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)
        /// </summary>
        /// <value>振替元口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)</value>
        [DataMember(Name = "from_walletable_type", IsRequired = true, EmitDefaultValue = true)]
        public FromWalletableTypeEnum FromWalletableType { get; set; }
        /// <summary>
        /// 振替先口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)
        /// </summary>
        /// <value>振替先口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ToWalletableTypeEnum
        {
            /// <summary>
            /// Enum BankAccount for value: bank_account
            /// </summary>
            [EnumMember(Value = "bank_account")]
            BankAccount = 1,

            /// <summary>
            /// Enum Wallet for value: wallet
            /// </summary>
            [EnumMember(Value = "wallet")]
            Wallet = 2,

            /// <summary>
            /// Enum CreditCard for value: credit_card
            /// </summary>
            [EnumMember(Value = "credit_card")]
            CreditCard = 3

        }


        /// <summary>
        /// 振替先口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)
        /// </summary>
        /// <value>振替先口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet)</value>
        [DataMember(Name = "to_walletable_type", IsRequired = true, EmitDefaultValue = true)]
        public ToWalletableTypeEnum ToWalletableType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transfer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Transfer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transfer" /> class.
        /// </summary>
        /// <param name="amount">金額 (required).</param>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="date">振替日 (yyyy-mm-dd) (required).</param>
        /// <param name="description">備考 (required).</param>
        /// <param name="fromWalletableId">振替元口座ID (required).</param>
        /// <param name="fromWalletableType">振替元口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) (required).</param>
        /// <param name="id">取引(振替)ID (required).</param>
        /// <param name="toWalletableId">振替先口座ID (required).</param>
        /// <param name="toWalletableType">振替先口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) (required).</param>
        public Transfer(long amount = default(long), int companyId = default(int), string date = default(string), string description = default(string), int fromWalletableId = default(int), FromWalletableTypeEnum fromWalletableType = default(FromWalletableTypeEnum), int id = default(int), int toWalletableId = default(int), ToWalletableTypeEnum toWalletableType = default(ToWalletableTypeEnum))
        {
            this.Amount = amount;
            this.CompanyId = companyId;
            // to ensure "date" is required (not null)
            if (date == null) {
                throw new ArgumentNullException("date is a required property for Transfer and cannot be null");
            }
            this.Date = date;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for Transfer and cannot be null");
            }
            this.Description = description;
            this.FromWalletableId = fromWalletableId;
            this.FromWalletableType = fromWalletableType;
            this.Id = id;
            this.ToWalletableId = toWalletableId;
            this.ToWalletableType = toWalletableType;
        }

        /// <summary>
        /// 金額
        /// </summary>
        /// <value>金額</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public long Amount { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// 振替日 (yyyy-mm-dd)
        /// </summary>
        /// <value>振替日 (yyyy-mm-dd)</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// 備考
        /// </summary>
        /// <value>備考</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// 振替元口座ID
        /// </summary>
        /// <value>振替元口座ID</value>
        [DataMember(Name = "from_walletable_id", IsRequired = true, EmitDefaultValue = false)]
        public int FromWalletableId { get; set; }

        /// <summary>
        /// 取引(振替)ID
        /// </summary>
        /// <value>取引(振替)ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// 振替先口座ID
        /// </summary>
        /// <value>振替先口座ID</value>
        [DataMember(Name = "to_walletable_id", IsRequired = true, EmitDefaultValue = false)]
        public int ToWalletableId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Transfer {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FromWalletableId: ").Append(FromWalletableId).Append("\n");
            sb.Append("  FromWalletableType: ").Append(FromWalletableType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ToWalletableId: ").Append(ToWalletableId).Append("\n");
            sb.Append("  ToWalletableType: ").Append(ToWalletableType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transfer);
        }

        /// <summary>
        /// Returns true if Transfer instances are equal
        /// </summary>
        /// <param name="input">Instance of Transfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transfer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FromWalletableId == input.FromWalletableId ||
                    this.FromWalletableId.Equals(input.FromWalletableId)
                ) && 
                (
                    this.FromWalletableType == input.FromWalletableType ||
                    this.FromWalletableType.Equals(input.FromWalletableType)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ToWalletableId == input.ToWalletableId ||
                    this.ToWalletableId.Equals(input.ToWalletableId)
                ) && 
                (
                    this.ToWalletableType == input.ToWalletableType ||
                    this.ToWalletableType.Equals(input.ToWalletableType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FromWalletableId.GetHashCode();
                hashCode = (hashCode * 59) + this.FromWalletableType.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.ToWalletableId.GetHashCode();
                hashCode = (hashCode * 59) + this.ToWalletableType.GetHashCode();
                return hashCode;
            }
        }

    }

}
