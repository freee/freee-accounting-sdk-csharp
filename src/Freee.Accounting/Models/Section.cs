/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// Section
    /// </summary>
    [DataContract(Name = "section")]
    public partial class Section : IEquatable<Section>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Section" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Section() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Section" /> class.
        /// </summary>
        /// <param name="available">部門の使用設定（true: 使用する、false: 使用しない） &lt;br&gt; &lt;ul&gt;   &lt;li&gt;     本APIでsectionを作成した場合はtrueになります。   &lt;/li&gt;   &lt;li&gt;     falseにする場合はWeb画面から変更できます。   &lt;/li&gt;   &lt;li&gt;     trueの場合、Web画面での取引登録時などに入力候補として表示されます。   &lt;/li&gt;   &lt;li&gt;     falseの場合、部門自体は削除せず、Web画面での取引登録時などに入力候補として表示されません。ただし取引（収入・支出）の作成APIなどでfalseの部門をパラメータに指定すれば、取引などにfalseの部門を設定できます。   &lt;/li&gt; &lt;/ul&gt; (required).</param>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="id">部門ID (required).</param>
        /// <param name="indentCount">&lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://support.freee.co.jp/hc/ja/articles/209093566\&quot;&gt;部門階層&lt;/a&gt; &lt;br&gt; ※ indent_count が 0 のときは第一階層の親部門です。 .</param>
        /// <param name="longName">正式名称（255文字以内）.</param>
        /// <param name="name">部門名 (30文字以内) (required).</param>
        /// <param name="parentId">&lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://support.freee.co.jp/hc/ja/articles/209093566\&quot;&gt;親部門ID&lt;/a&gt; &lt;br&gt; ※ parent_id が null のときは第一階層の親部門です。 .</param>
        /// <param name="shortcut1">ショートカット１ (20文字以内).</param>
        /// <param name="shortcut2">ショートカット２ (20文字以内).</param>
        public Section(bool available = default(bool), int companyId = default(int), int id = default(int), int indentCount = default(int), string longName = default(string), string name = default(string), int? parentId = default(int?), string shortcut1 = default(string), string shortcut2 = default(string))
        {
            this.Available = available;
            this.CompanyId = companyId;
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for Section and cannot be null");
            }
            this.Name = name;
            this.IndentCount = indentCount;
            this.LongName = longName;
            this.ParentId = parentId;
            this.Shortcut1 = shortcut1;
            this.Shortcut2 = shortcut2;
        }

        /// <summary>
        /// 部門の使用設定（true: 使用する、false: 使用しない） &lt;br&gt; &lt;ul&gt;   &lt;li&gt;     本APIでsectionを作成した場合はtrueになります。   &lt;/li&gt;   &lt;li&gt;     falseにする場合はWeb画面から変更できます。   &lt;/li&gt;   &lt;li&gt;     trueの場合、Web画面での取引登録時などに入力候補として表示されます。   &lt;/li&gt;   &lt;li&gt;     falseの場合、部門自体は削除せず、Web画面での取引登録時などに入力候補として表示されません。ただし取引（収入・支出）の作成APIなどでfalseの部門をパラメータに指定すれば、取引などにfalseの部門を設定できます。   &lt;/li&gt; &lt;/ul&gt;
        /// </summary>
        /// <value>部門の使用設定（true: 使用する、false: 使用しない） &lt;br&gt; &lt;ul&gt;   &lt;li&gt;     本APIでsectionを作成した場合はtrueになります。   &lt;/li&gt;   &lt;li&gt;     falseにする場合はWeb画面から変更できます。   &lt;/li&gt;   &lt;li&gt;     trueの場合、Web画面での取引登録時などに入力候補として表示されます。   &lt;/li&gt;   &lt;li&gt;     falseの場合、部門自体は削除せず、Web画面での取引登録時などに入力候補として表示されません。ただし取引（収入・支出）の作成APIなどでfalseの部門をパラメータに指定すれば、取引などにfalseの部門を設定できます。   &lt;/li&gt; &lt;/ul&gt;</value>
        [DataMember(Name = "available", IsRequired = true, EmitDefaultValue = true)]
        public bool Available { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// 部門ID
        /// </summary>
        /// <value>部門ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://support.freee.co.jp/hc/ja/articles/209093566\&quot;&gt;部門階層&lt;/a&gt; &lt;br&gt; ※ indent_count が 0 のときは第一階層の親部門です。 
        /// </summary>
        /// <value>&lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://support.freee.co.jp/hc/ja/articles/209093566\&quot;&gt;部門階層&lt;/a&gt; &lt;br&gt; ※ indent_count が 0 のときは第一階層の親部門です。 </value>
        [DataMember(Name = "indent_count", EmitDefaultValue = false)]
        public int IndentCount { get; set; }

        /// <summary>
        /// 正式名称（255文字以内）
        /// </summary>
        /// <value>正式名称（255文字以内）</value>
        [DataMember(Name = "long_name", EmitDefaultValue = true)]
        public string LongName { get; set; }

        /// <summary>
        /// 部門名 (30文字以内)
        /// </summary>
        /// <value>部門名 (30文字以内)</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://support.freee.co.jp/hc/ja/articles/209093566\&quot;&gt;親部門ID&lt;/a&gt; &lt;br&gt; ※ parent_id が null のときは第一階層の親部門です。 
        /// </summary>
        /// <value>&lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://support.freee.co.jp/hc/ja/articles/209093566\&quot;&gt;親部門ID&lt;/a&gt; &lt;br&gt; ※ parent_id が null のときは第一階層の親部門です。 </value>
        [DataMember(Name = "parent_id", EmitDefaultValue = true)]
        public int? ParentId { get; set; }

        /// <summary>
        /// ショートカット１ (20文字以内)
        /// </summary>
        /// <value>ショートカット１ (20文字以内)</value>
        [DataMember(Name = "shortcut1", EmitDefaultValue = true)]
        public string Shortcut1 { get; set; }

        /// <summary>
        /// ショートカット２ (20文字以内)
        /// </summary>
        /// <value>ショートカット２ (20文字以内)</value>
        [DataMember(Name = "shortcut2", EmitDefaultValue = true)]
        public string Shortcut2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Section {\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IndentCount: ").Append(IndentCount).Append("\n");
            sb.Append("  LongName: ").Append(LongName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Shortcut1: ").Append(Shortcut1).Append("\n");
            sb.Append("  Shortcut2: ").Append(Shortcut2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Section);
        }

        /// <summary>
        /// Returns true if Section instances are equal
        /// </summary>
        /// <param name="input">Instance of Section to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Section input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Available == input.Available ||
                    this.Available.Equals(input.Available)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.IndentCount == input.IndentCount ||
                    this.IndentCount.Equals(input.IndentCount)
                ) && 
                (
                    this.LongName == input.LongName ||
                    (this.LongName != null &&
                    this.LongName.Equals(input.LongName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.Shortcut1 == input.Shortcut1 ||
                    (this.Shortcut1 != null &&
                    this.Shortcut1.Equals(input.Shortcut1))
                ) && 
                (
                    this.Shortcut2 == input.Shortcut2 ||
                    (this.Shortcut2 != null &&
                    this.Shortcut2.Equals(input.Shortcut2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Available.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.IndentCount.GetHashCode();
                if (this.LongName != null)
                {
                    hashCode = (hashCode * 59) + this.LongName.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ParentId != null)
                {
                    hashCode = (hashCode * 59) + this.ParentId.GetHashCode();
                }
                if (this.Shortcut1 != null)
                {
                    hashCode = (hashCode * 59) + this.Shortcut1.GetHashCode();
                }
                if (this.Shortcut2 != null)
                {
                    hashCode = (hashCode * 59) + this.Shortcut2.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
