/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// ExpenseApplicationResponseExpenseApplication
    /// </summary>
    [DataContract(Name = "expenseApplicationResponse_expense_application")]
    public partial class ExpenseApplicationResponseExpenseApplication : IEquatable<ExpenseApplicationResponseExpenseApplication>
    {
        /// <summary>
        /// 取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:精算済み, unsettled:清算待ち)
        /// </summary>
        /// <value>取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:精算済み, unsettled:清算待ち)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DealStatusEnum
        {
            /// <summary>
            /// Enum Settled for value: settled
            /// </summary>
            [EnumMember(Value = "settled")]
            Settled = 1,

            /// <summary>
            /// Enum Unsettled for value: unsettled
            /// </summary>
            [EnumMember(Value = "unsettled")]
            Unsettled = 2

        }


        /// <summary>
        /// 取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:精算済み, unsettled:清算待ち)
        /// </summary>
        /// <value>取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:精算済み, unsettled:清算待ち)</value>
        [DataMember(Name = "deal_status", IsRequired = true, EmitDefaultValue = true)]
        public DealStatusEnum DealStatus { get; set; }
        /// <summary>
        /// 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)
        /// </summary>
        /// <value>申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            [EnumMember(Value = "draft")]
            Draft = 1,

            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgress = 2,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved = 3,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 4,

            /// <summary>
            /// Enum Feedback for value: feedback
            /// </summary>
            [EnumMember(Value = "feedback")]
            Feedback = 5

        }


        /// <summary>
        /// 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)
        /// </summary>
        /// <value>申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApplicationResponseExpenseApplication" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExpenseApplicationResponseExpenseApplication() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApplicationResponseExpenseApplication" /> class.
        /// </summary>
        /// <param name="applicantId">申請者のユーザーID (required).</param>
        /// <param name="applicationNumber">申請No. (required).</param>
        /// <param name="approvalFlowLogs">経費申請の承認履歴（配列） (required).</param>
        /// <param name="approvalFlowRouteId">申請経路ID (required).</param>
        /// <param name="approvers">承認者（配列）   承認ステップのresource_typeがunspecified (指定なし)の場合はapproversはレスポンスに含まれません。   しかし、resource_typeがunspecifiedの承認ステップにおいて誰かが承認・却下・差し戻しのいずれかのアクションを取った後は、   approversはレスポンスに含まれるようになります。   その場合approversにはアクションを行ったステップのIDとアクションを行ったユーザーのIDが含まれます。 (required).</param>
        /// <param name="comments">経費申請のコメント一覧（配列） (required).</param>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="currentRound">現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。 (required).</param>
        /// <param name="currentStepId">現在承認ステップID (required).</param>
        /// <param name="dealId">取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます) (required).</param>
        /// <param name="dealStatus">取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:精算済み, unsettled:清算待ち) (required).</param>
        /// <param name="description">備考.</param>
        /// <param name="expenseApplicationLines">経費申請の項目行一覧（配列）.</param>
        /// <param name="id">経費申請ID (required).</param>
        /// <param name="issueDate">申請日 (yyyy-mm-dd) (required).</param>
        /// <param name="purchaseLines">この項目はインボイス制度で利用する項目です。2023年4月上旬から利用できる予定です。利用可能となる前に予告なく変更がある場合があります。&lt;br&gt; 経費申請の申請行一覧（配列） .</param>
        /// <param name="sectionId">部門ID.</param>
        /// <param name="segment1TagId">セグメント１ID。セグメント１が使用可能なプランの時のみレスポンスに含まれます。.</param>
        /// <param name="segment2TagId">セグメント２ID。セグメント２が使用可能なプランの時のみレスポンスに含まれます。.</param>
        /// <param name="segment3TagId">セグメント３ID。セグメント３が使用可能なプランの時のみレスポンスに含まれます。.</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) (required).</param>
        /// <param name="tagIds">メモタグID.</param>
        /// <param name="title">申請タイトル (required).</param>
        /// <param name="totalAmount">合計金額.</param>
        public ExpenseApplicationResponseExpenseApplication(int applicantId = default(int), string applicationNumber = default(string), List<ApprovalRequestResponseApprovalRequestApprovalFlowLogs> approvalFlowLogs = default(List<ApprovalRequestResponseApprovalRequestApprovalFlowLogs>), int approvalFlowRouteId = default(int), List<ApprovalRequestResponseApprovalRequestApprovers> approvers = default(List<ApprovalRequestResponseApprovalRequestApprovers>), List<ApprovalRequestResponseApprovalRequestComments> comments = default(List<ApprovalRequestResponseApprovalRequestComments>), int companyId = default(int), int currentRound = default(int), int? currentStepId = default(int?), int? dealId = default(int?), DealStatusEnum dealStatus = default(DealStatusEnum), string description = default(string), List<ExpenseApplicationResponseExpenseApplicationExpenseApplicationLines> expenseApplicationLines = default(List<ExpenseApplicationResponseExpenseApplicationExpenseApplicationLines>), int id = default(int), string issueDate = default(string), List<ExpenseApplicationResponseExpenseApplicationPurchaseLines> purchaseLines = default(List<ExpenseApplicationResponseExpenseApplicationPurchaseLines>), int? sectionId = default(int?), long? segment1TagId = default(long?), long? segment2TagId = default(long?), long? segment3TagId = default(long?), StatusEnum status = default(StatusEnum), List<int> tagIds = default(List<int>), string title = default(string), int totalAmount = default(int))
        {
            this.ApplicantId = applicantId;
            // to ensure "applicationNumber" is required (not null)
            if (applicationNumber == null) {
                throw new ArgumentNullException("applicationNumber is a required property for ExpenseApplicationResponseExpenseApplication and cannot be null");
            }
            this.ApplicationNumber = applicationNumber;
            // to ensure "approvalFlowLogs" is required (not null)
            if (approvalFlowLogs == null) {
                throw new ArgumentNullException("approvalFlowLogs is a required property for ExpenseApplicationResponseExpenseApplication and cannot be null");
            }
            this.ApprovalFlowLogs = approvalFlowLogs;
            this.ApprovalFlowRouteId = approvalFlowRouteId;
            // to ensure "approvers" is required (not null)
            if (approvers == null) {
                throw new ArgumentNullException("approvers is a required property for ExpenseApplicationResponseExpenseApplication and cannot be null");
            }
            this.Approvers = approvers;
            // to ensure "comments" is required (not null)
            if (comments == null) {
                throw new ArgumentNullException("comments is a required property for ExpenseApplicationResponseExpenseApplication and cannot be null");
            }
            this.Comments = comments;
            this.CompanyId = companyId;
            this.CurrentRound = currentRound;
            // to ensure "currentStepId" is required (not null)
            if (currentStepId == null) {
                throw new ArgumentNullException("currentStepId is a required property for ExpenseApplicationResponseExpenseApplication and cannot be null");
            }
            this.CurrentStepId = currentStepId;
            // to ensure "dealId" is required (not null)
            if (dealId == null) {
                throw new ArgumentNullException("dealId is a required property for ExpenseApplicationResponseExpenseApplication and cannot be null");
            }
            this.DealId = dealId;
            this.DealStatus = dealStatus;
            this.Id = id;
            // to ensure "issueDate" is required (not null)
            if (issueDate == null) {
                throw new ArgumentNullException("issueDate is a required property for ExpenseApplicationResponseExpenseApplication and cannot be null");
            }
            this.IssueDate = issueDate;
            this.Status = status;
            // to ensure "title" is required (not null)
            if (title == null) {
                throw new ArgumentNullException("title is a required property for ExpenseApplicationResponseExpenseApplication and cannot be null");
            }
            this.Title = title;
            this.Description = description;
            this.ExpenseApplicationLines = expenseApplicationLines;
            this.PurchaseLines = purchaseLines;
            this.SectionId = sectionId;
            this.Segment1TagId = segment1TagId;
            this.Segment2TagId = segment2TagId;
            this.Segment3TagId = segment3TagId;
            this.TagIds = tagIds;
            this.TotalAmount = totalAmount;
        }

        /// <summary>
        /// 申請者のユーザーID
        /// </summary>
        /// <value>申請者のユーザーID</value>
        [DataMember(Name = "applicant_id", IsRequired = true, EmitDefaultValue = false)]
        public int ApplicantId { get; set; }

        /// <summary>
        /// 申請No.
        /// </summary>
        /// <value>申請No.</value>
        [DataMember(Name = "application_number", IsRequired = true, EmitDefaultValue = false)]
        public string ApplicationNumber { get; set; }

        /// <summary>
        /// 経費申請の承認履歴（配列）
        /// </summary>
        /// <value>経費申請の承認履歴（配列）</value>
        [DataMember(Name = "approval_flow_logs", IsRequired = true, EmitDefaultValue = false)]
        public List<ApprovalRequestResponseApprovalRequestApprovalFlowLogs> ApprovalFlowLogs { get; set; }

        /// <summary>
        /// 申請経路ID
        /// </summary>
        /// <value>申請経路ID</value>
        [DataMember(Name = "approval_flow_route_id", IsRequired = true, EmitDefaultValue = false)]
        public int ApprovalFlowRouteId { get; set; }

        /// <summary>
        /// 承認者（配列）   承認ステップのresource_typeがunspecified (指定なし)の場合はapproversはレスポンスに含まれません。   しかし、resource_typeがunspecifiedの承認ステップにおいて誰かが承認・却下・差し戻しのいずれかのアクションを取った後は、   approversはレスポンスに含まれるようになります。   その場合approversにはアクションを行ったステップのIDとアクションを行ったユーザーのIDが含まれます。
        /// </summary>
        /// <value>承認者（配列）   承認ステップのresource_typeがunspecified (指定なし)の場合はapproversはレスポンスに含まれません。   しかし、resource_typeがunspecifiedの承認ステップにおいて誰かが承認・却下・差し戻しのいずれかのアクションを取った後は、   approversはレスポンスに含まれるようになります。   その場合approversにはアクションを行ったステップのIDとアクションを行ったユーザーのIDが含まれます。</value>
        [DataMember(Name = "approvers", IsRequired = true, EmitDefaultValue = false)]
        public List<ApprovalRequestResponseApprovalRequestApprovers> Approvers { get; set; }

        /// <summary>
        /// 経費申請のコメント一覧（配列）
        /// </summary>
        /// <value>経費申請のコメント一覧（配列）</value>
        [DataMember(Name = "comments", IsRequired = true, EmitDefaultValue = false)]
        public List<ApprovalRequestResponseApprovalRequestComments> Comments { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// 現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。
        /// </summary>
        /// <value>現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。</value>
        [DataMember(Name = "current_round", IsRequired = true, EmitDefaultValue = false)]
        public int CurrentRound { get; set; }

        /// <summary>
        /// 現在承認ステップID
        /// </summary>
        /// <value>現在承認ステップID</value>
        [DataMember(Name = "current_step_id", IsRequired = true, EmitDefaultValue = true)]
        public int? CurrentStepId { get; set; }

        /// <summary>
        /// 取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます)
        /// </summary>
        /// <value>取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます)</value>
        [DataMember(Name = "deal_id", IsRequired = true, EmitDefaultValue = true)]
        public int? DealId { get; set; }

        /// <summary>
        /// 備考
        /// </summary>
        /// <value>備考</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// 経費申請の項目行一覧（配列）
        /// </summary>
        /// <value>経費申請の項目行一覧（配列）</value>
        [DataMember(Name = "expense_application_lines", EmitDefaultValue = false)]
        public List<ExpenseApplicationResponseExpenseApplicationExpenseApplicationLines> ExpenseApplicationLines { get; set; }

        /// <summary>
        /// 経費申請ID
        /// </summary>
        /// <value>経費申請ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// 申請日 (yyyy-mm-dd)
        /// </summary>
        /// <value>申請日 (yyyy-mm-dd)</value>
        [DataMember(Name = "issue_date", IsRequired = true, EmitDefaultValue = false)]
        public string IssueDate { get; set; }

        /// <summary>
        /// この項目はインボイス制度で利用する項目です。2023年4月上旬から利用できる予定です。利用可能となる前に予告なく変更がある場合があります。&lt;br&gt; 経費申請の申請行一覧（配列） 
        /// </summary>
        /// <value>この項目はインボイス制度で利用する項目です。2023年4月上旬から利用できる予定です。利用可能となる前に予告なく変更がある場合があります。&lt;br&gt; 経費申請の申請行一覧（配列） </value>
        [DataMember(Name = "purchase_lines", EmitDefaultValue = false)]
        public List<ExpenseApplicationResponseExpenseApplicationPurchaseLines> PurchaseLines { get; set; }

        /// <summary>
        /// 部門ID
        /// </summary>
        /// <value>部門ID</value>
        [DataMember(Name = "section_id", EmitDefaultValue = true)]
        public int? SectionId { get; set; }

        /// <summary>
        /// セグメント１ID。セグメント１が使用可能なプランの時のみレスポンスに含まれます。
        /// </summary>
        /// <value>セグメント１ID。セグメント１が使用可能なプランの時のみレスポンスに含まれます。</value>
        [DataMember(Name = "segment_1_tag_id", EmitDefaultValue = true)]
        public long? Segment1TagId { get; set; }

        /// <summary>
        /// セグメント２ID。セグメント２が使用可能なプランの時のみレスポンスに含まれます。
        /// </summary>
        /// <value>セグメント２ID。セグメント２が使用可能なプランの時のみレスポンスに含まれます。</value>
        [DataMember(Name = "segment_2_tag_id", EmitDefaultValue = true)]
        public long? Segment2TagId { get; set; }

        /// <summary>
        /// セグメント３ID。セグメント３が使用可能なプランの時のみレスポンスに含まれます。
        /// </summary>
        /// <value>セグメント３ID。セグメント３が使用可能なプランの時のみレスポンスに含まれます。</value>
        [DataMember(Name = "segment_3_tag_id", EmitDefaultValue = true)]
        public long? Segment3TagId { get; set; }

        /// <summary>
        /// メモタグID
        /// </summary>
        /// <value>メモタグID</value>
        [DataMember(Name = "tag_ids", EmitDefaultValue = false)]
        public List<int> TagIds { get; set; }

        /// <summary>
        /// 申請タイトル
        /// </summary>
        /// <value>申請タイトル</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// 合計金額
        /// </summary>
        /// <value>合計金額</value>
        [DataMember(Name = "total_amount", EmitDefaultValue = false)]
        public int TotalAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExpenseApplicationResponseExpenseApplication {\n");
            sb.Append("  ApplicantId: ").Append(ApplicantId).Append("\n");
            sb.Append("  ApplicationNumber: ").Append(ApplicationNumber).Append("\n");
            sb.Append("  ApprovalFlowLogs: ").Append(ApprovalFlowLogs).Append("\n");
            sb.Append("  ApprovalFlowRouteId: ").Append(ApprovalFlowRouteId).Append("\n");
            sb.Append("  Approvers: ").Append(Approvers).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CurrentRound: ").Append(CurrentRound).Append("\n");
            sb.Append("  CurrentStepId: ").Append(CurrentStepId).Append("\n");
            sb.Append("  DealId: ").Append(DealId).Append("\n");
            sb.Append("  DealStatus: ").Append(DealStatus).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpenseApplicationLines: ").Append(ExpenseApplicationLines).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  PurchaseLines: ").Append(PurchaseLines).Append("\n");
            sb.Append("  SectionId: ").Append(SectionId).Append("\n");
            sb.Append("  Segment1TagId: ").Append(Segment1TagId).Append("\n");
            sb.Append("  Segment2TagId: ").Append(Segment2TagId).Append("\n");
            sb.Append("  Segment3TagId: ").Append(Segment3TagId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseApplicationResponseExpenseApplication);
        }

        /// <summary>
        /// Returns true if ExpenseApplicationResponseExpenseApplication instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseApplicationResponseExpenseApplication to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseApplicationResponseExpenseApplication input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicantId == input.ApplicantId ||
                    this.ApplicantId.Equals(input.ApplicantId)
                ) && 
                (
                    this.ApplicationNumber == input.ApplicationNumber ||
                    (this.ApplicationNumber != null &&
                    this.ApplicationNumber.Equals(input.ApplicationNumber))
                ) && 
                (
                    this.ApprovalFlowLogs == input.ApprovalFlowLogs ||
                    this.ApprovalFlowLogs != null &&
                    input.ApprovalFlowLogs != null &&
                    this.ApprovalFlowLogs.SequenceEqual(input.ApprovalFlowLogs)
                ) && 
                (
                    this.ApprovalFlowRouteId == input.ApprovalFlowRouteId ||
                    this.ApprovalFlowRouteId.Equals(input.ApprovalFlowRouteId)
                ) && 
                (
                    this.Approvers == input.Approvers ||
                    this.Approvers != null &&
                    input.Approvers != null &&
                    this.Approvers.SequenceEqual(input.Approvers)
                ) && 
                (
                    this.Comments == input.Comments ||
                    this.Comments != null &&
                    input.Comments != null &&
                    this.Comments.SequenceEqual(input.Comments)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.CurrentRound == input.CurrentRound ||
                    this.CurrentRound.Equals(input.CurrentRound)
                ) && 
                (
                    this.CurrentStepId == input.CurrentStepId ||
                    (this.CurrentStepId != null &&
                    this.CurrentStepId.Equals(input.CurrentStepId))
                ) && 
                (
                    this.DealId == input.DealId ||
                    (this.DealId != null &&
                    this.DealId.Equals(input.DealId))
                ) && 
                (
                    this.DealStatus == input.DealStatus ||
                    this.DealStatus.Equals(input.DealStatus)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExpenseApplicationLines == input.ExpenseApplicationLines ||
                    this.ExpenseApplicationLines != null &&
                    input.ExpenseApplicationLines != null &&
                    this.ExpenseApplicationLines.SequenceEqual(input.ExpenseApplicationLines)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.PurchaseLines == input.PurchaseLines ||
                    this.PurchaseLines != null &&
                    input.PurchaseLines != null &&
                    this.PurchaseLines.SequenceEqual(input.PurchaseLines)
                ) && 
                (
                    this.SectionId == input.SectionId ||
                    (this.SectionId != null &&
                    this.SectionId.Equals(input.SectionId))
                ) && 
                (
                    this.Segment1TagId == input.Segment1TagId ||
                    (this.Segment1TagId != null &&
                    this.Segment1TagId.Equals(input.Segment1TagId))
                ) && 
                (
                    this.Segment2TagId == input.Segment2TagId ||
                    (this.Segment2TagId != null &&
                    this.Segment2TagId.Equals(input.Segment2TagId))
                ) && 
                (
                    this.Segment3TagId == input.Segment3TagId ||
                    (this.Segment3TagId != null &&
                    this.Segment3TagId.Equals(input.Segment3TagId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.TagIds == input.TagIds ||
                    this.TagIds != null &&
                    input.TagIds != null &&
                    this.TagIds.SequenceEqual(input.TagIds)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    this.TotalAmount.Equals(input.TotalAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ApplicantId.GetHashCode();
                if (this.ApplicationNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationNumber.GetHashCode();
                }
                if (this.ApprovalFlowLogs != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalFlowLogs.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ApprovalFlowRouteId.GetHashCode();
                if (this.Approvers != null)
                {
                    hashCode = (hashCode * 59) + this.Approvers.GetHashCode();
                }
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentRound.GetHashCode();
                if (this.CurrentStepId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentStepId.GetHashCode();
                }
                if (this.DealId != null)
                {
                    hashCode = (hashCode * 59) + this.DealId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DealStatus.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ExpenseApplicationLines != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseApplicationLines.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.IssueDate != null)
                {
                    hashCode = (hashCode * 59) + this.IssueDate.GetHashCode();
                }
                if (this.PurchaseLines != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseLines.GetHashCode();
                }
                if (this.SectionId != null)
                {
                    hashCode = (hashCode * 59) + this.SectionId.GetHashCode();
                }
                if (this.Segment1TagId != null)
                {
                    hashCode = (hashCode * 59) + this.Segment1TagId.GetHashCode();
                }
                if (this.Segment2TagId != null)
                {
                    hashCode = (hashCode * 59) + this.Segment2TagId.GetHashCode();
                }
                if (this.Segment3TagId != null)
                {
                    hashCode = (hashCode * 59) + this.Segment3TagId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.TagIds != null)
                {
                    hashCode = (hashCode * 59) + this.TagIds.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                return hashCode;
            }
        }

    }

}
