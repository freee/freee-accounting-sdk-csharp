/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// ExpenseApplicationUpdateParamsPurchaseLines
    /// </summary>
    [DataContract(Name = "expenseApplicationUpdateParams_purchase_lines")]
    public partial class ExpenseApplicationUpdateParamsPurchaseLines : IEquatable<ExpenseApplicationUpdateParamsPurchaseLines>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApplicationUpdateParamsPurchaseLines" /> class.
        /// </summary>
        /// <param name="expenseApplicationLines">明細行一覧（配列）.</param>
        /// <param name="id">経費申請の申請行ID: 既存申請行を更新する場合に指定します。IDを指定しない申請行は、新規行として扱われ追加されます。また、purchase_linesに含まれない既存の申請行は削除されます。更新後も残したい行は、必ず経費申請の申請行IDを指定してpurchase_linesに含めてください。.</param>
        /// <param name="receiptId">ファイルボックス（証憑ファイル）ID.</param>
        /// <param name="transactionDate">日付 (yyyy-mm-dd).</param>
        public ExpenseApplicationUpdateParamsPurchaseLines(List<ExpenseApplicationUpdateParamsExpenseApplicationLines1> expenseApplicationLines = default(List<ExpenseApplicationUpdateParamsExpenseApplicationLines1>), long id = default(long), int receiptId = default(int), string transactionDate = default(string))
        {
            this.ExpenseApplicationLines = expenseApplicationLines;
            this.Id = id;
            this.ReceiptId = receiptId;
            this.TransactionDate = transactionDate;
        }

        /// <summary>
        /// 明細行一覧（配列）
        /// </summary>
        /// <value>明細行一覧（配列）</value>
        [DataMember(Name = "expense_application_lines", EmitDefaultValue = false)]
        public List<ExpenseApplicationUpdateParamsExpenseApplicationLines1> ExpenseApplicationLines { get; set; }

        /// <summary>
        /// 経費申請の申請行ID: 既存申請行を更新する場合に指定します。IDを指定しない申請行は、新規行として扱われ追加されます。また、purchase_linesに含まれない既存の申請行は削除されます。更新後も残したい行は、必ず経費申請の申請行IDを指定してpurchase_linesに含めてください。
        /// </summary>
        /// <value>経費申請の申請行ID: 既存申請行を更新する場合に指定します。IDを指定しない申請行は、新規行として扱われ追加されます。また、purchase_linesに含まれない既存の申請行は削除されます。更新後も残したい行は、必ず経費申請の申請行IDを指定してpurchase_linesに含めてください。</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// ファイルボックス（証憑ファイル）ID
        /// </summary>
        /// <value>ファイルボックス（証憑ファイル）ID</value>
        [DataMember(Name = "receipt_id", EmitDefaultValue = false)]
        public int ReceiptId { get; set; }

        /// <summary>
        /// 日付 (yyyy-mm-dd)
        /// </summary>
        /// <value>日付 (yyyy-mm-dd)</value>
        [DataMember(Name = "transaction_date", EmitDefaultValue = false)]
        public string TransactionDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExpenseApplicationUpdateParamsPurchaseLines {\n");
            sb.Append("  ExpenseApplicationLines: ").Append(ExpenseApplicationLines).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReceiptId: ").Append(ReceiptId).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseApplicationUpdateParamsPurchaseLines);
        }

        /// <summary>
        /// Returns true if ExpenseApplicationUpdateParamsPurchaseLines instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseApplicationUpdateParamsPurchaseLines to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseApplicationUpdateParamsPurchaseLines input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExpenseApplicationLines == input.ExpenseApplicationLines ||
                    this.ExpenseApplicationLines != null &&
                    input.ExpenseApplicationLines != null &&
                    this.ExpenseApplicationLines.SequenceEqual(input.ExpenseApplicationLines)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ReceiptId == input.ReceiptId ||
                    this.ReceiptId.Equals(input.ReceiptId)
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpenseApplicationLines != null)
                {
                    hashCode = (hashCode * 59) + this.ExpenseApplicationLines.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.ReceiptId.GetHashCode();
                if (this.TransactionDate != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionDate.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
