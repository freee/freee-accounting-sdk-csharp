/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// PaymentRequestResponsePaymentRequest
    /// </summary>
    [DataContract(Name = "paymentRequestResponse_payment_request")]
    public partial class PaymentRequestResponsePaymentRequest : IEquatable<PaymentRequestResponsePaymentRequest>
    {
        /// <summary>
        /// 口座種別(ordinary:普通、checking:当座、earmarked:納税準備預金、savings:貯蓄、other:その他)
        /// </summary>
        /// <value>口座種別(ordinary:普通、checking:当座、earmarked:納税準備預金、savings:貯蓄、other:その他)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountTypeEnum
        {
            /// <summary>
            /// Enum Ordinary for value: ordinary
            /// </summary>
            [EnumMember(Value = "ordinary")]
            Ordinary = 1,

            /// <summary>
            /// Enum Checking for value: checking
            /// </summary>
            [EnumMember(Value = "checking")]
            Checking = 2,

            /// <summary>
            /// Enum Earmarked for value: earmarked
            /// </summary>
            [EnumMember(Value = "earmarked")]
            Earmarked = 3,

            /// <summary>
            /// Enum Savings for value: savings
            /// </summary>
            [EnumMember(Value = "savings")]
            Savings = 4,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 5

        }


        /// <summary>
        /// 口座種別(ordinary:普通、checking:当座、earmarked:納税準備預金、savings:貯蓄、other:その他)
        /// </summary>
        /// <value>口座種別(ordinary:普通、checking:当座、earmarked:納税準備預金、savings:貯蓄、other:その他)</value>
        [DataMember(Name = "account_type", IsRequired = true, EmitDefaultValue = false)]
        public AccountTypeEnum AccountType { get; set; }
        /// <summary>
        /// 取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:支払済み, unsettled:支払待ち)
        /// </summary>
        /// <value>取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:支払済み, unsettled:支払待ち)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DealStatusEnum
        {
            /// <summary>
            /// Enum Settled for value: settled
            /// </summary>
            [EnumMember(Value = "settled")]
            Settled = 1,

            /// <summary>
            /// Enum Unsettled for value: unsettled
            /// </summary>
            [EnumMember(Value = "unsettled")]
            Unsettled = 2

        }


        /// <summary>
        /// 取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:支払済み, unsettled:支払待ち)
        /// </summary>
        /// <value>取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:支払済み, unsettled:支払待ち)</value>
        [DataMember(Name = "deal_status", IsRequired = true, EmitDefaultValue = true)]
        public DealStatusEnum DealStatus { get; set; }
        /// <summary>
        /// 支払方法(none: 指定なし, domestic_bank_transfer: 国内振込, abroad_bank_transfer: 国外振込, account_transfer: 口座振替, credit_card: クレジットカード)
        /// </summary>
        /// <value>支払方法(none: 指定なし, domestic_bank_transfer: 国内振込, abroad_bank_transfer: 国外振込, account_transfer: 口座振替, credit_card: クレジットカード)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum DomesticBankTransfer for value: domestic_bank_transfer
            /// </summary>
            [EnumMember(Value = "domestic_bank_transfer")]
            DomesticBankTransfer = 2,

            /// <summary>
            /// Enum AbroadBankTransfer for value: abroad_bank_transfer
            /// </summary>
            [EnumMember(Value = "abroad_bank_transfer")]
            AbroadBankTransfer = 3,

            /// <summary>
            /// Enum AccountTransfer for value: account_transfer
            /// </summary>
            [EnumMember(Value = "account_transfer")]
            AccountTransfer = 4,

            /// <summary>
            /// Enum CreditCard for value: credit_card
            /// </summary>
            [EnumMember(Value = "credit_card")]
            CreditCard = 5

        }


        /// <summary>
        /// 支払方法(none: 指定なし, domestic_bank_transfer: 国内振込, abroad_bank_transfer: 国外振込, account_transfer: 口座振替, credit_card: クレジットカード)
        /// </summary>
        /// <value>支払方法(none: 指定なし, domestic_bank_transfer: 国内振込, abroad_bank_transfer: 国外振込, account_transfer: 口座振替, credit_card: クレジットカード)</value>
        [DataMember(Name = "payment_method", IsRequired = true, EmitDefaultValue = false)]
        public PaymentMethodEnum PaymentMethod { get; set; }
        /// <summary>
        /// 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)
        /// </summary>
        /// <value>申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            [EnumMember(Value = "draft")]
            Draft = 1,

            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgress = 2,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved = 3,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            Rejected = 4,

            /// <summary>
            /// Enum Feedback for value: feedback
            /// </summary>
            [EnumMember(Value = "feedback")]
            Feedback = 5

        }


        /// <summary>
        /// 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)
        /// </summary>
        /// <value>申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequestResponsePaymentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentRequestResponsePaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequestResponsePaymentRequest" /> class.
        /// </summary>
        /// <param name="accountName">受取人名（カナ） (required).</param>
        /// <param name="accountNumber">口座番号 (required).</param>
        /// <param name="accountType">口座種別(ordinary:普通、checking:当座、earmarked:納税準備預金、savings:貯蓄、other:その他) (required).</param>
        /// <param name="applicantId">申請者のユーザーID (required).</param>
        /// <param name="applicationDate">申請日 (yyyy-mm-dd) (required).</param>
        /// <param name="applicationNumber">申請No. (required).</param>
        /// <param name="approvalFlowLogs">支払依頼の承認履歴（配列） (required).</param>
        /// <param name="approvalFlowRouteId">申請経路ID (required).</param>
        /// <param name="approvers">承認者（配列）   承認ステップのresource_typeがunspecified (指定なし)の場合はapproversはレスポンスに含まれません。   しかし、resource_typeがunspecifiedの承認ステップにおいて誰かが承認・却下・差し戻しのいずれかのアクションを取った後は、   approversはレスポンスに含まれるようになります。   その場合approversにはアクションを行ったステップのIDとアクションを行ったユーザーのIDが含まれます。 (required).</param>
        /// <param name="bankCode">銀行コード (required).</param>
        /// <param name="bankName">銀行名 (required).</param>
        /// <param name="bankNameKana">銀行名（カナ） (required).</param>
        /// <param name="branchCode">支店番号 (required).</param>
        /// <param name="branchKana">支店名（カナ） (required).</param>
        /// <param name="branchName">支店名 (required).</param>
        /// <param name="comments">支払依頼のコメント一覧（配列） (required).</param>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="currentRound">現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。 (required).</param>
        /// <param name="currentStepId">現在承認ステップID (required).</param>
        /// <param name="dealId">取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます) (required).</param>
        /// <param name="dealStatus">取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:支払済み, unsettled:支払待ち) (required).</param>
        /// <param name="description">備考 (required).</param>
        /// <param name="documentCode">請求書番号 (required).</param>
        /// <param name="id">支払依頼ID (required).</param>
        /// <param name="issueDate">発生日 (yyyy-mm-dd) (required).</param>
        /// <param name="partnerCode">取引先コード.</param>
        /// <param name="partnerId">取引先ID (required).</param>
        /// <param name="partnerName">取引先名 (required).</param>
        /// <param name="paymentDate">支払期限 (yyyy-mm-dd) (required).</param>
        /// <param name="paymentMethod">支払方法(none: 指定なし, domestic_bank_transfer: 国内振込, abroad_bank_transfer: 国外振込, account_transfer: 口座振替, credit_card: クレジットカード) (required).</param>
        /// <param name="paymentRequestLines">支払依頼の項目行一覧（配列） (required).</param>
        /// <param name="receiptIds">ファイルボックス（証憑ファイル）ID (required).</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) (required).</param>
        /// <param name="title">申請タイトル (required).</param>
        /// <param name="totalAmount">合計金額 (required).</param>
        public PaymentRequestResponsePaymentRequest(string accountName = default(string), string accountNumber = default(string), AccountTypeEnum accountType = default(AccountTypeEnum), int applicantId = default(int), string applicationDate = default(string), string applicationNumber = default(string), List<ApprovalRequestResponseApprovalRequestApprovalFlowLogs> approvalFlowLogs = default(List<ApprovalRequestResponseApprovalRequestApprovalFlowLogs>), int approvalFlowRouteId = default(int), List<ApprovalRequestResponseApprovalRequestApprovers> approvers = default(List<ApprovalRequestResponseApprovalRequestApprovers>), string bankCode = default(string), string bankName = default(string), string bankNameKana = default(string), string branchCode = default(string), string branchKana = default(string), string branchName = default(string), List<ApprovalRequestResponseApprovalRequestComments> comments = default(List<ApprovalRequestResponseApprovalRequestComments>), int companyId = default(int), int currentRound = default(int), int? currentStepId = default(int?), int? dealId = default(int?), DealStatusEnum dealStatus = default(DealStatusEnum), string description = default(string), string documentCode = default(string), int id = default(int), string issueDate = default(string), string partnerCode = default(string), int? partnerId = default(int?), string partnerName = default(string), string paymentDate = default(string), PaymentMethodEnum paymentMethod = default(PaymentMethodEnum), List<PaymentRequestResponsePaymentRequestPaymentRequestLines> paymentRequestLines = default(List<PaymentRequestResponsePaymentRequestPaymentRequestLines>), List<int> receiptIds = default(List<int>), StatusEnum status = default(StatusEnum), string title = default(string), long totalAmount = default(long))
        {
            // to ensure "accountName" is required (not null)
            if (accountName == null) {
                throw new ArgumentNullException("accountName is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.AccountName = accountName;
            // to ensure "accountNumber" is required (not null)
            if (accountNumber == null) {
                throw new ArgumentNullException("accountNumber is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.AccountNumber = accountNumber;
            this.AccountType = accountType;
            this.ApplicantId = applicantId;
            // to ensure "applicationDate" is required (not null)
            if (applicationDate == null) {
                throw new ArgumentNullException("applicationDate is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.ApplicationDate = applicationDate;
            // to ensure "applicationNumber" is required (not null)
            if (applicationNumber == null) {
                throw new ArgumentNullException("applicationNumber is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.ApplicationNumber = applicationNumber;
            // to ensure "approvalFlowLogs" is required (not null)
            if (approvalFlowLogs == null) {
                throw new ArgumentNullException("approvalFlowLogs is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.ApprovalFlowLogs = approvalFlowLogs;
            this.ApprovalFlowRouteId = approvalFlowRouteId;
            // to ensure "approvers" is required (not null)
            if (approvers == null) {
                throw new ArgumentNullException("approvers is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.Approvers = approvers;
            // to ensure "bankCode" is required (not null)
            if (bankCode == null) {
                throw new ArgumentNullException("bankCode is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.BankCode = bankCode;
            // to ensure "bankName" is required (not null)
            if (bankName == null) {
                throw new ArgumentNullException("bankName is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.BankName = bankName;
            // to ensure "bankNameKana" is required (not null)
            if (bankNameKana == null) {
                throw new ArgumentNullException("bankNameKana is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.BankNameKana = bankNameKana;
            // to ensure "branchCode" is required (not null)
            if (branchCode == null) {
                throw new ArgumentNullException("branchCode is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.BranchCode = branchCode;
            // to ensure "branchKana" is required (not null)
            if (branchKana == null) {
                throw new ArgumentNullException("branchKana is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.BranchKana = branchKana;
            // to ensure "branchName" is required (not null)
            if (branchName == null) {
                throw new ArgumentNullException("branchName is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.BranchName = branchName;
            // to ensure "comments" is required (not null)
            if (comments == null) {
                throw new ArgumentNullException("comments is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.Comments = comments;
            this.CompanyId = companyId;
            this.CurrentRound = currentRound;
            // to ensure "currentStepId" is required (not null)
            if (currentStepId == null) {
                throw new ArgumentNullException("currentStepId is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.CurrentStepId = currentStepId;
            // to ensure "dealId" is required (not null)
            if (dealId == null) {
                throw new ArgumentNullException("dealId is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.DealId = dealId;
            this.DealStatus = dealStatus;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.Description = description;
            // to ensure "documentCode" is required (not null)
            if (documentCode == null) {
                throw new ArgumentNullException("documentCode is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.DocumentCode = documentCode;
            this.Id = id;
            // to ensure "issueDate" is required (not null)
            if (issueDate == null) {
                throw new ArgumentNullException("issueDate is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.IssueDate = issueDate;
            // to ensure "partnerId" is required (not null)
            if (partnerId == null) {
                throw new ArgumentNullException("partnerId is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.PartnerId = partnerId;
            // to ensure "partnerName" is required (not null)
            if (partnerName == null) {
                throw new ArgumentNullException("partnerName is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.PartnerName = partnerName;
            // to ensure "paymentDate" is required (not null)
            if (paymentDate == null) {
                throw new ArgumentNullException("paymentDate is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.PaymentDate = paymentDate;
            this.PaymentMethod = paymentMethod;
            // to ensure "paymentRequestLines" is required (not null)
            if (paymentRequestLines == null) {
                throw new ArgumentNullException("paymentRequestLines is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.PaymentRequestLines = paymentRequestLines;
            // to ensure "receiptIds" is required (not null)
            if (receiptIds == null) {
                throw new ArgumentNullException("receiptIds is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.ReceiptIds = receiptIds;
            this.Status = status;
            // to ensure "title" is required (not null)
            if (title == null) {
                throw new ArgumentNullException("title is a required property for PaymentRequestResponsePaymentRequest and cannot be null");
            }
            this.Title = title;
            this.TotalAmount = totalAmount;
            this.PartnerCode = partnerCode;
        }

        /// <summary>
        /// 受取人名（カナ）
        /// </summary>
        /// <value>受取人名（カナ）</value>
        [DataMember(Name = "account_name", IsRequired = true, EmitDefaultValue = false)]
        public string AccountName { get; set; }

        /// <summary>
        /// 口座番号
        /// </summary>
        /// <value>口座番号</value>
        [DataMember(Name = "account_number", IsRequired = true, EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// 申請者のユーザーID
        /// </summary>
        /// <value>申請者のユーザーID</value>
        [DataMember(Name = "applicant_id", IsRequired = true, EmitDefaultValue = false)]
        public int ApplicantId { get; set; }

        /// <summary>
        /// 申請日 (yyyy-mm-dd)
        /// </summary>
        /// <value>申請日 (yyyy-mm-dd)</value>
        [DataMember(Name = "application_date", IsRequired = true, EmitDefaultValue = false)]
        public string ApplicationDate { get; set; }

        /// <summary>
        /// 申請No.
        /// </summary>
        /// <value>申請No.</value>
        [DataMember(Name = "application_number", IsRequired = true, EmitDefaultValue = false)]
        public string ApplicationNumber { get; set; }

        /// <summary>
        /// 支払依頼の承認履歴（配列）
        /// </summary>
        /// <value>支払依頼の承認履歴（配列）</value>
        [DataMember(Name = "approval_flow_logs", IsRequired = true, EmitDefaultValue = false)]
        public List<ApprovalRequestResponseApprovalRequestApprovalFlowLogs> ApprovalFlowLogs { get; set; }

        /// <summary>
        /// 申請経路ID
        /// </summary>
        /// <value>申請経路ID</value>
        [DataMember(Name = "approval_flow_route_id", IsRequired = true, EmitDefaultValue = false)]
        public int ApprovalFlowRouteId { get; set; }

        /// <summary>
        /// 承認者（配列）   承認ステップのresource_typeがunspecified (指定なし)の場合はapproversはレスポンスに含まれません。   しかし、resource_typeがunspecifiedの承認ステップにおいて誰かが承認・却下・差し戻しのいずれかのアクションを取った後は、   approversはレスポンスに含まれるようになります。   その場合approversにはアクションを行ったステップのIDとアクションを行ったユーザーのIDが含まれます。
        /// </summary>
        /// <value>承認者（配列）   承認ステップのresource_typeがunspecified (指定なし)の場合はapproversはレスポンスに含まれません。   しかし、resource_typeがunspecifiedの承認ステップにおいて誰かが承認・却下・差し戻しのいずれかのアクションを取った後は、   approversはレスポンスに含まれるようになります。   その場合approversにはアクションを行ったステップのIDとアクションを行ったユーザーのIDが含まれます。</value>
        [DataMember(Name = "approvers", IsRequired = true, EmitDefaultValue = false)]
        public List<ApprovalRequestResponseApprovalRequestApprovers> Approvers { get; set; }

        /// <summary>
        /// 銀行コード
        /// </summary>
        /// <value>銀行コード</value>
        [DataMember(Name = "bank_code", IsRequired = true, EmitDefaultValue = false)]
        public string BankCode { get; set; }

        /// <summary>
        /// 銀行名
        /// </summary>
        /// <value>銀行名</value>
        [DataMember(Name = "bank_name", IsRequired = true, EmitDefaultValue = false)]
        public string BankName { get; set; }

        /// <summary>
        /// 銀行名（カナ）
        /// </summary>
        /// <value>銀行名（カナ）</value>
        [DataMember(Name = "bank_name_kana", IsRequired = true, EmitDefaultValue = false)]
        public string BankNameKana { get; set; }

        /// <summary>
        /// 支店番号
        /// </summary>
        /// <value>支店番号</value>
        [DataMember(Name = "branch_code", IsRequired = true, EmitDefaultValue = false)]
        public string BranchCode { get; set; }

        /// <summary>
        /// 支店名（カナ）
        /// </summary>
        /// <value>支店名（カナ）</value>
        [DataMember(Name = "branch_kana", IsRequired = true, EmitDefaultValue = false)]
        public string BranchKana { get; set; }

        /// <summary>
        /// 支店名
        /// </summary>
        /// <value>支店名</value>
        [DataMember(Name = "branch_name", IsRequired = true, EmitDefaultValue = false)]
        public string BranchName { get; set; }

        /// <summary>
        /// 支払依頼のコメント一覧（配列）
        /// </summary>
        /// <value>支払依頼のコメント一覧（配列）</value>
        [DataMember(Name = "comments", IsRequired = true, EmitDefaultValue = false)]
        public List<ApprovalRequestResponseApprovalRequestComments> Comments { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// 現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。
        /// </summary>
        /// <value>現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。</value>
        [DataMember(Name = "current_round", IsRequired = true, EmitDefaultValue = false)]
        public int CurrentRound { get; set; }

        /// <summary>
        /// 現在承認ステップID
        /// </summary>
        /// <value>現在承認ステップID</value>
        [DataMember(Name = "current_step_id", IsRequired = true, EmitDefaultValue = true)]
        public int? CurrentStepId { get; set; }

        /// <summary>
        /// 取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます)
        /// </summary>
        /// <value>取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます)</value>
        [DataMember(Name = "deal_id", IsRequired = true, EmitDefaultValue = true)]
        public int? DealId { get; set; }

        /// <summary>
        /// 備考
        /// </summary>
        /// <value>備考</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// 請求書番号
        /// </summary>
        /// <value>請求書番号</value>
        [DataMember(Name = "document_code", IsRequired = true, EmitDefaultValue = false)]
        public string DocumentCode { get; set; }

        /// <summary>
        /// 支払依頼ID
        /// </summary>
        /// <value>支払依頼ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// 発生日 (yyyy-mm-dd)
        /// </summary>
        /// <value>発生日 (yyyy-mm-dd)</value>
        [DataMember(Name = "issue_date", IsRequired = true, EmitDefaultValue = false)]
        public string IssueDate { get; set; }

        /// <summary>
        /// 取引先コード
        /// </summary>
        /// <value>取引先コード</value>
        [DataMember(Name = "partner_code", EmitDefaultValue = true)]
        public string PartnerCode { get; set; }

        /// <summary>
        /// 取引先ID
        /// </summary>
        /// <value>取引先ID</value>
        [DataMember(Name = "partner_id", IsRequired = true, EmitDefaultValue = true)]
        public int? PartnerId { get; set; }

        /// <summary>
        /// 取引先名
        /// </summary>
        /// <value>取引先名</value>
        [DataMember(Name = "partner_name", IsRequired = true, EmitDefaultValue = true)]
        public string PartnerName { get; set; }

        /// <summary>
        /// 支払期限 (yyyy-mm-dd)
        /// </summary>
        /// <value>支払期限 (yyyy-mm-dd)</value>
        [DataMember(Name = "payment_date", IsRequired = true, EmitDefaultValue = true)]
        public string PaymentDate { get; set; }

        /// <summary>
        /// 支払依頼の項目行一覧（配列）
        /// </summary>
        /// <value>支払依頼の項目行一覧（配列）</value>
        [DataMember(Name = "payment_request_lines", IsRequired = true, EmitDefaultValue = false)]
        public List<PaymentRequestResponsePaymentRequestPaymentRequestLines> PaymentRequestLines { get; set; }

        /// <summary>
        /// ファイルボックス（証憑ファイル）ID
        /// </summary>
        /// <value>ファイルボックス（証憑ファイル）ID</value>
        [DataMember(Name = "receipt_ids", IsRequired = true, EmitDefaultValue = false)]
        public List<int> ReceiptIds { get; set; }

        /// <summary>
        /// 申請タイトル
        /// </summary>
        /// <value>申請タイトル</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// 合計金額
        /// </summary>
        /// <value>合計金額</value>
        [DataMember(Name = "total_amount", IsRequired = true, EmitDefaultValue = false)]
        public long TotalAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentRequestResponsePaymentRequest {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  ApplicantId: ").Append(ApplicantId).Append("\n");
            sb.Append("  ApplicationDate: ").Append(ApplicationDate).Append("\n");
            sb.Append("  ApplicationNumber: ").Append(ApplicationNumber).Append("\n");
            sb.Append("  ApprovalFlowLogs: ").Append(ApprovalFlowLogs).Append("\n");
            sb.Append("  ApprovalFlowRouteId: ").Append(ApprovalFlowRouteId).Append("\n");
            sb.Append("  Approvers: ").Append(Approvers).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankNameKana: ").Append(BankNameKana).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  BranchKana: ").Append(BranchKana).Append("\n");
            sb.Append("  BranchName: ").Append(BranchName).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CurrentRound: ").Append(CurrentRound).Append("\n");
            sb.Append("  CurrentStepId: ").Append(CurrentStepId).Append("\n");
            sb.Append("  DealId: ").Append(DealId).Append("\n");
            sb.Append("  DealStatus: ").Append(DealStatus).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DocumentCode: ").Append(DocumentCode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  PartnerCode: ").Append(PartnerCode).Append("\n");
            sb.Append("  PartnerId: ").Append(PartnerId).Append("\n");
            sb.Append("  PartnerName: ").Append(PartnerName).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentRequestLines: ").Append(PaymentRequestLines).Append("\n");
            sb.Append("  ReceiptIds: ").Append(ReceiptIds).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRequestResponsePaymentRequest);
        }

        /// <summary>
        /// Returns true if PaymentRequestResponsePaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRequestResponsePaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequestResponsePaymentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    this.AccountType.Equals(input.AccountType)
                ) && 
                (
                    this.ApplicantId == input.ApplicantId ||
                    this.ApplicantId.Equals(input.ApplicantId)
                ) && 
                (
                    this.ApplicationDate == input.ApplicationDate ||
                    (this.ApplicationDate != null &&
                    this.ApplicationDate.Equals(input.ApplicationDate))
                ) && 
                (
                    this.ApplicationNumber == input.ApplicationNumber ||
                    (this.ApplicationNumber != null &&
                    this.ApplicationNumber.Equals(input.ApplicationNumber))
                ) && 
                (
                    this.ApprovalFlowLogs == input.ApprovalFlowLogs ||
                    this.ApprovalFlowLogs != null &&
                    input.ApprovalFlowLogs != null &&
                    this.ApprovalFlowLogs.SequenceEqual(input.ApprovalFlowLogs)
                ) && 
                (
                    this.ApprovalFlowRouteId == input.ApprovalFlowRouteId ||
                    this.ApprovalFlowRouteId.Equals(input.ApprovalFlowRouteId)
                ) && 
                (
                    this.Approvers == input.Approvers ||
                    this.Approvers != null &&
                    input.Approvers != null &&
                    this.Approvers.SequenceEqual(input.Approvers)
                ) && 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BankNameKana == input.BankNameKana ||
                    (this.BankNameKana != null &&
                    this.BankNameKana.Equals(input.BankNameKana))
                ) && 
                (
                    this.BranchCode == input.BranchCode ||
                    (this.BranchCode != null &&
                    this.BranchCode.Equals(input.BranchCode))
                ) && 
                (
                    this.BranchKana == input.BranchKana ||
                    (this.BranchKana != null &&
                    this.BranchKana.Equals(input.BranchKana))
                ) && 
                (
                    this.BranchName == input.BranchName ||
                    (this.BranchName != null &&
                    this.BranchName.Equals(input.BranchName))
                ) && 
                (
                    this.Comments == input.Comments ||
                    this.Comments != null &&
                    input.Comments != null &&
                    this.Comments.SequenceEqual(input.Comments)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.CurrentRound == input.CurrentRound ||
                    this.CurrentRound.Equals(input.CurrentRound)
                ) && 
                (
                    this.CurrentStepId == input.CurrentStepId ||
                    (this.CurrentStepId != null &&
                    this.CurrentStepId.Equals(input.CurrentStepId))
                ) && 
                (
                    this.DealId == input.DealId ||
                    (this.DealId != null &&
                    this.DealId.Equals(input.DealId))
                ) && 
                (
                    this.DealStatus == input.DealStatus ||
                    this.DealStatus.Equals(input.DealStatus)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DocumentCode == input.DocumentCode ||
                    (this.DocumentCode != null &&
                    this.DocumentCode.Equals(input.DocumentCode))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.PartnerCode == input.PartnerCode ||
                    (this.PartnerCode != null &&
                    this.PartnerCode.Equals(input.PartnerCode))
                ) && 
                (
                    this.PartnerId == input.PartnerId ||
                    (this.PartnerId != null &&
                    this.PartnerId.Equals(input.PartnerId))
                ) && 
                (
                    this.PartnerName == input.PartnerName ||
                    (this.PartnerName != null &&
                    this.PartnerName.Equals(input.PartnerName))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    this.PaymentMethod.Equals(input.PaymentMethod)
                ) && 
                (
                    this.PaymentRequestLines == input.PaymentRequestLines ||
                    this.PaymentRequestLines != null &&
                    input.PaymentRequestLines != null &&
                    this.PaymentRequestLines.SequenceEqual(input.PaymentRequestLines)
                ) && 
                (
                    this.ReceiptIds == input.ReceiptIds ||
                    this.ReceiptIds != null &&
                    input.ReceiptIds != null &&
                    this.ReceiptIds.SequenceEqual(input.ReceiptIds)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    this.TotalAmount.Equals(input.TotalAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountName != null)
                {
                    hashCode = (hashCode * 59) + this.AccountName.GetHashCode();
                }
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                hashCode = (hashCode * 59) + this.ApplicantId.GetHashCode();
                if (this.ApplicationDate != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationDate.GetHashCode();
                }
                if (this.ApplicationNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationNumber.GetHashCode();
                }
                if (this.ApprovalFlowLogs != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalFlowLogs.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ApprovalFlowRouteId.GetHashCode();
                if (this.Approvers != null)
                {
                    hashCode = (hashCode * 59) + this.Approvers.GetHashCode();
                }
                if (this.BankCode != null)
                {
                    hashCode = (hashCode * 59) + this.BankCode.GetHashCode();
                }
                if (this.BankName != null)
                {
                    hashCode = (hashCode * 59) + this.BankName.GetHashCode();
                }
                if (this.BankNameKana != null)
                {
                    hashCode = (hashCode * 59) + this.BankNameKana.GetHashCode();
                }
                if (this.BranchCode != null)
                {
                    hashCode = (hashCode * 59) + this.BranchCode.GetHashCode();
                }
                if (this.BranchKana != null)
                {
                    hashCode = (hashCode * 59) + this.BranchKana.GetHashCode();
                }
                if (this.BranchName != null)
                {
                    hashCode = (hashCode * 59) + this.BranchName.GetHashCode();
                }
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentRound.GetHashCode();
                if (this.CurrentStepId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentStepId.GetHashCode();
                }
                if (this.DealId != null)
                {
                    hashCode = (hashCode * 59) + this.DealId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DealStatus.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.DocumentCode != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.IssueDate != null)
                {
                    hashCode = (hashCode * 59) + this.IssueDate.GetHashCode();
                }
                if (this.PartnerCode != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerCode.GetHashCode();
                }
                if (this.PartnerId != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerId.GetHashCode();
                }
                if (this.PartnerName != null)
                {
                    hashCode = (hashCode * 59) + this.PartnerName.GetHashCode();
                }
                if (this.PaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                if (this.PaymentRequestLines != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentRequestLines.GetHashCode();
                }
                if (this.ReceiptIds != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiptIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                return hashCode;
            }
        }

    }

}
