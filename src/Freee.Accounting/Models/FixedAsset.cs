/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// FixedAsset
    /// </summary>
    [DataContract(Name = "fixedAsset")]
    public partial class FixedAsset : IEquatable<FixedAsset>
    {
        /// <summary>
        /// 償却方法:(少額償却: small_sum_method, 一括償却: lump_sum_method, 定額法: straight_line_method, 定率法: multiple_method, 旧定率法: old_multiple_method, 旧定額法: old_straight_line_method, 償却なし: non_depreciate_method, 任意償却: voluntary_method, 即時償却: immediate_method, 均等償却: equal_method)
        /// </summary>
        /// <value>償却方法:(少額償却: small_sum_method, 一括償却: lump_sum_method, 定額法: straight_line_method, 定率法: multiple_method, 旧定率法: old_multiple_method, 旧定額法: old_straight_line_method, 償却なし: non_depreciate_method, 任意償却: voluntary_method, 即時償却: immediate_method, 均等償却: equal_method)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DepreciationMethodEnum
        {
            /// <summary>
            /// Enum SmallSumMethod for value: small_sum_method
            /// </summary>
            [EnumMember(Value = "small_sum_method")]
            SmallSumMethod = 1,

            /// <summary>
            /// Enum LumpSumMethod for value: lump_sum_method
            /// </summary>
            [EnumMember(Value = "lump_sum_method")]
            LumpSumMethod = 2,

            /// <summary>
            /// Enum StraightLineMethod for value: straight_line_method
            /// </summary>
            [EnumMember(Value = "straight_line_method")]
            StraightLineMethod = 3,

            /// <summary>
            /// Enum MultipleMethod for value: multiple_method
            /// </summary>
            [EnumMember(Value = "multiple_method")]
            MultipleMethod = 4,

            /// <summary>
            /// Enum OldMultipleMethod for value: old_multiple_method
            /// </summary>
            [EnumMember(Value = "old_multiple_method")]
            OldMultipleMethod = 5,

            /// <summary>
            /// Enum OldStraightLineMethod for value: old_straight_line_method
            /// </summary>
            [EnumMember(Value = "old_straight_line_method")]
            OldStraightLineMethod = 6,

            /// <summary>
            /// Enum NonDepreciateMethod for value: non_depreciate_method
            /// </summary>
            [EnumMember(Value = "non_depreciate_method")]
            NonDepreciateMethod = 7,

            /// <summary>
            /// Enum VoluntaryMethod for value: voluntary_method
            /// </summary>
            [EnumMember(Value = "voluntary_method")]
            VoluntaryMethod = 8,

            /// <summary>
            /// Enum ImmediateMethod for value: immediate_method
            /// </summary>
            [EnumMember(Value = "immediate_method")]
            ImmediateMethod = 9,

            /// <summary>
            /// Enum EqualMethod for value: equal_method
            /// </summary>
            [EnumMember(Value = "equal_method")]
            EqualMethod = 10

        }


        /// <summary>
        /// 償却方法:(少額償却: small_sum_method, 一括償却: lump_sum_method, 定額法: straight_line_method, 定率法: multiple_method, 旧定率法: old_multiple_method, 旧定額法: old_straight_line_method, 償却なし: non_depreciate_method, 任意償却: voluntary_method, 即時償却: immediate_method, 均等償却: equal_method)
        /// </summary>
        /// <value>償却方法:(少額償却: small_sum_method, 一括償却: lump_sum_method, 定額法: straight_line_method, 定率法: multiple_method, 旧定率法: old_multiple_method, 旧定額法: old_straight_line_method, 償却なし: non_depreciate_method, 任意償却: voluntary_method, 即時償却: immediate_method, 均等償却: equal_method)</value>
        [DataMember(Name = "depreciation_method", EmitDefaultValue = false)]
        public DepreciationMethodEnum? DepreciationMethod { get; set; }
        /// <summary>
        /// 売却もしくは除却ステータス: (売却: sell, 除却: retire, 償却中: depreciating)
        /// </summary>
        /// <value>売却もしくは除却ステータス: (売却: sell, 除却: retire, 償却中: depreciating)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RetireTypeEnum
        {
            /// <summary>
            /// Enum Sell for value: sell
            /// </summary>
            [EnumMember(Value = "sell")]
            Sell = 1,

            /// <summary>
            /// Enum Retire for value: retire
            /// </summary>
            [EnumMember(Value = "retire")]
            Retire = 2,

            /// <summary>
            /// Enum Depreciating for value: depreciating
            /// </summary>
            [EnumMember(Value = "depreciating")]
            Depreciating = 3

        }


        /// <summary>
        /// 売却もしくは除却ステータス: (売却: sell, 除却: retire, 償却中: depreciating)
        /// </summary>
        /// <value>売却もしくは除却ステータス: (売却: sell, 除却: retire, 償却中: depreciating)</value>
        [DataMember(Name = "retire_type", EmitDefaultValue = false)]
        public RetireTypeEnum? RetireType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FixedAsset" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FixedAsset() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FixedAsset" /> class.
        /// </summary>
        /// <param name="accountItemId">勘定科目ID.</param>
        /// <param name="acquisitionCost">取得価額.</param>
        /// <param name="acquisitionDate">取得日.</param>
        /// <param name="cityName">申告先市区町村.</param>
        /// <param name="closingAccumulatedDepreciation">期末減価償却累計額.</param>
        /// <param name="closingBalance">未償却残高(期末残高).</param>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="depreciationAccountItemId">減価償却に使う勘定科目ID.</param>
        /// <param name="depreciationAmount">減価償却費.</param>
        /// <param name="depreciationMethod">償却方法:(少額償却: small_sum_method, 一括償却: lump_sum_method, 定額法: straight_line_method, 定率法: multiple_method, 旧定率法: old_multiple_method, 旧定額法: old_straight_line_method, 償却なし: non_depreciate_method, 任意償却: voluntary_method, 即時償却: immediate_method, 均等償却: equal_method).</param>
        /// <param name="id">固定資産ID (required).</param>
        /// <param name="itemId">品目ID.</param>
        /// <param name="lifeYears">耐用年数.</param>
        /// <param name="managementNumber">管理番号.</param>
        /// <param name="name">固定資産名 (required).</param>
        /// <param name="openingAccumulatedDepreciation">期首減価償却累計額.</param>
        /// <param name="openingBalance">期首残高.</param>
        /// <param name="prefectureCode">都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄.</param>
        /// <param name="retireDate">除却日、もしくは売却日.</param>
        /// <param name="retireType">売却もしくは除却ステータス: (売却: sell, 除却: retire, 償却中: depreciating).</param>
        /// <param name="sectionId">部門ID.</param>
        /// <param name="updatedAt">更新日.</param>
        public FixedAsset(int accountItemId = default(int), int acquisitionCost = default(int), DateTime acquisitionDate = default(DateTime), string cityName = default(string), int closingAccumulatedDepreciation = default(int), int closingBalance = default(int), int companyId = default(int), int depreciationAccountItemId = default(int), int depreciationAmount = default(int), DepreciationMethodEnum? depreciationMethod = default(DepreciationMethodEnum?), int id = default(int), int? itemId = default(int?), int lifeYears = default(int), string managementNumber = default(string), string name = default(string), int openingAccumulatedDepreciation = default(int), int openingBalance = default(int), int? prefectureCode = default(int?), DateTime? retireDate = default(DateTime?), RetireTypeEnum? retireType = default(RetireTypeEnum?), int? sectionId = default(int?), DateTime updatedAt = default(DateTime))
        {
            this.CompanyId = companyId;
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for FixedAsset and cannot be null");
            }
            this.Name = name;
            this.AccountItemId = accountItemId;
            this.AcquisitionCost = acquisitionCost;
            this.AcquisitionDate = acquisitionDate;
            this.CityName = cityName;
            this.ClosingAccumulatedDepreciation = closingAccumulatedDepreciation;
            this.ClosingBalance = closingBalance;
            this.DepreciationAccountItemId = depreciationAccountItemId;
            this.DepreciationAmount = depreciationAmount;
            this.DepreciationMethod = depreciationMethod;
            this.ItemId = itemId;
            this.LifeYears = lifeYears;
            this.ManagementNumber = managementNumber;
            this.OpeningAccumulatedDepreciation = openingAccumulatedDepreciation;
            this.OpeningBalance = openingBalance;
            this.PrefectureCode = prefectureCode;
            this.RetireDate = retireDate;
            this.RetireType = retireType;
            this.SectionId = sectionId;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// 勘定科目ID
        /// </summary>
        /// <value>勘定科目ID</value>
        [DataMember(Name = "account_item_id", EmitDefaultValue = false)]
        public int AccountItemId { get; set; }

        /// <summary>
        /// 取得価額
        /// </summary>
        /// <value>取得価額</value>
        [DataMember(Name = "acquisition_cost", EmitDefaultValue = false)]
        public int AcquisitionCost { get; set; }

        /// <summary>
        /// 取得日
        /// </summary>
        /// <value>取得日</value>
        [DataMember(Name = "acquisition_date", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime AcquisitionDate { get; set; }

        /// <summary>
        /// 申告先市区町村
        /// </summary>
        /// <value>申告先市区町村</value>
        [DataMember(Name = "city_name", EmitDefaultValue = true)]
        public string CityName { get; set; }

        /// <summary>
        /// 期末減価償却累計額
        /// </summary>
        /// <value>期末減価償却累計額</value>
        [DataMember(Name = "closing_accumulated_depreciation", EmitDefaultValue = false)]
        public int ClosingAccumulatedDepreciation { get; set; }

        /// <summary>
        /// 未償却残高(期末残高)
        /// </summary>
        /// <value>未償却残高(期末残高)</value>
        [DataMember(Name = "closing_balance", EmitDefaultValue = false)]
        public int ClosingBalance { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// 減価償却に使う勘定科目ID
        /// </summary>
        /// <value>減価償却に使う勘定科目ID</value>
        [DataMember(Name = "depreciation_account_item_id", EmitDefaultValue = false)]
        public int DepreciationAccountItemId { get; set; }

        /// <summary>
        /// 減価償却費
        /// </summary>
        /// <value>減価償却費</value>
        [DataMember(Name = "depreciation_amount", EmitDefaultValue = false)]
        public int DepreciationAmount { get; set; }

        /// <summary>
        /// 固定資産ID
        /// </summary>
        /// <value>固定資産ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// 品目ID
        /// </summary>
        /// <value>品目ID</value>
        [DataMember(Name = "item_id", EmitDefaultValue = true)]
        public int? ItemId { get; set; }

        /// <summary>
        /// 耐用年数
        /// </summary>
        /// <value>耐用年数</value>
        [DataMember(Name = "life_years", EmitDefaultValue = false)]
        public int LifeYears { get; set; }

        /// <summary>
        /// 管理番号
        /// </summary>
        /// <value>管理番号</value>
        [DataMember(Name = "management_number", EmitDefaultValue = true)]
        public string ManagementNumber { get; set; }

        /// <summary>
        /// 固定資産名
        /// </summary>
        /// <value>固定資産名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// 期首減価償却累計額
        /// </summary>
        /// <value>期首減価償却累計額</value>
        [DataMember(Name = "opening_accumulated_depreciation", EmitDefaultValue = false)]
        public int OpeningAccumulatedDepreciation { get; set; }

        /// <summary>
        /// 期首残高
        /// </summary>
        /// <value>期首残高</value>
        [DataMember(Name = "opening_balance", EmitDefaultValue = false)]
        public int OpeningBalance { get; set; }

        /// <summary>
        /// 都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
        /// </summary>
        /// <value>都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄</value>
        [DataMember(Name = "prefecture_code", EmitDefaultValue = true)]
        public int? PrefectureCode { get; set; }

        /// <summary>
        /// 除却日、もしくは売却日
        /// </summary>
        /// <value>除却日、もしくは売却日</value>
        [DataMember(Name = "retire_date", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? RetireDate { get; set; }

        /// <summary>
        /// 部門ID
        /// </summary>
        /// <value>部門ID</value>
        [DataMember(Name = "section_id", EmitDefaultValue = true)]
        public int? SectionId { get; set; }

        /// <summary>
        /// 更新日
        /// </summary>
        /// <value>更新日</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FixedAsset {\n");
            sb.Append("  AccountItemId: ").Append(AccountItemId).Append("\n");
            sb.Append("  AcquisitionCost: ").Append(AcquisitionCost).Append("\n");
            sb.Append("  AcquisitionDate: ").Append(AcquisitionDate).Append("\n");
            sb.Append("  CityName: ").Append(CityName).Append("\n");
            sb.Append("  ClosingAccumulatedDepreciation: ").Append(ClosingAccumulatedDepreciation).Append("\n");
            sb.Append("  ClosingBalance: ").Append(ClosingBalance).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  DepreciationAccountItemId: ").Append(DepreciationAccountItemId).Append("\n");
            sb.Append("  DepreciationAmount: ").Append(DepreciationAmount).Append("\n");
            sb.Append("  DepreciationMethod: ").Append(DepreciationMethod).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  LifeYears: ").Append(LifeYears).Append("\n");
            sb.Append("  ManagementNumber: ").Append(ManagementNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OpeningAccumulatedDepreciation: ").Append(OpeningAccumulatedDepreciation).Append("\n");
            sb.Append("  OpeningBalance: ").Append(OpeningBalance).Append("\n");
            sb.Append("  PrefectureCode: ").Append(PrefectureCode).Append("\n");
            sb.Append("  RetireDate: ").Append(RetireDate).Append("\n");
            sb.Append("  RetireType: ").Append(RetireType).Append("\n");
            sb.Append("  SectionId: ").Append(SectionId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FixedAsset);
        }

        /// <summary>
        /// Returns true if FixedAsset instances are equal
        /// </summary>
        /// <param name="input">Instance of FixedAsset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FixedAsset input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountItemId == input.AccountItemId ||
                    this.AccountItemId.Equals(input.AccountItemId)
                ) && 
                (
                    this.AcquisitionCost == input.AcquisitionCost ||
                    this.AcquisitionCost.Equals(input.AcquisitionCost)
                ) && 
                (
                    this.AcquisitionDate == input.AcquisitionDate ||
                    (this.AcquisitionDate != null &&
                    this.AcquisitionDate.Equals(input.AcquisitionDate))
                ) && 
                (
                    this.CityName == input.CityName ||
                    (this.CityName != null &&
                    this.CityName.Equals(input.CityName))
                ) && 
                (
                    this.ClosingAccumulatedDepreciation == input.ClosingAccumulatedDepreciation ||
                    this.ClosingAccumulatedDepreciation.Equals(input.ClosingAccumulatedDepreciation)
                ) && 
                (
                    this.ClosingBalance == input.ClosingBalance ||
                    this.ClosingBalance.Equals(input.ClosingBalance)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.DepreciationAccountItemId == input.DepreciationAccountItemId ||
                    this.DepreciationAccountItemId.Equals(input.DepreciationAccountItemId)
                ) && 
                (
                    this.DepreciationAmount == input.DepreciationAmount ||
                    this.DepreciationAmount.Equals(input.DepreciationAmount)
                ) && 
                (
                    this.DepreciationMethod == input.DepreciationMethod ||
                    this.DepreciationMethod.Equals(input.DepreciationMethod)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.LifeYears == input.LifeYears ||
                    this.LifeYears.Equals(input.LifeYears)
                ) && 
                (
                    this.ManagementNumber == input.ManagementNumber ||
                    (this.ManagementNumber != null &&
                    this.ManagementNumber.Equals(input.ManagementNumber))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OpeningAccumulatedDepreciation == input.OpeningAccumulatedDepreciation ||
                    this.OpeningAccumulatedDepreciation.Equals(input.OpeningAccumulatedDepreciation)
                ) && 
                (
                    this.OpeningBalance == input.OpeningBalance ||
                    this.OpeningBalance.Equals(input.OpeningBalance)
                ) && 
                (
                    this.PrefectureCode == input.PrefectureCode ||
                    (this.PrefectureCode != null &&
                    this.PrefectureCode.Equals(input.PrefectureCode))
                ) && 
                (
                    this.RetireDate == input.RetireDate ||
                    (this.RetireDate != null &&
                    this.RetireDate.Equals(input.RetireDate))
                ) && 
                (
                    this.RetireType == input.RetireType ||
                    this.RetireType.Equals(input.RetireType)
                ) && 
                (
                    this.SectionId == input.SectionId ||
                    (this.SectionId != null &&
                    this.SectionId.Equals(input.SectionId))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccountItemId.GetHashCode();
                hashCode = (hashCode * 59) + this.AcquisitionCost.GetHashCode();
                if (this.AcquisitionDate != null)
                {
                    hashCode = (hashCode * 59) + this.AcquisitionDate.GetHashCode();
                }
                if (this.CityName != null)
                {
                    hashCode = (hashCode * 59) + this.CityName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ClosingAccumulatedDepreciation.GetHashCode();
                hashCode = (hashCode * 59) + this.ClosingBalance.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.DepreciationAccountItemId.GetHashCode();
                hashCode = (hashCode * 59) + this.DepreciationAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.DepreciationMethod.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.ItemId != null)
                {
                    hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LifeYears.GetHashCode();
                if (this.ManagementNumber != null)
                {
                    hashCode = (hashCode * 59) + this.ManagementNumber.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OpeningAccumulatedDepreciation.GetHashCode();
                hashCode = (hashCode * 59) + this.OpeningBalance.GetHashCode();
                if (this.PrefectureCode != null)
                {
                    hashCode = (hashCode * 59) + this.PrefectureCode.GetHashCode();
                }
                if (this.RetireDate != null)
                {
                    hashCode = (hashCode * 59) + this.RetireDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RetireType.GetHashCode();
                if (this.SectionId != null)
                {
                    hashCode = (hashCode * 59) + this.SectionId.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
