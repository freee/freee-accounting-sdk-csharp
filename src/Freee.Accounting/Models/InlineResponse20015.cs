/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// InlineResponse20015
    /// </summary>
    [DataContract(Name = "inline_response_200_15")]
    public partial class InlineResponse20015 : IEquatable<InlineResponse20015>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20015" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse20015() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20015" /> class.
        /// </summary>
        /// <param name="meta">meta.</param>
        /// <param name="walletables">walletables (required).</param>
        public InlineResponse20015(InlineResponse20015Meta meta = default(InlineResponse20015Meta), List<Walletable> walletables = default(List<Walletable>))
        {
            // to ensure "walletables" is required (not null)
            if (walletables == null) {
                throw new ArgumentNullException("walletables is a required property for InlineResponse20015 and cannot be null");
            }
            this.Walletables = walletables;
            this.Meta = meta;
        }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", EmitDefaultValue = false)]
        public InlineResponse20015Meta Meta { get; set; }

        /// <summary>
        /// Gets or Sets Walletables
        /// </summary>
        [DataMember(Name = "walletables", IsRequired = true, EmitDefaultValue = false)]
        public List<Walletable> Walletables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20015 {\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Walletables: ").Append(Walletables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20015);
        }

        /// <summary>
        /// Returns true if InlineResponse20015 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20015 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20015 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.Walletables == input.Walletables ||
                    this.Walletables != null &&
                    input.Walletables != null &&
                    this.Walletables.SequenceEqual(input.Walletables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                if (this.Walletables != null)
                {
                    hashCode = (hashCode * 59) + this.Walletables.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
