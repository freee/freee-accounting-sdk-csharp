/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// ExpenseApplicationLineTemplateParams
    /// </summary>
    [DataContract(Name = "expenseApplicationLineTemplateParams")]
    public partial class ExpenseApplicationLineTemplateParams : IEquatable<ExpenseApplicationLineTemplateParams>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApplicationLineTemplateParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExpenseApplicationLineTemplateParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApplicationLineTemplateParams" /> class.
        /// </summary>
        /// <param name="accountItemId">勘定科目ID (required).</param>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="description">経費科目の説明 (1000文字以内).</param>
        /// <param name="itemId">品目ID.</param>
        /// <param name="lineDescription">内容の補足 (1000文字以内).</param>
        /// <param name="name">経費科目名 (100文字以内) (required).</param>
        /// <param name="requiredReceipt">添付ファイルの必須/任意&lt;br&gt; falseを指定した時は申請時の領収書の添付を任意とします。&lt;br&gt; trueを指定した時は申請時の領収書の添付を必須とします。&lt;br&gt; 未指定の時は申請時の領収書の添付を任意とします。.</param>
        /// <param name="taxCode">税区分コード（税区分のdisplay_categoryがtax_5: 5%表示の税区分, tax_r8: 軽減税率8%表示の税区分に該当するtax_codeのみ利用可能です。税区分のdisplay_categoryは /taxes/companies/{:company_id}のAPIから取得可能です。） (required).</param>
        public ExpenseApplicationLineTemplateParams(int accountItemId = default(int), int companyId = default(int), string description = default(string), int itemId = default(int), string lineDescription = default(string), string name = default(string), bool requiredReceipt = default(bool), int taxCode = default(int))
        {
            this.AccountItemId = accountItemId;
            this.CompanyId = companyId;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for ExpenseApplicationLineTemplateParams and cannot be null");
            }
            this.Name = name;
            this.TaxCode = taxCode;
            this.Description = description;
            this.ItemId = itemId;
            this.LineDescription = lineDescription;
            this.RequiredReceipt = requiredReceipt;
        }

        /// <summary>
        /// 勘定科目ID
        /// </summary>
        /// <value>勘定科目ID</value>
        [DataMember(Name = "account_item_id", IsRequired = true, EmitDefaultValue = false)]
        public int AccountItemId { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// 経費科目の説明 (1000文字以内)
        /// </summary>
        /// <value>経費科目の説明 (1000文字以内)</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// 品目ID
        /// </summary>
        /// <value>品目ID</value>
        [DataMember(Name = "item_id", EmitDefaultValue = false)]
        public int ItemId { get; set; }

        /// <summary>
        /// 内容の補足 (1000文字以内)
        /// </summary>
        /// <value>内容の補足 (1000文字以内)</value>
        [DataMember(Name = "line_description", EmitDefaultValue = false)]
        public string LineDescription { get; set; }

        /// <summary>
        /// 経費科目名 (100文字以内)
        /// </summary>
        /// <value>経費科目名 (100文字以内)</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// 添付ファイルの必須/任意&lt;br&gt; falseを指定した時は申請時の領収書の添付を任意とします。&lt;br&gt; trueを指定した時は申請時の領収書の添付を必須とします。&lt;br&gt; 未指定の時は申請時の領収書の添付を任意とします。
        /// </summary>
        /// <value>添付ファイルの必須/任意&lt;br&gt; falseを指定した時は申請時の領収書の添付を任意とします。&lt;br&gt; trueを指定した時は申請時の領収書の添付を必須とします。&lt;br&gt; 未指定の時は申請時の領収書の添付を任意とします。</value>
        [DataMember(Name = "required_receipt", EmitDefaultValue = true)]
        public bool RequiredReceipt { get; set; }

        /// <summary>
        /// 税区分コード（税区分のdisplay_categoryがtax_5: 5%表示の税区分, tax_r8: 軽減税率8%表示の税区分に該当するtax_codeのみ利用可能です。税区分のdisplay_categoryは /taxes/companies/{:company_id}のAPIから取得可能です。）
        /// </summary>
        /// <value>税区分コード（税区分のdisplay_categoryがtax_5: 5%表示の税区分, tax_r8: 軽減税率8%表示の税区分に該当するtax_codeのみ利用可能です。税区分のdisplay_categoryは /taxes/companies/{:company_id}のAPIから取得可能です。）</value>
        [DataMember(Name = "tax_code", IsRequired = true, EmitDefaultValue = false)]
        public int TaxCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExpenseApplicationLineTemplateParams {\n");
            sb.Append("  AccountItemId: ").Append(AccountItemId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  LineDescription: ").Append(LineDescription).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RequiredReceipt: ").Append(RequiredReceipt).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseApplicationLineTemplateParams);
        }

        /// <summary>
        /// Returns true if ExpenseApplicationLineTemplateParams instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseApplicationLineTemplateParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseApplicationLineTemplateParams input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountItemId == input.AccountItemId ||
                    this.AccountItemId.Equals(input.AccountItemId)
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    this.ItemId.Equals(input.ItemId)
                ) && 
                (
                    this.LineDescription == input.LineDescription ||
                    (this.LineDescription != null &&
                    this.LineDescription.Equals(input.LineDescription))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RequiredReceipt == input.RequiredReceipt ||
                    this.RequiredReceipt.Equals(input.RequiredReceipt)
                ) && 
                (
                    this.TaxCode == input.TaxCode ||
                    this.TaxCode.Equals(input.TaxCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccountItemId.GetHashCode();
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ItemId.GetHashCode();
                if (this.LineDescription != null)
                {
                    hashCode = (hashCode * 59) + this.LineDescription.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequiredReceipt.GetHashCode();
                hashCode = (hashCode * 59) + this.TaxCode.GetHashCode();
                return hashCode;
            }
        }

    }

}
