/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// JournalsResponseJournals
    /// </summary>
    [DataContract(Name = "journalsResponse_journals")]
    public partial class JournalsResponseJournals : IEquatable<JournalsResponseJournals>
    {
        /// <summary>
        /// ダウンロード形式
        /// </summary>
        /// <value>ダウンロード形式</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DownloadTypeEnum
        {
            /// <summary>
            /// Enum Csv for value: csv
            /// </summary>
            [EnumMember(Value = "csv")]
            Csv = 1,

            /// <summary>
            /// Enum Generic for value: generic
            /// </summary>
            [EnumMember(Value = "generic")]
            Generic = 2,

            /// <summary>
            /// Enum Pdf for value: pdf
            /// </summary>
            [EnumMember(Value = "pdf")]
            Pdf = 3

        }


        /// <summary>
        /// ダウンロード形式
        /// </summary>
        /// <value>ダウンロード形式</value>
        [DataMember(Name = "download_type", EmitDefaultValue = false)]
        public DownloadTypeEnum? DownloadType { get; set; }
        /// <summary>
        /// 追加出力するID項目
        /// </summary>
        /// <value>追加出力するID項目</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibleIdsEnum
        {
            /// <summary>
            /// Enum DealId for value: deal_id
            /// </summary>
            [EnumMember(Value = "deal_id")]
            DealId = 1,

            /// <summary>
            /// Enum TransferId for value: transfer_id
            /// </summary>
            [EnumMember(Value = "transfer_id")]
            TransferId = 2,

            /// <summary>
            /// Enum ManualJournalId for value: manual_journal_id
            /// </summary>
            [EnumMember(Value = "manual_journal_id")]
            ManualJournalId = 3

        }



        /// <summary>
        /// Gets or Sets VisibleIds
        /// </summary>
        [DataMember(Name = "visible_ids", EmitDefaultValue = false)]
        public List<VisibleIdsEnum> VisibleIds { get; set; }
        /// <summary>
        /// 補助科目やコメントとして出力する項目
        /// </summary>
        /// <value>補助科目やコメントとして出力する項目</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibleTagsEnum
        {
            /// <summary>
            /// Enum Partner for value: partner
            /// </summary>
            [EnumMember(Value = "partner")]
            Partner = 1,

            /// <summary>
            /// Enum Item for value: item
            /// </summary>
            [EnumMember(Value = "item")]
            Item = 2,

            /// <summary>
            /// Enum Tag for value: tag
            /// </summary>
            [EnumMember(Value = "tag")]
            Tag = 3,

            /// <summary>
            /// Enum Section for value: section
            /// </summary>
            [EnumMember(Value = "section")]
            Section = 4,

            /// <summary>
            /// Enum Description for value: description
            /// </summary>
            [EnumMember(Value = "description")]
            Description = 5,

            /// <summary>
            /// Enum WalletTxnDescription for value: wallet_txn_description
            /// </summary>
            [EnumMember(Value = "wallet_txn_description")]
            WalletTxnDescription = 6,

            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 7,

            /// <summary>
            /// Enum Segment1Tag for value: segment_1_tag
            /// </summary>
            [EnumMember(Value = "segment_1_tag")]
            Segment1Tag = 8,

            /// <summary>
            /// Enum Segment2Tag for value: segment_2_tag
            /// </summary>
            [EnumMember(Value = "segment_2_tag")]
            Segment2Tag = 9,

            /// <summary>
            /// Enum Segment3Tag for value: segment_3_tag
            /// </summary>
            [EnumMember(Value = "segment_3_tag")]
            Segment3Tag = 10

        }



        /// <summary>
        /// Gets or Sets VisibleTags
        /// </summary>
        [DataMember(Name = "visible_tags", EmitDefaultValue = false)]
        public List<VisibleTagsEnum> VisibleTags { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JournalsResponseJournals" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JournalsResponseJournals() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JournalsResponseJournals" /> class.
        /// </summary>
        /// <param name="companyId">事業所ID (required).</param>
        /// <param name="downloadType">ダウンロード形式.</param>
        /// <param name="endDate">取得終了日 (yyyy-mm-dd).</param>
        /// <param name="id">受け付けID (required).</param>
        /// <param name="messages">messages.</param>
        /// <param name="startDate">取得開始日 (yyyy-mm-dd).</param>
        /// <param name="statusUrl">ステータス確認用URL.</param>
        /// <param name="upToDate">集計結果が最新かどうか.</param>
        /// <param name="upToDateReasons">集計が最新でない場合の要因情報.</param>
        /// <param name="visibleIds">visibleIds.</param>
        /// <param name="visibleTags">visibleTags.</param>
        public JournalsResponseJournals(int companyId = default(int), DownloadTypeEnum? downloadType = default(DownloadTypeEnum?), string endDate = default(string), int id = default(int), List<string> messages = default(List<string>), string startDate = default(string), string statusUrl = default(string), bool upToDate = default(bool), List<JournalsResponseJournalsUpToDateReasons> upToDateReasons = default(List<JournalsResponseJournalsUpToDateReasons>), List<VisibleIdsEnum> visibleIds = default(List<VisibleIdsEnum>), List<VisibleTagsEnum> visibleTags = default(List<VisibleTagsEnum>))
        {
            this.CompanyId = companyId;
            this.Id = id;
            this.DownloadType = downloadType;
            this.EndDate = endDate;
            this.Messages = messages;
            this.StartDate = startDate;
            this.StatusUrl = statusUrl;
            this.UpToDate = upToDate;
            this.UpToDateReasons = upToDateReasons;
            this.VisibleIds = visibleIds;
            this.VisibleTags = visibleTags;
        }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "company_id", IsRequired = true, EmitDefaultValue = false)]
        public int CompanyId { get; set; }

        /// <summary>
        /// 取得終了日 (yyyy-mm-dd)
        /// </summary>
        /// <value>取得終了日 (yyyy-mm-dd)</value>
        [DataMember(Name = "end_date", EmitDefaultValue = false)]
        public string EndDate { get; set; }

        /// <summary>
        /// 受け付けID
        /// </summary>
        /// <value>受け付けID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name = "messages", EmitDefaultValue = false)]
        public List<string> Messages { get; set; }

        /// <summary>
        /// 取得開始日 (yyyy-mm-dd)
        /// </summary>
        /// <value>取得開始日 (yyyy-mm-dd)</value>
        [DataMember(Name = "start_date", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// ステータス確認用URL
        /// </summary>
        /// <value>ステータス確認用URL</value>
        [DataMember(Name = "status_url", EmitDefaultValue = false)]
        public string StatusUrl { get; set; }

        /// <summary>
        /// 集計結果が最新かどうか
        /// </summary>
        /// <value>集計結果が最新かどうか</value>
        [DataMember(Name = "up_to_date", EmitDefaultValue = true)]
        public bool UpToDate { get; set; }

        /// <summary>
        /// 集計が最新でない場合の要因情報
        /// </summary>
        /// <value>集計が最新でない場合の要因情報</value>
        [DataMember(Name = "up_to_date_reasons", EmitDefaultValue = false)]
        public List<JournalsResponseJournalsUpToDateReasons> UpToDateReasons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JournalsResponseJournals {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  DownloadType: ").Append(DownloadType).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StatusUrl: ").Append(StatusUrl).Append("\n");
            sb.Append("  UpToDate: ").Append(UpToDate).Append("\n");
            sb.Append("  UpToDateReasons: ").Append(UpToDateReasons).Append("\n");
            sb.Append("  VisibleIds: ").Append(VisibleIds).Append("\n");
            sb.Append("  VisibleTags: ").Append(VisibleTags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JournalsResponseJournals);
        }

        /// <summary>
        /// Returns true if JournalsResponseJournals instances are equal
        /// </summary>
        /// <param name="input">Instance of JournalsResponseJournals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JournalsResponseJournals input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompanyId == input.CompanyId ||
                    this.CompanyId.Equals(input.CompanyId)
                ) && 
                (
                    this.DownloadType == input.DownloadType ||
                    this.DownloadType.Equals(input.DownloadType)
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.StatusUrl == input.StatusUrl ||
                    (this.StatusUrl != null &&
                    this.StatusUrl.Equals(input.StatusUrl))
                ) && 
                (
                    this.UpToDate == input.UpToDate ||
                    this.UpToDate.Equals(input.UpToDate)
                ) && 
                (
                    this.UpToDateReasons == input.UpToDateReasons ||
                    this.UpToDateReasons != null &&
                    input.UpToDateReasons != null &&
                    this.UpToDateReasons.SequenceEqual(input.UpToDateReasons)
                ) && 
                (
                    this.VisibleIds == input.VisibleIds ||
                    this.VisibleIds.SequenceEqual(input.VisibleIds)
                ) && 
                (
                    this.VisibleTags == input.VisibleTags ||
                    this.VisibleTags.SequenceEqual(input.VisibleTags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CompanyId.GetHashCode();
                hashCode = (hashCode * 59) + this.DownloadType.GetHashCode();
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Messages != null)
                {
                    hashCode = (hashCode * 59) + this.Messages.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.StatusUrl != null)
                {
                    hashCode = (hashCode * 59) + this.StatusUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpToDate.GetHashCode();
                if (this.UpToDateReasons != null)
                {
                    hashCode = (hashCode * 59) + this.UpToDateReasons.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VisibleIds.GetHashCode();
                hashCode = (hashCode * 59) + this.VisibleTags.GetHashCode();
                return hashCode;
            }
        }

    }

}
