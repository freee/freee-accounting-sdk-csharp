/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// CompanyResponseCompanyAccountItems
    /// </summary>
    [DataContract(Name = "companyResponse_company_account_items")]
    public partial class CompanyResponseCompanyAccountItems : IEquatable<CompanyResponseCompanyAccountItems>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyResponseCompanyAccountItems" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompanyResponseCompanyAccountItems() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyResponseCompanyAccountItems" /> class.
        /// </summary>
        /// <param name="categories">categories (required).</param>
        /// <param name="defaultTaxId">デフォルト設定がされている税区分ID.</param>
        /// <param name="id">勘定科目ID (required).</param>
        /// <param name="name">勘定科目名 (30文字以内) (required).</param>
        /// <param name="shortcut">ショートカット1 (20文字以内).</param>
        public CompanyResponseCompanyAccountItems(List<string> categories = default(List<string>), int defaultTaxId = default(int), int id = default(int), string name = default(string), string shortcut = default(string))
        {
            // to ensure "categories" is required (not null)
            if (categories == null) {
                throw new ArgumentNullException("categories is a required property for CompanyResponseCompanyAccountItems and cannot be null");
            }
            this.Categories = categories;
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for CompanyResponseCompanyAccountItems and cannot be null");
            }
            this.Name = name;
            this.DefaultTaxId = defaultTaxId;
            this.Shortcut = shortcut;
        }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name = "categories", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// デフォルト設定がされている税区分ID
        /// </summary>
        /// <value>デフォルト設定がされている税区分ID</value>
        [DataMember(Name = "default_tax_id", EmitDefaultValue = false)]
        public int DefaultTaxId { get; set; }

        /// <summary>
        /// 勘定科目ID
        /// </summary>
        /// <value>勘定科目ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// 勘定科目名 (30文字以内)
        /// </summary>
        /// <value>勘定科目名 (30文字以内)</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// ショートカット1 (20文字以内)
        /// </summary>
        /// <value>ショートカット1 (20文字以内)</value>
        [DataMember(Name = "shortcut", EmitDefaultValue = true)]
        public string Shortcut { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyResponseCompanyAccountItems {\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  DefaultTaxId: ").Append(DefaultTaxId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Shortcut: ").Append(Shortcut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyResponseCompanyAccountItems);
        }

        /// <summary>
        /// Returns true if CompanyResponseCompanyAccountItems instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyResponseCompanyAccountItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyResponseCompanyAccountItems input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.DefaultTaxId == input.DefaultTaxId ||
                    this.DefaultTaxId.Equals(input.DefaultTaxId)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Shortcut == input.Shortcut ||
                    (this.Shortcut != null &&
                    this.Shortcut.Equals(input.Shortcut))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Categories != null)
                {
                    hashCode = (hashCode * 59) + this.Categories.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultTaxId.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Shortcut != null)
                {
                    hashCode = (hashCode * 59) + this.Shortcut.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
