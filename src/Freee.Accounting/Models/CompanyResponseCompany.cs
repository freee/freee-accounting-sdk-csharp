/*
 * freee API
 *
 *  <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <pre><code>【重要】会計freee APIの新バージョンについて 2020年12月まで、2つのバージョンが利用できる状態です。古いものは2020年12月に利用不可となります。<br> 新しいAPIを利用するにはリクエストヘッダーに以下を指定します。 X-Api-Version: 2020-06-15<br> 指定がない場合は2020年12月に廃止予定のAPIを利用することとなります。<br> 【重要】APIのバージョン指定をせずに利用し続ける場合 2020年12月に新しいバージョンのAPIに自動的に切り替わります。 詳細は、<a href=\"https://developer.freee.co.jp/release-note/2948\" target=\"_blank\">リリースノート</a>をご覧ください。<br> 旧バージョンのAPIリファレンスを確認したい場合は、<a href=\"https://freee.github.io/freee-api-schema/\" target=\"_blank\">旧バージョンのAPIリファレンスページ</a>をご覧ください。 </code></pre>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsエンドポイント</h4>  <p>freeeは/reportsエンドポイントに対して1秒間に10以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// CompanyResponseCompany
    /// </summary>
    [DataContract(Name = "companyResponse_company")]
    public partial class CompanyResponseCompany : IEquatable<CompanyResponseCompany>
    {
        /// <summary>
        /// 種別（agriculture_forestry_fisheries_ore: 農林水産業/鉱業、construction: 建設、manufacturing_processing: 製造/加工、it: IT、transportation_logistics: 運輸/物流、retail_wholesale: 小売/卸売、finance_insurance: 金融/保険、real_estate_rental: 不動産/レンタル、profession: 士業/学術/専門技術サービス、design_production: デザイン/制作、food: 飲食、leisure_entertainment: レジャー/娯楽、lifestyle: 生活関連サービス、education: 教育/学習支援、medical_welfare: 医療/福祉、other_services: その他サービス、other: その他）
        /// </summary>
        /// <value>種別（agriculture_forestry_fisheries_ore: 農林水産業/鉱業、construction: 建設、manufacturing_processing: 製造/加工、it: IT、transportation_logistics: 運輸/物流、retail_wholesale: 小売/卸売、finance_insurance: 金融/保険、real_estate_rental: 不動産/レンタル、profession: 士業/学術/専門技術サービス、design_production: デザイン/制作、food: 飲食、leisure_entertainment: レジャー/娯楽、lifestyle: 生活関連サービス、education: 教育/学習支援、medical_welfare: 医療/福祉、other_services: その他サービス、other: その他）</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IndustryClassEnum
        {
            /// <summary>
            /// Enum Agricultureforestryfisheriesore for value: agriculture_forestry_fisheries_ore
            /// </summary>
            [EnumMember(Value = "agriculture_forestry_fisheries_ore")]
            Agricultureforestryfisheriesore = 1,

            /// <summary>
            /// Enum Construction for value: construction
            /// </summary>
            [EnumMember(Value = "construction")]
            Construction = 2,

            /// <summary>
            /// Enum Manufacturingprocessing for value: manufacturing_processing
            /// </summary>
            [EnumMember(Value = "manufacturing_processing")]
            Manufacturingprocessing = 3,

            /// <summary>
            /// Enum It for value: it
            /// </summary>
            [EnumMember(Value = "it")]
            It = 4,

            /// <summary>
            /// Enum Transportationlogistics for value: transportation_logistics
            /// </summary>
            [EnumMember(Value = "transportation_logistics")]
            Transportationlogistics = 5,

            /// <summary>
            /// Enum Retailwholesale for value: retail_wholesale
            /// </summary>
            [EnumMember(Value = "retail_wholesale")]
            Retailwholesale = 6,

            /// <summary>
            /// Enum Financeinsurance for value: finance_insurance
            /// </summary>
            [EnumMember(Value = "finance_insurance")]
            Financeinsurance = 7,

            /// <summary>
            /// Enum Realestaterental for value: real_estate_rental
            /// </summary>
            [EnumMember(Value = "real_estate_rental")]
            Realestaterental = 8,

            /// <summary>
            /// Enum Profession for value: profession
            /// </summary>
            [EnumMember(Value = "profession")]
            Profession = 9,

            /// <summary>
            /// Enum Designproduction for value: design_production
            /// </summary>
            [EnumMember(Value = "design_production")]
            Designproduction = 10,

            /// <summary>
            /// Enum Food for value: food
            /// </summary>
            [EnumMember(Value = "food")]
            Food = 11,

            /// <summary>
            /// Enum Leisureentertainment for value: leisure_entertainment
            /// </summary>
            [EnumMember(Value = "leisure_entertainment")]
            Leisureentertainment = 12,

            /// <summary>
            /// Enum Lifestyle for value: lifestyle
            /// </summary>
            [EnumMember(Value = "lifestyle")]
            Lifestyle = 13,

            /// <summary>
            /// Enum Education for value: education
            /// </summary>
            [EnumMember(Value = "education")]
            Education = 14,

            /// <summary>
            /// Enum Medicalwelfare for value: medical_welfare
            /// </summary>
            [EnumMember(Value = "medical_welfare")]
            Medicalwelfare = 15,

            /// <summary>
            /// Enum Otherservices for value: other_services
            /// </summary>
            [EnumMember(Value = "other_services")]
            Otherservices = 16,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 17

        }

        /// <summary>
        /// 種別（agriculture_forestry_fisheries_ore: 農林水産業/鉱業、construction: 建設、manufacturing_processing: 製造/加工、it: IT、transportation_logistics: 運輸/物流、retail_wholesale: 小売/卸売、finance_insurance: 金融/保険、real_estate_rental: 不動産/レンタル、profession: 士業/学術/専門技術サービス、design_production: デザイン/制作、food: 飲食、leisure_entertainment: レジャー/娯楽、lifestyle: 生活関連サービス、education: 教育/学習支援、medical_welfare: 医療/福祉、other_services: その他サービス、other: その他）
        /// </summary>
        /// <value>種別（agriculture_forestry_fisheries_ore: 農林水産業/鉱業、construction: 建設、manufacturing_processing: 製造/加工、it: IT、transportation_logistics: 運輸/物流、retail_wholesale: 小売/卸売、finance_insurance: 金融/保険、real_estate_rental: 不動産/レンタル、profession: 士業/学術/専門技術サービス、design_production: デザイン/制作、food: 飲食、leisure_entertainment: レジャー/娯楽、lifestyle: 生活関連サービス、education: 教育/学習支援、medical_welfare: 医療/福祉、other_services: その他サービス、other: その他）</value>
        [DataMember(Name = "industry_class", IsRequired = true, EmitDefaultValue = false)]
        public IndustryClassEnum IndustryClass { get; set; }
        /// <summary>
        /// 業種（agriculture: 農業, forestry: 林業, fishing_industry: 漁業、水産養殖業, mining: 鉱業、採石業、砂利採取業, civil_contractors: 土木工事業, pavement: 舗装工事業, carpenter: とび、大工、左官等の建設工事業, renovation: リフォーム工事業, electrical_plumbing: 電気、管工事等の設備工事業, grocery: 食料品の製造加工業, machinery_manufacturing: 機械器具の製造加工業, printing: 印刷業, other_manufacturing: その他の製造加工業, software_development: 受託：ソフトウェア、アプリ開発業, system_development: 受託：システム開発業, survey_analysis: 受託：調査、分析等の情報処理業, server_management: 受託：サーバー運営管理, website_production: 受託：ウェブサイト制作, online_service_management: オンラインサービス運営業, online_advertising_agency: オンライン広告代理店業, online_advertising_planning_production: オンライン広告企画・制作業, online_media_management: オンラインメディア運営業, portal_site_management: ポータルサイト運営業, other_it_services: その他、IT サービス業, transport_delivery: 輸送業、配送業, delivery: バイク便等の配達業, other_transportation_logistics: その他の運輸業、物流業, other_wholesale: 卸売業：その他, clothing_wholesale_fiber: 卸売業：衣類卸売／繊維, food_wholesale: 卸売業：飲食料品, entrusted_development_wholesale: 卸売業：機械器具, online_shop: 小売業：無店舗　オンラインショップ, fashion_grocery_store: 小売業：店舗あり　ファッション、雑貨, food_store: 小売業：店舗あり　生鮮食品、飲食料品, entrusted_store: 小売業：店舗あり　機械、器具, other_store: 小売業：店舗あり　その他, financial_instruments_exchange: 金融業：金融商品取引, commodity_futures_investment_advisor: 金融業：商品先物取引、商品投資顧問, other_financial: 金融業：その他, brokerage_insurance: 保険業：仲介、代理, other_insurance: 保険業：その他, real_estate_developer: 不動産業：ディベロッパー, real_estate_brokerage: 不動産業：売買、仲介, rent_coin_parking_management: 不動産業：賃貸、コインパーキング、管理, rental_office_co_working_space: 不動産業：レンタルオフィス、コワーキングスペース, rental_lease: レンタル業、リース業, cpa_tax_accountant: 士業：公認会計士事務所、税理士事務所, law_office: 士業：法律事務所, judicial_and_administrative_scrivener: 士業：司法書士事務所／行政書士事務所, labor_consultant: 士業：社会保険労務士事務所, other_profession: 士業：その他, business_consultant: 経営コンサルタント, academic_research_development: 学術・開発研究機関, advertising_agency: 広告代理店, advertising_planning_production: 広告企画／制作, design_development: ソフトウェア、アプリ開発業（受託）, apparel_industry_design: 服飾デザイン業、工業デザイン業, website_design: ウェブサイト制作（受託）, advertising_planning_design: 広告企画／制作業, other_design: その他、デザイン／制作, restaurants_coffee_shops: レストラン、喫茶店等の飲食店業, sale_of_lunch: 弁当の販売業, bread_confectionery_manufacture_sale: パン、菓子等の製造販売業, delivery_catering_mobile_catering: デリバリー業、ケータリング業、移動販売業, hotel_inn: 宿泊業：ホテル、旅館, homestay: 宿泊業：民泊, travel_agency: 旅行代理店業, leisure_sports_facility_management: レジャー、スポーツ等の施設運営業, show_event_management: ショー、イベント等の興行、イベント運営業, barber: ビューティ、ヘルスケア業：床屋、理容室, beauty_salon: ビューティ、ヘルスケア業：美容室, spa_sand_bath_sauna: ビューティ、ヘルスケア業：スパ、砂風呂、サウナ等, este_ail_salon: ビューティ、ヘルスケア業：その他、エステサロン、ネイルサロン等, bridal_planning_introduce_wedding: 冠婚葬祭業：ブライダルプランニング、結婚式場紹介等, memorial_ceremony_funeral: 冠婚葬祭業：メモリアルセレモニー、葬儀等, moving: 引っ越し業, courier_industry: 宅配業, house_maid_cleaning_agency: 家事代行サービス業：無店舗　ハウスメイド、掃除代行等, re_tailoring_clothes: 家事代行サービス業：店舗あり　衣類修理、衣類仕立て直し等, training_institute_management: 研修所等の施設運営業, tutoring_school: 学習塾、進学塾等の教育・学習支援業, music_calligraphy_abacus_classroom: 音楽教室、書道教室、そろばん教室等のの教育・学習支援業, english_school: 英会話スクール等の語学学習支援業, tennis_yoga_judo_school: テニススクール、ヨガ教室、柔道場等のスポーツ指導、支援業, culture_school: その他、カルチャースクール等の教育・学習支援業, seminar_planning_management: セミナー等の企画、運営業, hospital_clinic: 医療業：病院、一般診療所、クリニック等, dental_clinic: 医療業：歯科診療所, other_medical_services: 医療業：その他、医療サービス等, nursery: 福祉業：保育所等、児童向け施設型サービス, nursing_home: 福祉業：老人ホーム等、老人向け施設型サービス, rehabilitation_support_services: 福祉業：療育支援サービス等、障害者等向け施設型サービス, other_welfare: 福祉業：その他、施設型福祉サービス, visit_welfare_service: 福祉業：訪問型福祉サービス, recruitment_temporary_staffing: 人材紹介業、人材派遣業, life_related_recruitment_temporary_staffing: 生活関連サービスの人材紹介業、人材派遣業, car_maintenance_car_repair: 自動車整備業、自動車修理業, machinery_equipment_maintenance_repair: 機械機器類の整備業、修理業, cleaning_maintenance_building_management: 清掃業、メンテナンス業、建物管理業, security: 警備業, other_services: その他のサービス業, npo: NPO, general_incorporated_association: 一般社団法人, general_incorporated_foundation: 一般財団法人, other_association: その他組織)
        /// </summary>
        /// <value>業種（agriculture: 農業, forestry: 林業, fishing_industry: 漁業、水産養殖業, mining: 鉱業、採石業、砂利採取業, civil_contractors: 土木工事業, pavement: 舗装工事業, carpenter: とび、大工、左官等の建設工事業, renovation: リフォーム工事業, electrical_plumbing: 電気、管工事等の設備工事業, grocery: 食料品の製造加工業, machinery_manufacturing: 機械器具の製造加工業, printing: 印刷業, other_manufacturing: その他の製造加工業, software_development: 受託：ソフトウェア、アプリ開発業, system_development: 受託：システム開発業, survey_analysis: 受託：調査、分析等の情報処理業, server_management: 受託：サーバー運営管理, website_production: 受託：ウェブサイト制作, online_service_management: オンラインサービス運営業, online_advertising_agency: オンライン広告代理店業, online_advertising_planning_production: オンライン広告企画・制作業, online_media_management: オンラインメディア運営業, portal_site_management: ポータルサイト運営業, other_it_services: その他、IT サービス業, transport_delivery: 輸送業、配送業, delivery: バイク便等の配達業, other_transportation_logistics: その他の運輸業、物流業, other_wholesale: 卸売業：その他, clothing_wholesale_fiber: 卸売業：衣類卸売／繊維, food_wholesale: 卸売業：飲食料品, entrusted_development_wholesale: 卸売業：機械器具, online_shop: 小売業：無店舗　オンラインショップ, fashion_grocery_store: 小売業：店舗あり　ファッション、雑貨, food_store: 小売業：店舗あり　生鮮食品、飲食料品, entrusted_store: 小売業：店舗あり　機械、器具, other_store: 小売業：店舗あり　その他, financial_instruments_exchange: 金融業：金融商品取引, commodity_futures_investment_advisor: 金融業：商品先物取引、商品投資顧問, other_financial: 金融業：その他, brokerage_insurance: 保険業：仲介、代理, other_insurance: 保険業：その他, real_estate_developer: 不動産業：ディベロッパー, real_estate_brokerage: 不動産業：売買、仲介, rent_coin_parking_management: 不動産業：賃貸、コインパーキング、管理, rental_office_co_working_space: 不動産業：レンタルオフィス、コワーキングスペース, rental_lease: レンタル業、リース業, cpa_tax_accountant: 士業：公認会計士事務所、税理士事務所, law_office: 士業：法律事務所, judicial_and_administrative_scrivener: 士業：司法書士事務所／行政書士事務所, labor_consultant: 士業：社会保険労務士事務所, other_profession: 士業：その他, business_consultant: 経営コンサルタント, academic_research_development: 学術・開発研究機関, advertising_agency: 広告代理店, advertising_planning_production: 広告企画／制作, design_development: ソフトウェア、アプリ開発業（受託）, apparel_industry_design: 服飾デザイン業、工業デザイン業, website_design: ウェブサイト制作（受託）, advertising_planning_design: 広告企画／制作業, other_design: その他、デザイン／制作, restaurants_coffee_shops: レストラン、喫茶店等の飲食店業, sale_of_lunch: 弁当の販売業, bread_confectionery_manufacture_sale: パン、菓子等の製造販売業, delivery_catering_mobile_catering: デリバリー業、ケータリング業、移動販売業, hotel_inn: 宿泊業：ホテル、旅館, homestay: 宿泊業：民泊, travel_agency: 旅行代理店業, leisure_sports_facility_management: レジャー、スポーツ等の施設運営業, show_event_management: ショー、イベント等の興行、イベント運営業, barber: ビューティ、ヘルスケア業：床屋、理容室, beauty_salon: ビューティ、ヘルスケア業：美容室, spa_sand_bath_sauna: ビューティ、ヘルスケア業：スパ、砂風呂、サウナ等, este_ail_salon: ビューティ、ヘルスケア業：その他、エステサロン、ネイルサロン等, bridal_planning_introduce_wedding: 冠婚葬祭業：ブライダルプランニング、結婚式場紹介等, memorial_ceremony_funeral: 冠婚葬祭業：メモリアルセレモニー、葬儀等, moving: 引っ越し業, courier_industry: 宅配業, house_maid_cleaning_agency: 家事代行サービス業：無店舗　ハウスメイド、掃除代行等, re_tailoring_clothes: 家事代行サービス業：店舗あり　衣類修理、衣類仕立て直し等, training_institute_management: 研修所等の施設運営業, tutoring_school: 学習塾、進学塾等の教育・学習支援業, music_calligraphy_abacus_classroom: 音楽教室、書道教室、そろばん教室等のの教育・学習支援業, english_school: 英会話スクール等の語学学習支援業, tennis_yoga_judo_school: テニススクール、ヨガ教室、柔道場等のスポーツ指導、支援業, culture_school: その他、カルチャースクール等の教育・学習支援業, seminar_planning_management: セミナー等の企画、運営業, hospital_clinic: 医療業：病院、一般診療所、クリニック等, dental_clinic: 医療業：歯科診療所, other_medical_services: 医療業：その他、医療サービス等, nursery: 福祉業：保育所等、児童向け施設型サービス, nursing_home: 福祉業：老人ホーム等、老人向け施設型サービス, rehabilitation_support_services: 福祉業：療育支援サービス等、障害者等向け施設型サービス, other_welfare: 福祉業：その他、施設型福祉サービス, visit_welfare_service: 福祉業：訪問型福祉サービス, recruitment_temporary_staffing: 人材紹介業、人材派遣業, life_related_recruitment_temporary_staffing: 生活関連サービスの人材紹介業、人材派遣業, car_maintenance_car_repair: 自動車整備業、自動車修理業, machinery_equipment_maintenance_repair: 機械機器類の整備業、修理業, cleaning_maintenance_building_management: 清掃業、メンテナンス業、建物管理業, security: 警備業, other_services: その他のサービス業, npo: NPO, general_incorporated_association: 一般社団法人, general_incorporated_foundation: 一般財団法人, other_association: その他組織)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IndustryCodeEnum
        {
            /// <summary>
            /// Enum Agriculture for value: agriculture
            /// </summary>
            [EnumMember(Value = "agriculture")]
            Agriculture = 1,

            /// <summary>
            /// Enum Forestry for value: forestry
            /// </summary>
            [EnumMember(Value = "forestry")]
            Forestry = 2,

            /// <summary>
            /// Enum Fishingindustry for value: fishing_industry
            /// </summary>
            [EnumMember(Value = "fishing_industry")]
            Fishingindustry = 3,

            /// <summary>
            /// Enum Mining for value: mining
            /// </summary>
            [EnumMember(Value = "mining")]
            Mining = 4,

            /// <summary>
            /// Enum Civilcontractors for value: civil_contractors
            /// </summary>
            [EnumMember(Value = "civil_contractors")]
            Civilcontractors = 5,

            /// <summary>
            /// Enum Pavement for value: pavement
            /// </summary>
            [EnumMember(Value = "pavement")]
            Pavement = 6,

            /// <summary>
            /// Enum Carpenter for value: carpenter
            /// </summary>
            [EnumMember(Value = "carpenter")]
            Carpenter = 7,

            /// <summary>
            /// Enum Renovation for value: renovation
            /// </summary>
            [EnumMember(Value = "renovation")]
            Renovation = 8,

            /// <summary>
            /// Enum Electricalplumbing for value: electrical_plumbing
            /// </summary>
            [EnumMember(Value = "electrical_plumbing")]
            Electricalplumbing = 9,

            /// <summary>
            /// Enum Grocery for value: grocery
            /// </summary>
            [EnumMember(Value = "grocery")]
            Grocery = 10,

            /// <summary>
            /// Enum Machinerymanufacturing for value: machinery_manufacturing
            /// </summary>
            [EnumMember(Value = "machinery_manufacturing")]
            Machinerymanufacturing = 11,

            /// <summary>
            /// Enum Printing for value: printing
            /// </summary>
            [EnumMember(Value = "printing")]
            Printing = 12,

            /// <summary>
            /// Enum Othermanufacturing for value: other_manufacturing
            /// </summary>
            [EnumMember(Value = "other_manufacturing")]
            Othermanufacturing = 13,

            /// <summary>
            /// Enum Softwaredevelopment for value: software_development
            /// </summary>
            [EnumMember(Value = "software_development")]
            Softwaredevelopment = 14,

            /// <summary>
            /// Enum Systemdevelopment for value: system_development
            /// </summary>
            [EnumMember(Value = "system_development")]
            Systemdevelopment = 15,

            /// <summary>
            /// Enum Surveyanalysis for value: survey_analysis
            /// </summary>
            [EnumMember(Value = "survey_analysis")]
            Surveyanalysis = 16,

            /// <summary>
            /// Enum Servermanagement for value: server_management
            /// </summary>
            [EnumMember(Value = "server_management")]
            Servermanagement = 17,

            /// <summary>
            /// Enum Websiteproduction for value: website_production
            /// </summary>
            [EnumMember(Value = "website_production")]
            Websiteproduction = 18,

            /// <summary>
            /// Enum Onlineservicemanagement for value: online_service_management
            /// </summary>
            [EnumMember(Value = "online_service_management")]
            Onlineservicemanagement = 19,

            /// <summary>
            /// Enum Onlineadvertisingagency for value: online_advertising_agency
            /// </summary>
            [EnumMember(Value = "online_advertising_agency")]
            Onlineadvertisingagency = 20,

            /// <summary>
            /// Enum Onlineadvertisingplanningproduction for value: online_advertising_planning_production
            /// </summary>
            [EnumMember(Value = "online_advertising_planning_production")]
            Onlineadvertisingplanningproduction = 21,

            /// <summary>
            /// Enum Onlinemediamanagement for value: online_media_management
            /// </summary>
            [EnumMember(Value = "online_media_management")]
            Onlinemediamanagement = 22,

            /// <summary>
            /// Enum Portalsitemanagement for value: portal_site_management
            /// </summary>
            [EnumMember(Value = "portal_site_management")]
            Portalsitemanagement = 23,

            /// <summary>
            /// Enum Otheritservices for value: other_it_services
            /// </summary>
            [EnumMember(Value = "other_it_services")]
            Otheritservices = 24,

            /// <summary>
            /// Enum Transportdelivery for value: transport_delivery
            /// </summary>
            [EnumMember(Value = "transport_delivery")]
            Transportdelivery = 25,

            /// <summary>
            /// Enum Delivery for value: delivery
            /// </summary>
            [EnumMember(Value = "delivery")]
            Delivery = 26,

            /// <summary>
            /// Enum Othertransportationlogistics for value: other_transportation_logistics
            /// </summary>
            [EnumMember(Value = "other_transportation_logistics")]
            Othertransportationlogistics = 27,

            /// <summary>
            /// Enum Otherwholesale for value: other_wholesale
            /// </summary>
            [EnumMember(Value = "other_wholesale")]
            Otherwholesale = 28,

            /// <summary>
            /// Enum Clothingwholesalefiber for value: clothing_wholesale_fiber
            /// </summary>
            [EnumMember(Value = "clothing_wholesale_fiber")]
            Clothingwholesalefiber = 29,

            /// <summary>
            /// Enum Foodwholesale for value: food_wholesale
            /// </summary>
            [EnumMember(Value = "food_wholesale")]
            Foodwholesale = 30,

            /// <summary>
            /// Enum Entrusteddevelopmentwholesale for value: entrusted_development_wholesale
            /// </summary>
            [EnumMember(Value = "entrusted_development_wholesale")]
            Entrusteddevelopmentwholesale = 31,

            /// <summary>
            /// Enum Onlineshop for value: online_shop
            /// </summary>
            [EnumMember(Value = "online_shop")]
            Onlineshop = 32,

            /// <summary>
            /// Enum Fashiongrocerystore for value: fashion_grocery_store
            /// </summary>
            [EnumMember(Value = "fashion_grocery_store")]
            Fashiongrocerystore = 33,

            /// <summary>
            /// Enum Foodstore for value: food_store
            /// </summary>
            [EnumMember(Value = "food_store")]
            Foodstore = 34,

            /// <summary>
            /// Enum Entrustedstore for value: entrusted_store
            /// </summary>
            [EnumMember(Value = "entrusted_store")]
            Entrustedstore = 35,

            /// <summary>
            /// Enum Otherstore for value: other_store
            /// </summary>
            [EnumMember(Value = "other_store")]
            Otherstore = 36,

            /// <summary>
            /// Enum Financialinstrumentsexchange for value: financial_instruments_exchange
            /// </summary>
            [EnumMember(Value = "financial_instruments_exchange")]
            Financialinstrumentsexchange = 37,

            /// <summary>
            /// Enum Commodityfuturesinvestmentadvisor for value: commodity_futures_investment_advisor
            /// </summary>
            [EnumMember(Value = "commodity_futures_investment_advisor")]
            Commodityfuturesinvestmentadvisor = 38,

            /// <summary>
            /// Enum Otherfinancial for value: other_financial
            /// </summary>
            [EnumMember(Value = "other_financial")]
            Otherfinancial = 39,

            /// <summary>
            /// Enum Brokerageinsurance for value: brokerage_insurance
            /// </summary>
            [EnumMember(Value = "brokerage_insurance")]
            Brokerageinsurance = 40,

            /// <summary>
            /// Enum Otherinsurance for value: other_insurance
            /// </summary>
            [EnumMember(Value = "other_insurance")]
            Otherinsurance = 41,

            /// <summary>
            /// Enum Realestatedeveloper for value: real_estate_developer
            /// </summary>
            [EnumMember(Value = "real_estate_developer")]
            Realestatedeveloper = 42,

            /// <summary>
            /// Enum Realestatebrokerage for value: real_estate_brokerage
            /// </summary>
            [EnumMember(Value = "real_estate_brokerage")]
            Realestatebrokerage = 43,

            /// <summary>
            /// Enum Rentcoinparkingmanagement for value: rent_coin_parking_management
            /// </summary>
            [EnumMember(Value = "rent_coin_parking_management")]
            Rentcoinparkingmanagement = 44,

            /// <summary>
            /// Enum Rentalofficecoworkingspace for value: rental_office_co_working_space
            /// </summary>
            [EnumMember(Value = "rental_office_co_working_space")]
            Rentalofficecoworkingspace = 45,

            /// <summary>
            /// Enum Rentallease for value: rental_lease
            /// </summary>
            [EnumMember(Value = "rental_lease")]
            Rentallease = 46,

            /// <summary>
            /// Enum Cpataxaccountant for value: cpa_tax_accountant
            /// </summary>
            [EnumMember(Value = "cpa_tax_accountant")]
            Cpataxaccountant = 47,

            /// <summary>
            /// Enum Lawoffice for value: law_office
            /// </summary>
            [EnumMember(Value = "law_office")]
            Lawoffice = 48,

            /// <summary>
            /// Enum Judicialandadministrativescrivener for value: judicial_and_administrative_scrivener
            /// </summary>
            [EnumMember(Value = "judicial_and_administrative_scrivener")]
            Judicialandadministrativescrivener = 49,

            /// <summary>
            /// Enum Laborconsultant for value: labor_consultant
            /// </summary>
            [EnumMember(Value = "labor_consultant")]
            Laborconsultant = 50,

            /// <summary>
            /// Enum Otherprofession for value: other_profession
            /// </summary>
            [EnumMember(Value = "other_profession")]
            Otherprofession = 51,

            /// <summary>
            /// Enum Businessconsultant for value: business_consultant
            /// </summary>
            [EnumMember(Value = "business_consultant")]
            Businessconsultant = 52,

            /// <summary>
            /// Enum Academicresearchdevelopment for value: academic_research_development
            /// </summary>
            [EnumMember(Value = "academic_research_development")]
            Academicresearchdevelopment = 53,

            /// <summary>
            /// Enum Advertisingagency for value: advertising_agency
            /// </summary>
            [EnumMember(Value = "advertising_agency")]
            Advertisingagency = 54,

            /// <summary>
            /// Enum Advertisingplanningproduction for value: advertising_planning_production
            /// </summary>
            [EnumMember(Value = "advertising_planning_production")]
            Advertisingplanningproduction = 55,

            /// <summary>
            /// Enum Designdevelopment for value: design_development
            /// </summary>
            [EnumMember(Value = "design_development")]
            Designdevelopment = 56,

            /// <summary>
            /// Enum Apparelindustrydesign for value: apparel_industry_design
            /// </summary>
            [EnumMember(Value = "apparel_industry_design")]
            Apparelindustrydesign = 57,

            /// <summary>
            /// Enum Websitedesign for value: website_design
            /// </summary>
            [EnumMember(Value = "website_design")]
            Websitedesign = 58,

            /// <summary>
            /// Enum Advertisingplanningdesign for value: advertising_planning_design
            /// </summary>
            [EnumMember(Value = "advertising_planning_design")]
            Advertisingplanningdesign = 59,

            /// <summary>
            /// Enum Otherdesign for value: other_design
            /// </summary>
            [EnumMember(Value = "other_design")]
            Otherdesign = 60,

            /// <summary>
            /// Enum Restaurantscoffeeshops for value: restaurants_coffee_shops
            /// </summary>
            [EnumMember(Value = "restaurants_coffee_shops")]
            Restaurantscoffeeshops = 61,

            /// <summary>
            /// Enum Saleoflunch for value: sale_of_lunch
            /// </summary>
            [EnumMember(Value = "sale_of_lunch")]
            Saleoflunch = 62,

            /// <summary>
            /// Enum Breadconfectionerymanufacturesale for value: bread_confectionery_manufacture_sale
            /// </summary>
            [EnumMember(Value = "bread_confectionery_manufacture_sale")]
            Breadconfectionerymanufacturesale = 63,

            /// <summary>
            /// Enum Deliverycateringmobilecatering for value: delivery_catering_mobile_catering
            /// </summary>
            [EnumMember(Value = "delivery_catering_mobile_catering")]
            Deliverycateringmobilecatering = 64,

            /// <summary>
            /// Enum Hotelinn for value: hotel_inn
            /// </summary>
            [EnumMember(Value = "hotel_inn")]
            Hotelinn = 65,

            /// <summary>
            /// Enum Homestay for value: homestay
            /// </summary>
            [EnumMember(Value = "homestay")]
            Homestay = 66,

            /// <summary>
            /// Enum Travelagency for value: travel_agency
            /// </summary>
            [EnumMember(Value = "travel_agency")]
            Travelagency = 67,

            /// <summary>
            /// Enum Leisuresportsfacilitymanagement for value: leisure_sports_facility_management
            /// </summary>
            [EnumMember(Value = "leisure_sports_facility_management")]
            Leisuresportsfacilitymanagement = 68,

            /// <summary>
            /// Enum Showeventmanagement for value: show_event_management
            /// </summary>
            [EnumMember(Value = "show_event_management")]
            Showeventmanagement = 69,

            /// <summary>
            /// Enum Barber for value: barber
            /// </summary>
            [EnumMember(Value = "barber")]
            Barber = 70,

            /// <summary>
            /// Enum Beautysalon for value: beauty_salon
            /// </summary>
            [EnumMember(Value = "beauty_salon")]
            Beautysalon = 71,

            /// <summary>
            /// Enum Spasandbathsauna for value: spa_sand_bath_sauna
            /// </summary>
            [EnumMember(Value = "spa_sand_bath_sauna")]
            Spasandbathsauna = 72,

            /// <summary>
            /// Enum Esteailsalon for value: este_ail_salon
            /// </summary>
            [EnumMember(Value = "este_ail_salon")]
            Esteailsalon = 73,

            /// <summary>
            /// Enum Bridalplanningintroducewedding for value: bridal_planning_introduce_wedding
            /// </summary>
            [EnumMember(Value = "bridal_planning_introduce_wedding")]
            Bridalplanningintroducewedding = 74,

            /// <summary>
            /// Enum Memorialceremonyfuneral for value: memorial_ceremony_funeral
            /// </summary>
            [EnumMember(Value = "memorial_ceremony_funeral")]
            Memorialceremonyfuneral = 75,

            /// <summary>
            /// Enum Moving for value: moving
            /// </summary>
            [EnumMember(Value = "moving")]
            Moving = 76,

            /// <summary>
            /// Enum Courierindustry for value: courier_industry
            /// </summary>
            [EnumMember(Value = "courier_industry")]
            Courierindustry = 77,

            /// <summary>
            /// Enum Housemaidcleaningagency for value: house_maid_cleaning_agency
            /// </summary>
            [EnumMember(Value = "house_maid_cleaning_agency")]
            Housemaidcleaningagency = 78,

            /// <summary>
            /// Enum Retailoringclothes for value: re_tailoring_clothes
            /// </summary>
            [EnumMember(Value = "re_tailoring_clothes")]
            Retailoringclothes = 79,

            /// <summary>
            /// Enum Traininginstitutemanagement for value: training_institute_management
            /// </summary>
            [EnumMember(Value = "training_institute_management")]
            Traininginstitutemanagement = 80,

            /// <summary>
            /// Enum Tutoringschool for value: tutoring_school
            /// </summary>
            [EnumMember(Value = "tutoring_school")]
            Tutoringschool = 81,

            /// <summary>
            /// Enum Musiccalligraphyabacusclassroom for value: music_calligraphy_abacus_classroom
            /// </summary>
            [EnumMember(Value = "music_calligraphy_abacus_classroom")]
            Musiccalligraphyabacusclassroom = 82,

            /// <summary>
            /// Enum Englishschool for value: english_school
            /// </summary>
            [EnumMember(Value = "english_school")]
            Englishschool = 83,

            /// <summary>
            /// Enum Tennisyogajudoschool for value: tennis_yoga_judo_school
            /// </summary>
            [EnumMember(Value = "tennis_yoga_judo_school")]
            Tennisyogajudoschool = 84,

            /// <summary>
            /// Enum Cultureschool for value: culture_school
            /// </summary>
            [EnumMember(Value = "culture_school")]
            Cultureschool = 85,

            /// <summary>
            /// Enum Seminarplanningmanagement for value: seminar_planning_management
            /// </summary>
            [EnumMember(Value = "seminar_planning_management")]
            Seminarplanningmanagement = 86,

            /// <summary>
            /// Enum Hospitalclinic for value: hospital_clinic
            /// </summary>
            [EnumMember(Value = "hospital_clinic")]
            Hospitalclinic = 87,

            /// <summary>
            /// Enum Dentalclinic for value: dental_clinic
            /// </summary>
            [EnumMember(Value = "dental_clinic")]
            Dentalclinic = 88,

            /// <summary>
            /// Enum Othermedicalservices for value: other_medical_services
            /// </summary>
            [EnumMember(Value = "other_medical_services")]
            Othermedicalservices = 89,

            /// <summary>
            /// Enum Nursery for value: nursery
            /// </summary>
            [EnumMember(Value = "nursery")]
            Nursery = 90,

            /// <summary>
            /// Enum Nursinghome for value: nursing_home
            /// </summary>
            [EnumMember(Value = "nursing_home")]
            Nursinghome = 91,

            /// <summary>
            /// Enum Rehabilitationsupportservices for value: rehabilitation_support_services
            /// </summary>
            [EnumMember(Value = "rehabilitation_support_services")]
            Rehabilitationsupportservices = 92,

            /// <summary>
            /// Enum Otherwelfare for value: other_welfare
            /// </summary>
            [EnumMember(Value = "other_welfare")]
            Otherwelfare = 93,

            /// <summary>
            /// Enum Visitwelfareservice for value: visit_welfare_service
            /// </summary>
            [EnumMember(Value = "visit_welfare_service")]
            Visitwelfareservice = 94,

            /// <summary>
            /// Enum Recruitmenttemporarystaffing for value: recruitment_temporary_staffing
            /// </summary>
            [EnumMember(Value = "recruitment_temporary_staffing")]
            Recruitmenttemporarystaffing = 95,

            /// <summary>
            /// Enum Liferelatedrecruitmenttemporarystaffing for value: life_related_recruitment_temporary_staffing
            /// </summary>
            [EnumMember(Value = "life_related_recruitment_temporary_staffing")]
            Liferelatedrecruitmenttemporarystaffing = 96,

            /// <summary>
            /// Enum Carmaintenancecarrepair for value: car_maintenance_car_repair
            /// </summary>
            [EnumMember(Value = "car_maintenance_car_repair")]
            Carmaintenancecarrepair = 97,

            /// <summary>
            /// Enum Machineryequipmentmaintenancerepair for value: machinery_equipment_maintenance_repair
            /// </summary>
            [EnumMember(Value = "machinery_equipment_maintenance_repair")]
            Machineryequipmentmaintenancerepair = 98,

            /// <summary>
            /// Enum Cleaningmaintenancebuildingmanagement for value: cleaning_maintenance_building_management
            /// </summary>
            [EnumMember(Value = "cleaning_maintenance_building_management")]
            Cleaningmaintenancebuildingmanagement = 99,

            /// <summary>
            /// Enum Security for value: security
            /// </summary>
            [EnumMember(Value = "security")]
            Security = 100,

            /// <summary>
            /// Enum Otherservices for value: other_services
            /// </summary>
            [EnumMember(Value = "other_services")]
            Otherservices = 101,

            /// <summary>
            /// Enum Npo for value: npo
            /// </summary>
            [EnumMember(Value = "npo")]
            Npo = 102,

            /// <summary>
            /// Enum Generalincorporatedassociation for value: general_incorporated_association
            /// </summary>
            [EnumMember(Value = "general_incorporated_association")]
            Generalincorporatedassociation = 103,

            /// <summary>
            /// Enum Generalincorporatedfoundation for value: general_incorporated_foundation
            /// </summary>
            [EnumMember(Value = "general_incorporated_foundation")]
            Generalincorporatedfoundation = 104,

            /// <summary>
            /// Enum Otherassociation for value: other_association
            /// </summary>
            [EnumMember(Value = "other_association")]
            Otherassociation = 105

        }

        /// <summary>
        /// 業種（agriculture: 農業, forestry: 林業, fishing_industry: 漁業、水産養殖業, mining: 鉱業、採石業、砂利採取業, civil_contractors: 土木工事業, pavement: 舗装工事業, carpenter: とび、大工、左官等の建設工事業, renovation: リフォーム工事業, electrical_plumbing: 電気、管工事等の設備工事業, grocery: 食料品の製造加工業, machinery_manufacturing: 機械器具の製造加工業, printing: 印刷業, other_manufacturing: その他の製造加工業, software_development: 受託：ソフトウェア、アプリ開発業, system_development: 受託：システム開発業, survey_analysis: 受託：調査、分析等の情報処理業, server_management: 受託：サーバー運営管理, website_production: 受託：ウェブサイト制作, online_service_management: オンラインサービス運営業, online_advertising_agency: オンライン広告代理店業, online_advertising_planning_production: オンライン広告企画・制作業, online_media_management: オンラインメディア運営業, portal_site_management: ポータルサイト運営業, other_it_services: その他、IT サービス業, transport_delivery: 輸送業、配送業, delivery: バイク便等の配達業, other_transportation_logistics: その他の運輸業、物流業, other_wholesale: 卸売業：その他, clothing_wholesale_fiber: 卸売業：衣類卸売／繊維, food_wholesale: 卸売業：飲食料品, entrusted_development_wholesale: 卸売業：機械器具, online_shop: 小売業：無店舗　オンラインショップ, fashion_grocery_store: 小売業：店舗あり　ファッション、雑貨, food_store: 小売業：店舗あり　生鮮食品、飲食料品, entrusted_store: 小売業：店舗あり　機械、器具, other_store: 小売業：店舗あり　その他, financial_instruments_exchange: 金融業：金融商品取引, commodity_futures_investment_advisor: 金融業：商品先物取引、商品投資顧問, other_financial: 金融業：その他, brokerage_insurance: 保険業：仲介、代理, other_insurance: 保険業：その他, real_estate_developer: 不動産業：ディベロッパー, real_estate_brokerage: 不動産業：売買、仲介, rent_coin_parking_management: 不動産業：賃貸、コインパーキング、管理, rental_office_co_working_space: 不動産業：レンタルオフィス、コワーキングスペース, rental_lease: レンタル業、リース業, cpa_tax_accountant: 士業：公認会計士事務所、税理士事務所, law_office: 士業：法律事務所, judicial_and_administrative_scrivener: 士業：司法書士事務所／行政書士事務所, labor_consultant: 士業：社会保険労務士事務所, other_profession: 士業：その他, business_consultant: 経営コンサルタント, academic_research_development: 学術・開発研究機関, advertising_agency: 広告代理店, advertising_planning_production: 広告企画／制作, design_development: ソフトウェア、アプリ開発業（受託）, apparel_industry_design: 服飾デザイン業、工業デザイン業, website_design: ウェブサイト制作（受託）, advertising_planning_design: 広告企画／制作業, other_design: その他、デザイン／制作, restaurants_coffee_shops: レストラン、喫茶店等の飲食店業, sale_of_lunch: 弁当の販売業, bread_confectionery_manufacture_sale: パン、菓子等の製造販売業, delivery_catering_mobile_catering: デリバリー業、ケータリング業、移動販売業, hotel_inn: 宿泊業：ホテル、旅館, homestay: 宿泊業：民泊, travel_agency: 旅行代理店業, leisure_sports_facility_management: レジャー、スポーツ等の施設運営業, show_event_management: ショー、イベント等の興行、イベント運営業, barber: ビューティ、ヘルスケア業：床屋、理容室, beauty_salon: ビューティ、ヘルスケア業：美容室, spa_sand_bath_sauna: ビューティ、ヘルスケア業：スパ、砂風呂、サウナ等, este_ail_salon: ビューティ、ヘルスケア業：その他、エステサロン、ネイルサロン等, bridal_planning_introduce_wedding: 冠婚葬祭業：ブライダルプランニング、結婚式場紹介等, memorial_ceremony_funeral: 冠婚葬祭業：メモリアルセレモニー、葬儀等, moving: 引っ越し業, courier_industry: 宅配業, house_maid_cleaning_agency: 家事代行サービス業：無店舗　ハウスメイド、掃除代行等, re_tailoring_clothes: 家事代行サービス業：店舗あり　衣類修理、衣類仕立て直し等, training_institute_management: 研修所等の施設運営業, tutoring_school: 学習塾、進学塾等の教育・学習支援業, music_calligraphy_abacus_classroom: 音楽教室、書道教室、そろばん教室等のの教育・学習支援業, english_school: 英会話スクール等の語学学習支援業, tennis_yoga_judo_school: テニススクール、ヨガ教室、柔道場等のスポーツ指導、支援業, culture_school: その他、カルチャースクール等の教育・学習支援業, seminar_planning_management: セミナー等の企画、運営業, hospital_clinic: 医療業：病院、一般診療所、クリニック等, dental_clinic: 医療業：歯科診療所, other_medical_services: 医療業：その他、医療サービス等, nursery: 福祉業：保育所等、児童向け施設型サービス, nursing_home: 福祉業：老人ホーム等、老人向け施設型サービス, rehabilitation_support_services: 福祉業：療育支援サービス等、障害者等向け施設型サービス, other_welfare: 福祉業：その他、施設型福祉サービス, visit_welfare_service: 福祉業：訪問型福祉サービス, recruitment_temporary_staffing: 人材紹介業、人材派遣業, life_related_recruitment_temporary_staffing: 生活関連サービスの人材紹介業、人材派遣業, car_maintenance_car_repair: 自動車整備業、自動車修理業, machinery_equipment_maintenance_repair: 機械機器類の整備業、修理業, cleaning_maintenance_building_management: 清掃業、メンテナンス業、建物管理業, security: 警備業, other_services: その他のサービス業, npo: NPO, general_incorporated_association: 一般社団法人, general_incorporated_foundation: 一般財団法人, other_association: その他組織)
        /// </summary>
        /// <value>業種（agriculture: 農業, forestry: 林業, fishing_industry: 漁業、水産養殖業, mining: 鉱業、採石業、砂利採取業, civil_contractors: 土木工事業, pavement: 舗装工事業, carpenter: とび、大工、左官等の建設工事業, renovation: リフォーム工事業, electrical_plumbing: 電気、管工事等の設備工事業, grocery: 食料品の製造加工業, machinery_manufacturing: 機械器具の製造加工業, printing: 印刷業, other_manufacturing: その他の製造加工業, software_development: 受託：ソフトウェア、アプリ開発業, system_development: 受託：システム開発業, survey_analysis: 受託：調査、分析等の情報処理業, server_management: 受託：サーバー運営管理, website_production: 受託：ウェブサイト制作, online_service_management: オンラインサービス運営業, online_advertising_agency: オンライン広告代理店業, online_advertising_planning_production: オンライン広告企画・制作業, online_media_management: オンラインメディア運営業, portal_site_management: ポータルサイト運営業, other_it_services: その他、IT サービス業, transport_delivery: 輸送業、配送業, delivery: バイク便等の配達業, other_transportation_logistics: その他の運輸業、物流業, other_wholesale: 卸売業：その他, clothing_wholesale_fiber: 卸売業：衣類卸売／繊維, food_wholesale: 卸売業：飲食料品, entrusted_development_wholesale: 卸売業：機械器具, online_shop: 小売業：無店舗　オンラインショップ, fashion_grocery_store: 小売業：店舗あり　ファッション、雑貨, food_store: 小売業：店舗あり　生鮮食品、飲食料品, entrusted_store: 小売業：店舗あり　機械、器具, other_store: 小売業：店舗あり　その他, financial_instruments_exchange: 金融業：金融商品取引, commodity_futures_investment_advisor: 金融業：商品先物取引、商品投資顧問, other_financial: 金融業：その他, brokerage_insurance: 保険業：仲介、代理, other_insurance: 保険業：その他, real_estate_developer: 不動産業：ディベロッパー, real_estate_brokerage: 不動産業：売買、仲介, rent_coin_parking_management: 不動産業：賃貸、コインパーキング、管理, rental_office_co_working_space: 不動産業：レンタルオフィス、コワーキングスペース, rental_lease: レンタル業、リース業, cpa_tax_accountant: 士業：公認会計士事務所、税理士事務所, law_office: 士業：法律事務所, judicial_and_administrative_scrivener: 士業：司法書士事務所／行政書士事務所, labor_consultant: 士業：社会保険労務士事務所, other_profession: 士業：その他, business_consultant: 経営コンサルタント, academic_research_development: 学術・開発研究機関, advertising_agency: 広告代理店, advertising_planning_production: 広告企画／制作, design_development: ソフトウェア、アプリ開発業（受託）, apparel_industry_design: 服飾デザイン業、工業デザイン業, website_design: ウェブサイト制作（受託）, advertising_planning_design: 広告企画／制作業, other_design: その他、デザイン／制作, restaurants_coffee_shops: レストラン、喫茶店等の飲食店業, sale_of_lunch: 弁当の販売業, bread_confectionery_manufacture_sale: パン、菓子等の製造販売業, delivery_catering_mobile_catering: デリバリー業、ケータリング業、移動販売業, hotel_inn: 宿泊業：ホテル、旅館, homestay: 宿泊業：民泊, travel_agency: 旅行代理店業, leisure_sports_facility_management: レジャー、スポーツ等の施設運営業, show_event_management: ショー、イベント等の興行、イベント運営業, barber: ビューティ、ヘルスケア業：床屋、理容室, beauty_salon: ビューティ、ヘルスケア業：美容室, spa_sand_bath_sauna: ビューティ、ヘルスケア業：スパ、砂風呂、サウナ等, este_ail_salon: ビューティ、ヘルスケア業：その他、エステサロン、ネイルサロン等, bridal_planning_introduce_wedding: 冠婚葬祭業：ブライダルプランニング、結婚式場紹介等, memorial_ceremony_funeral: 冠婚葬祭業：メモリアルセレモニー、葬儀等, moving: 引っ越し業, courier_industry: 宅配業, house_maid_cleaning_agency: 家事代行サービス業：無店舗　ハウスメイド、掃除代行等, re_tailoring_clothes: 家事代行サービス業：店舗あり　衣類修理、衣類仕立て直し等, training_institute_management: 研修所等の施設運営業, tutoring_school: 学習塾、進学塾等の教育・学習支援業, music_calligraphy_abacus_classroom: 音楽教室、書道教室、そろばん教室等のの教育・学習支援業, english_school: 英会話スクール等の語学学習支援業, tennis_yoga_judo_school: テニススクール、ヨガ教室、柔道場等のスポーツ指導、支援業, culture_school: その他、カルチャースクール等の教育・学習支援業, seminar_planning_management: セミナー等の企画、運営業, hospital_clinic: 医療業：病院、一般診療所、クリニック等, dental_clinic: 医療業：歯科診療所, other_medical_services: 医療業：その他、医療サービス等, nursery: 福祉業：保育所等、児童向け施設型サービス, nursing_home: 福祉業：老人ホーム等、老人向け施設型サービス, rehabilitation_support_services: 福祉業：療育支援サービス等、障害者等向け施設型サービス, other_welfare: 福祉業：その他、施設型福祉サービス, visit_welfare_service: 福祉業：訪問型福祉サービス, recruitment_temporary_staffing: 人材紹介業、人材派遣業, life_related_recruitment_temporary_staffing: 生活関連サービスの人材紹介業、人材派遣業, car_maintenance_car_repair: 自動車整備業、自動車修理業, machinery_equipment_maintenance_repair: 機械機器類の整備業、修理業, cleaning_maintenance_building_management: 清掃業、メンテナンス業、建物管理業, security: 警備業, other_services: その他のサービス業, npo: NPO, general_incorporated_association: 一般社団法人, general_incorporated_foundation: 一般財団法人, other_association: その他組織)</value>
        [DataMember(Name = "industry_code", IsRequired = true, EmitDefaultValue = false)]
        public IndustryCodeEnum IndustryCode { get; set; }
        /// <summary>
        /// 請求書レイアウト * &#x60;default_classic&#x60; - レイアウト１/クラシック (デフォルト)  * &#x60;standard_classic&#x60; - レイアウト２/クラシック  * &#x60;envelope_classic&#x60; - 封筒１/クラシック  * &#x60;carried_forward_standard_classic&#x60; - レイアウト３（繰越金額欄あり）/クラシック  * &#x60;carried_forward_envelope_classic&#x60; - 封筒２（繰越金額欄あり）/クラシック  * &#x60;default_modern&#x60; - レイアウト１/モダン  * &#x60;standard_modern&#x60; - レイアウト２/モダン  * &#x60;envelope_modern&#x60; - 封筒/モダン
        /// </summary>
        /// <value>請求書レイアウト * &#x60;default_classic&#x60; - レイアウト１/クラシック (デフォルト)  * &#x60;standard_classic&#x60; - レイアウト２/クラシック  * &#x60;envelope_classic&#x60; - 封筒１/クラシック  * &#x60;carried_forward_standard_classic&#x60; - レイアウト３（繰越金額欄あり）/クラシック  * &#x60;carried_forward_envelope_classic&#x60; - 封筒２（繰越金額欄あり）/クラシック  * &#x60;default_modern&#x60; - レイアウト１/モダン  * &#x60;standard_modern&#x60; - レイアウト２/モダン  * &#x60;envelope_modern&#x60; - 封筒/モダン</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InvoiceLayoutEnum
        {
            /// <summary>
            /// Enum Defaultclassic for value: default_classic
            /// </summary>
            [EnumMember(Value = "default_classic")]
            Defaultclassic = 1,

            /// <summary>
            /// Enum Standardclassic for value: standard_classic
            /// </summary>
            [EnumMember(Value = "standard_classic")]
            Standardclassic = 2,

            /// <summary>
            /// Enum Envelopeclassic for value: envelope_classic
            /// </summary>
            [EnumMember(Value = "envelope_classic")]
            Envelopeclassic = 3,

            /// <summary>
            /// Enum Carriedforwardstandardclassic for value: carried_forward_standard_classic
            /// </summary>
            [EnumMember(Value = "carried_forward_standard_classic")]
            Carriedforwardstandardclassic = 4,

            /// <summary>
            /// Enum Carriedforwardenvelopeclassic for value: carried_forward_envelope_classic
            /// </summary>
            [EnumMember(Value = "carried_forward_envelope_classic")]
            Carriedforwardenvelopeclassic = 5,

            /// <summary>
            /// Enum Defaultmodern for value: default_modern
            /// </summary>
            [EnumMember(Value = "default_modern")]
            Defaultmodern = 6,

            /// <summary>
            /// Enum Standardmodern for value: standard_modern
            /// </summary>
            [EnumMember(Value = "standard_modern")]
            Standardmodern = 7,

            /// <summary>
            /// Enum Envelopemodern for value: envelope_modern
            /// </summary>
            [EnumMember(Value = "envelope_modern")]
            Envelopemodern = 8

        }

        /// <summary>
        /// 請求書レイアウト * &#x60;default_classic&#x60; - レイアウト１/クラシック (デフォルト)  * &#x60;standard_classic&#x60; - レイアウト２/クラシック  * &#x60;envelope_classic&#x60; - 封筒１/クラシック  * &#x60;carried_forward_standard_classic&#x60; - レイアウト３（繰越金額欄あり）/クラシック  * &#x60;carried_forward_envelope_classic&#x60; - 封筒２（繰越金額欄あり）/クラシック  * &#x60;default_modern&#x60; - レイアウト１/モダン  * &#x60;standard_modern&#x60; - レイアウト２/モダン  * &#x60;envelope_modern&#x60; - 封筒/モダン
        /// </summary>
        /// <value>請求書レイアウト * &#x60;default_classic&#x60; - レイアウト１/クラシック (デフォルト)  * &#x60;standard_classic&#x60; - レイアウト２/クラシック  * &#x60;envelope_classic&#x60; - 封筒１/クラシック  * &#x60;carried_forward_standard_classic&#x60; - レイアウト３（繰越金額欄あり）/クラシック  * &#x60;carried_forward_envelope_classic&#x60; - 封筒２（繰越金額欄あり）/クラシック  * &#x60;default_modern&#x60; - レイアウト１/モダン  * &#x60;standard_modern&#x60; - レイアウト２/モダン  * &#x60;envelope_modern&#x60; - 封筒/モダン</value>
        [DataMember(Name = "invoice_layout", IsRequired = true, EmitDefaultValue = false)]
        public InvoiceLayoutEnum InvoiceLayout { get; set; }
        /// <summary>
        /// ユーザーの権限
        /// </summary>
        /// <value>ユーザーの権限</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            [EnumMember(Value = "admin")]
            Admin = 1,

            /// <summary>
            /// Enum Simpleaccounting for value: simple_accounting
            /// </summary>
            [EnumMember(Value = "simple_accounting")]
            Simpleaccounting = 2,

            /// <summary>
            /// Enum Selfonly for value: self_only
            /// </summary>
            [EnumMember(Value = "self_only")]
            Selfonly = 3,

            /// <summary>
            /// Enum Readonly for value: read_only
            /// </summary>
            [EnumMember(Value = "read_only")]
            Readonly = 4

        }

        /// <summary>
        /// ユーザーの権限
        /// </summary>
        /// <value>ユーザーの権限</value>
        [DataMember(Name = "role", IsRequired = true, EmitDefaultValue = false)]
        public RoleEnum Role { get; set; }
        /// <summary>
        /// 仕訳番号形式（not_used: 使用しない、digits: 数字（例：5091824）、alnum: 英数字（例：59J0P））
        /// </summary>
        /// <value>仕訳番号形式（not_used: 使用しない、digits: 数字（例：5091824）、alnum: 英数字（例：59J0P））</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TxnNumberFormatEnum
        {
            /// <summary>
            /// Enum Notused for value: not_used
            /// </summary>
            [EnumMember(Value = "not_used")]
            Notused = 1,

            /// <summary>
            /// Enum Digits for value: digits
            /// </summary>
            [EnumMember(Value = "digits")]
            Digits = 2,

            /// <summary>
            /// Enum Alnum for value: alnum
            /// </summary>
            [EnumMember(Value = "alnum")]
            Alnum = 3

        }

        /// <summary>
        /// 仕訳番号形式（not_used: 使用しない、digits: 数字（例：5091824）、alnum: 英数字（例：59J0P））
        /// </summary>
        /// <value>仕訳番号形式（not_used: 使用しない、digits: 数字（例：5091824）、alnum: 英数字（例：59J0P））</value>
        [DataMember(Name = "txn_number_format", IsRequired = true, EmitDefaultValue = false)]
        public TxnNumberFormatEnum TxnNumberFormat { get; set; }
        /// <summary>
        /// 仕訳承認フロー（enable: 有効、 disable: 無効）
        /// </summary>
        /// <value>仕訳承認フロー（enable: 有効、 disable: 無効）</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WorkflowSettingEnum
        {
            /// <summary>
            /// Enum Enable for value: enable
            /// </summary>
            [EnumMember(Value = "enable")]
            Enable = 1,

            /// <summary>
            /// Enum Disable for value: disable
            /// </summary>
            [EnumMember(Value = "disable")]
            Disable = 2

        }

        /// <summary>
        /// 仕訳承認フロー（enable: 有効、 disable: 無効）
        /// </summary>
        /// <value>仕訳承認フロー（enable: 有効、 disable: 無効）</value>
        [DataMember(Name = "workflow_setting", IsRequired = true, EmitDefaultValue = false)]
        public WorkflowSettingEnum WorkflowSetting { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyResponseCompany" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompanyResponseCompany() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyResponseCompany" /> class.
        /// </summary>
        /// <param name="amountFraction">金額端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入） (required).</param>
        /// <param name="contactName">担当者名 (50文字以内) (required).</param>
        /// <param name="corporateNumber">法人番号 (半角数字13桁、法人のみ) (required).</param>
        /// <param name="defaultWalletAccountId">決済口座のデフォルト.</param>
        /// <param name="displayName">事業所名 (required).</param>
        /// <param name="fax">FAX (required).</param>
        /// <param name="fiscalYears">fiscalYears (required).</param>
        /// <param name="headCount">従業員数（0: 経営者のみ、1: 2~5人、2: 6~10人、3: 11~20人、4: 21~30人、5: 31~40人、6: 41~100人、7: 100人以上 (required).</param>
        /// <param name="id">事業所ID (required).</param>
        /// <param name="industryClass">種別（agriculture_forestry_fisheries_ore: 農林水産業/鉱業、construction: 建設、manufacturing_processing: 製造/加工、it: IT、transportation_logistics: 運輸/物流、retail_wholesale: 小売/卸売、finance_insurance: 金融/保険、real_estate_rental: 不動産/レンタル、profession: 士業/学術/専門技術サービス、design_production: デザイン/制作、food: 飲食、leisure_entertainment: レジャー/娯楽、lifestyle: 生活関連サービス、education: 教育/学習支援、medical_welfare: 医療/福祉、other_services: その他サービス、other: その他） (required).</param>
        /// <param name="industryCode">業種（agriculture: 農業, forestry: 林業, fishing_industry: 漁業、水産養殖業, mining: 鉱業、採石業、砂利採取業, civil_contractors: 土木工事業, pavement: 舗装工事業, carpenter: とび、大工、左官等の建設工事業, renovation: リフォーム工事業, electrical_plumbing: 電気、管工事等の設備工事業, grocery: 食料品の製造加工業, machinery_manufacturing: 機械器具の製造加工業, printing: 印刷業, other_manufacturing: その他の製造加工業, software_development: 受託：ソフトウェア、アプリ開発業, system_development: 受託：システム開発業, survey_analysis: 受託：調査、分析等の情報処理業, server_management: 受託：サーバー運営管理, website_production: 受託：ウェブサイト制作, online_service_management: オンラインサービス運営業, online_advertising_agency: オンライン広告代理店業, online_advertising_planning_production: オンライン広告企画・制作業, online_media_management: オンラインメディア運営業, portal_site_management: ポータルサイト運営業, other_it_services: その他、IT サービス業, transport_delivery: 輸送業、配送業, delivery: バイク便等の配達業, other_transportation_logistics: その他の運輸業、物流業, other_wholesale: 卸売業：その他, clothing_wholesale_fiber: 卸売業：衣類卸売／繊維, food_wholesale: 卸売業：飲食料品, entrusted_development_wholesale: 卸売業：機械器具, online_shop: 小売業：無店舗　オンラインショップ, fashion_grocery_store: 小売業：店舗あり　ファッション、雑貨, food_store: 小売業：店舗あり　生鮮食品、飲食料品, entrusted_store: 小売業：店舗あり　機械、器具, other_store: 小売業：店舗あり　その他, financial_instruments_exchange: 金融業：金融商品取引, commodity_futures_investment_advisor: 金融業：商品先物取引、商品投資顧問, other_financial: 金融業：その他, brokerage_insurance: 保険業：仲介、代理, other_insurance: 保険業：その他, real_estate_developer: 不動産業：ディベロッパー, real_estate_brokerage: 不動産業：売買、仲介, rent_coin_parking_management: 不動産業：賃貸、コインパーキング、管理, rental_office_co_working_space: 不動産業：レンタルオフィス、コワーキングスペース, rental_lease: レンタル業、リース業, cpa_tax_accountant: 士業：公認会計士事務所、税理士事務所, law_office: 士業：法律事務所, judicial_and_administrative_scrivener: 士業：司法書士事務所／行政書士事務所, labor_consultant: 士業：社会保険労務士事務所, other_profession: 士業：その他, business_consultant: 経営コンサルタント, academic_research_development: 学術・開発研究機関, advertising_agency: 広告代理店, advertising_planning_production: 広告企画／制作, design_development: ソフトウェア、アプリ開発業（受託）, apparel_industry_design: 服飾デザイン業、工業デザイン業, website_design: ウェブサイト制作（受託）, advertising_planning_design: 広告企画／制作業, other_design: その他、デザイン／制作, restaurants_coffee_shops: レストラン、喫茶店等の飲食店業, sale_of_lunch: 弁当の販売業, bread_confectionery_manufacture_sale: パン、菓子等の製造販売業, delivery_catering_mobile_catering: デリバリー業、ケータリング業、移動販売業, hotel_inn: 宿泊業：ホテル、旅館, homestay: 宿泊業：民泊, travel_agency: 旅行代理店業, leisure_sports_facility_management: レジャー、スポーツ等の施設運営業, show_event_management: ショー、イベント等の興行、イベント運営業, barber: ビューティ、ヘルスケア業：床屋、理容室, beauty_salon: ビューティ、ヘルスケア業：美容室, spa_sand_bath_sauna: ビューティ、ヘルスケア業：スパ、砂風呂、サウナ等, este_ail_salon: ビューティ、ヘルスケア業：その他、エステサロン、ネイルサロン等, bridal_planning_introduce_wedding: 冠婚葬祭業：ブライダルプランニング、結婚式場紹介等, memorial_ceremony_funeral: 冠婚葬祭業：メモリアルセレモニー、葬儀等, moving: 引っ越し業, courier_industry: 宅配業, house_maid_cleaning_agency: 家事代行サービス業：無店舗　ハウスメイド、掃除代行等, re_tailoring_clothes: 家事代行サービス業：店舗あり　衣類修理、衣類仕立て直し等, training_institute_management: 研修所等の施設運営業, tutoring_school: 学習塾、進学塾等の教育・学習支援業, music_calligraphy_abacus_classroom: 音楽教室、書道教室、そろばん教室等のの教育・学習支援業, english_school: 英会話スクール等の語学学習支援業, tennis_yoga_judo_school: テニススクール、ヨガ教室、柔道場等のスポーツ指導、支援業, culture_school: その他、カルチャースクール等の教育・学習支援業, seminar_planning_management: セミナー等の企画、運営業, hospital_clinic: 医療業：病院、一般診療所、クリニック等, dental_clinic: 医療業：歯科診療所, other_medical_services: 医療業：その他、医療サービス等, nursery: 福祉業：保育所等、児童向け施設型サービス, nursing_home: 福祉業：老人ホーム等、老人向け施設型サービス, rehabilitation_support_services: 福祉業：療育支援サービス等、障害者等向け施設型サービス, other_welfare: 福祉業：その他、施設型福祉サービス, visit_welfare_service: 福祉業：訪問型福祉サービス, recruitment_temporary_staffing: 人材紹介業、人材派遣業, life_related_recruitment_temporary_staffing: 生活関連サービスの人材紹介業、人材派遣業, car_maintenance_car_repair: 自動車整備業、自動車修理業, machinery_equipment_maintenance_repair: 機械機器類の整備業、修理業, cleaning_maintenance_building_management: 清掃業、メンテナンス業、建物管理業, security: 警備業, other_services: その他のサービス業, npo: NPO, general_incorporated_association: 一般社団法人, general_incorporated_foundation: 一般財団法人, other_association: その他組織) (required).</param>
        /// <param name="invoiceLayout">請求書レイアウト * &#x60;default_classic&#x60; - レイアウト１/クラシック (デフォルト)  * &#x60;standard_classic&#x60; - レイアウト２/クラシック  * &#x60;envelope_classic&#x60; - 封筒１/クラシック  * &#x60;carried_forward_standard_classic&#x60; - レイアウト３（繰越金額欄あり）/クラシック  * &#x60;carried_forward_envelope_classic&#x60; - 封筒２（繰越金額欄あり）/クラシック  * &#x60;default_modern&#x60; - レイアウト１/モダン  * &#x60;standard_modern&#x60; - レイアウト２/モダン  * &#x60;envelope_modern&#x60; - 封筒/モダン (required).</param>
        /// <param name="minusFormat">マイナスの表示方法（0: -、 1: △） (required).</param>
        /// <param name="name">事業所の正式名称 (100文字以内) (required).</param>
        /// <param name="nameKana">正式名称フリガナ (100文字以内) (required).</param>
        /// <param name="phone1">電話番号１ (required).</param>
        /// <param name="phone2">電話番号２ (required).</param>
        /// <param name="prefectureCode">都道府県コード（0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 (required).</param>
        /// <param name="privateSettlement">プライベート資金/役員資金（false: 使用しない、true: 使用する） (required).</param>
        /// <param name="role">ユーザーの権限 (required).</param>
        /// <param name="streetName1">市区町村・番地 (required).</param>
        /// <param name="streetName2">建物名・部屋番号など (required).</param>
        /// <param name="taxAtSourceCalcType">源泉徴収税計算（0: 消費税を含める、1: 消費税を含めない） (required).</param>
        /// <param name="txnNumberFormat">仕訳番号形式（not_used: 使用しない、digits: 数字（例：5091824）、alnum: 英数字（例：59J0P）） (required).</param>
        /// <param name="usePartnerCode">取引先コードの利用設定（true: 有効、 false: 無効） (required).</param>
        /// <param name="workflowSetting">仕訳承認フロー（enable: 有効、 disable: 無効） (required).</param>
        /// <param name="zipcode">郵便番号 (required).</param>
        public CompanyResponseCompany(int amountFraction = default(int), string contactName = default(string), string corporateNumber = default(string), int defaultWalletAccountId = default(int), string displayName = default(string), string fax = default(string), List<FiscalYears> fiscalYears = default(List<FiscalYears>), int? headCount = default(int?), int id = default(int), IndustryClassEnum industryClass = default(IndustryClassEnum), IndustryCodeEnum industryCode = default(IndustryCodeEnum), InvoiceLayoutEnum invoiceLayout = default(InvoiceLayoutEnum), int minusFormat = default(int), string name = default(string), string nameKana = default(string), string phone1 = default(string), string phone2 = default(string), int prefectureCode = default(int), bool privateSettlement = default(bool), RoleEnum role = default(RoleEnum), string streetName1 = default(string), string streetName2 = default(string), int taxAtSourceCalcType = default(int), TxnNumberFormatEnum txnNumberFormat = default(TxnNumberFormatEnum), bool usePartnerCode = default(bool), WorkflowSettingEnum workflowSetting = default(WorkflowSettingEnum), string zipcode = default(string))
        {
            this.AmountFraction = amountFraction;
            // to ensure "contactName" is required (not null)
            this.ContactName = contactName ?? throw new ArgumentNullException("contactName is a required property for CompanyResponseCompany and cannot be null");
            // to ensure "corporateNumber" is required (not null)
            this.CorporateNumber = corporateNumber ?? throw new ArgumentNullException("corporateNumber is a required property for CompanyResponseCompany and cannot be null");
            // to ensure "displayName" is required (not null)
            this.DisplayName = displayName ?? throw new ArgumentNullException("displayName is a required property for CompanyResponseCompany and cannot be null");
            // to ensure "fax" is required (not null)
            this.Fax = fax ?? throw new ArgumentNullException("fax is a required property for CompanyResponseCompany and cannot be null");
            // to ensure "fiscalYears" is required (not null)
            this.FiscalYears = fiscalYears ?? throw new ArgumentNullException("fiscalYears is a required property for CompanyResponseCompany and cannot be null");
            // to ensure "headCount" is required (not null)
            this.HeadCount = headCount ?? throw new ArgumentNullException("headCount is a required property for CompanyResponseCompany and cannot be null");
            this.Id = id;
            this.IndustryClass = industryClass;
            this.IndustryCode = industryCode;
            this.InvoiceLayout = invoiceLayout;
            this.MinusFormat = minusFormat;
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for CompanyResponseCompany and cannot be null");
            // to ensure "nameKana" is required (not null)
            this.NameKana = nameKana ?? throw new ArgumentNullException("nameKana is a required property for CompanyResponseCompany and cannot be null");
            // to ensure "phone1" is required (not null)
            this.Phone1 = phone1 ?? throw new ArgumentNullException("phone1 is a required property for CompanyResponseCompany and cannot be null");
            // to ensure "phone2" is required (not null)
            this.Phone2 = phone2 ?? throw new ArgumentNullException("phone2 is a required property for CompanyResponseCompany and cannot be null");
            this.PrefectureCode = prefectureCode;
            this.PrivateSettlement = privateSettlement;
            this.Role = role;
            // to ensure "streetName1" is required (not null)
            this.StreetName1 = streetName1 ?? throw new ArgumentNullException("streetName1 is a required property for CompanyResponseCompany and cannot be null");
            // to ensure "streetName2" is required (not null)
            this.StreetName2 = streetName2 ?? throw new ArgumentNullException("streetName2 is a required property for CompanyResponseCompany and cannot be null");
            this.TaxAtSourceCalcType = taxAtSourceCalcType;
            this.TxnNumberFormat = txnNumberFormat;
            this.UsePartnerCode = usePartnerCode;
            this.WorkflowSetting = workflowSetting;
            // to ensure "zipcode" is required (not null)
            this.Zipcode = zipcode ?? throw new ArgumentNullException("zipcode is a required property for CompanyResponseCompany and cannot be null");
            this.DefaultWalletAccountId = defaultWalletAccountId;
        }

        /// <summary>
        /// 金額端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）
        /// </summary>
        /// <value>金額端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）</value>
        [DataMember(Name = "amount_fraction", IsRequired = true, EmitDefaultValue = false)]
        public int AmountFraction { get; set; }

        /// <summary>
        /// 担当者名 (50文字以内)
        /// </summary>
        /// <value>担当者名 (50文字以内)</value>
        [DataMember(Name = "contact_name", IsRequired = true, EmitDefaultValue = true)]
        public string ContactName { get; set; }

        /// <summary>
        /// 法人番号 (半角数字13桁、法人のみ)
        /// </summary>
        /// <value>法人番号 (半角数字13桁、法人のみ)</value>
        [DataMember(Name = "corporate_number", IsRequired = true, EmitDefaultValue = false)]
        public string CorporateNumber { get; set; }

        /// <summary>
        /// 決済口座のデフォルト
        /// </summary>
        /// <value>決済口座のデフォルト</value>
        [DataMember(Name = "default_wallet_account_id", EmitDefaultValue = false)]
        public int DefaultWalletAccountId { get; set; }

        /// <summary>
        /// 事業所名
        /// </summary>
        /// <value>事業所名</value>
        [DataMember(Name = "display_name", IsRequired = true, EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// FAX
        /// </summary>
        /// <value>FAX</value>
        [DataMember(Name = "fax", IsRequired = true, EmitDefaultValue = true)]
        public string Fax { get; set; }

        /// <summary>
        /// Gets or Sets FiscalYears
        /// </summary>
        [DataMember(Name = "fiscal_years", IsRequired = true, EmitDefaultValue = false)]
        public List<FiscalYears> FiscalYears { get; set; }

        /// <summary>
        /// 従業員数（0: 経営者のみ、1: 2~5人、2: 6~10人、3: 11~20人、4: 21~30人、5: 31~40人、6: 41~100人、7: 100人以上
        /// </summary>
        /// <value>従業員数（0: 経営者のみ、1: 2~5人、2: 6~10人、3: 11~20人、4: 21~30人、5: 31~40人、6: 41~100人、7: 100人以上</value>
        [DataMember(Name = "head_count", IsRequired = true, EmitDefaultValue = true)]
        public int? HeadCount { get; set; }

        /// <summary>
        /// 事業所ID
        /// </summary>
        /// <value>事業所ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// マイナスの表示方法（0: -、 1: △）
        /// </summary>
        /// <value>マイナスの表示方法（0: -、 1: △）</value>
        [DataMember(Name = "minus_format", IsRequired = true, EmitDefaultValue = false)]
        public int MinusFormat { get; set; }

        /// <summary>
        /// 事業所の正式名称 (100文字以内)
        /// </summary>
        /// <value>事業所の正式名称 (100文字以内)</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// 正式名称フリガナ (100文字以内)
        /// </summary>
        /// <value>正式名称フリガナ (100文字以内)</value>
        [DataMember(Name = "name_kana", IsRequired = true, EmitDefaultValue = true)]
        public string NameKana { get; set; }

        /// <summary>
        /// 電話番号１
        /// </summary>
        /// <value>電話番号１</value>
        [DataMember(Name = "phone1", IsRequired = true, EmitDefaultValue = false)]
        public string Phone1 { get; set; }

        /// <summary>
        /// 電話番号２
        /// </summary>
        /// <value>電話番号２</value>
        [DataMember(Name = "phone2", IsRequired = true, EmitDefaultValue = true)]
        public string Phone2 { get; set; }

        /// <summary>
        /// 都道府県コード（0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
        /// </summary>
        /// <value>都道府県コード（0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄</value>
        [DataMember(Name = "prefecture_code", IsRequired = true, EmitDefaultValue = false)]
        public int PrefectureCode { get; set; }

        /// <summary>
        /// プライベート資金/役員資金（false: 使用しない、true: 使用する）
        /// </summary>
        /// <value>プライベート資金/役員資金（false: 使用しない、true: 使用する）</value>
        [DataMember(Name = "private_settlement", IsRequired = true, EmitDefaultValue = false)]
        public bool PrivateSettlement { get; set; }

        /// <summary>
        /// 市区町村・番地
        /// </summary>
        /// <value>市区町村・番地</value>
        [DataMember(Name = "street_name1", IsRequired = true, EmitDefaultValue = false)]
        public string StreetName1 { get; set; }

        /// <summary>
        /// 建物名・部屋番号など
        /// </summary>
        /// <value>建物名・部屋番号など</value>
        [DataMember(Name = "street_name2", IsRequired = true, EmitDefaultValue = false)]
        public string StreetName2 { get; set; }

        /// <summary>
        /// 源泉徴収税計算（0: 消費税を含める、1: 消費税を含めない）
        /// </summary>
        /// <value>源泉徴収税計算（0: 消費税を含める、1: 消費税を含めない）</value>
        [DataMember(Name = "tax_at_source_calc_type", IsRequired = true, EmitDefaultValue = false)]
        public int TaxAtSourceCalcType { get; set; }

        /// <summary>
        /// 取引先コードの利用設定（true: 有効、 false: 無効）
        /// </summary>
        /// <value>取引先コードの利用設定（true: 有効、 false: 無効）</value>
        [DataMember(Name = "use_partner_code", IsRequired = true, EmitDefaultValue = false)]
        public bool UsePartnerCode { get; set; }

        /// <summary>
        /// 郵便番号
        /// </summary>
        /// <value>郵便番号</value>
        [DataMember(Name = "zipcode", IsRequired = true, EmitDefaultValue = false)]
        public string Zipcode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyResponseCompany {\n");
            sb.Append("  AmountFraction: ").Append(AmountFraction).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  CorporateNumber: ").Append(CorporateNumber).Append("\n");
            sb.Append("  DefaultWalletAccountId: ").Append(DefaultWalletAccountId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  FiscalYears: ").Append(FiscalYears).Append("\n");
            sb.Append("  HeadCount: ").Append(HeadCount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IndustryClass: ").Append(IndustryClass).Append("\n");
            sb.Append("  IndustryCode: ").Append(IndustryCode).Append("\n");
            sb.Append("  InvoiceLayout: ").Append(InvoiceLayout).Append("\n");
            sb.Append("  MinusFormat: ").Append(MinusFormat).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NameKana: ").Append(NameKana).Append("\n");
            sb.Append("  Phone1: ").Append(Phone1).Append("\n");
            sb.Append("  Phone2: ").Append(Phone2).Append("\n");
            sb.Append("  PrefectureCode: ").Append(PrefectureCode).Append("\n");
            sb.Append("  PrivateSettlement: ").Append(PrivateSettlement).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  StreetName1: ").Append(StreetName1).Append("\n");
            sb.Append("  StreetName2: ").Append(StreetName2).Append("\n");
            sb.Append("  TaxAtSourceCalcType: ").Append(TaxAtSourceCalcType).Append("\n");
            sb.Append("  TxnNumberFormat: ").Append(TxnNumberFormat).Append("\n");
            sb.Append("  UsePartnerCode: ").Append(UsePartnerCode).Append("\n");
            sb.Append("  WorkflowSetting: ").Append(WorkflowSetting).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyResponseCompany);
        }

        /// <summary>
        /// Returns true if CompanyResponseCompany instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyResponseCompany to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyResponseCompany input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmountFraction == input.AmountFraction ||
                    this.AmountFraction.Equals(input.AmountFraction)
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.CorporateNumber == input.CorporateNumber ||
                    (this.CorporateNumber != null &&
                    this.CorporateNumber.Equals(input.CorporateNumber))
                ) && 
                (
                    this.DefaultWalletAccountId == input.DefaultWalletAccountId ||
                    this.DefaultWalletAccountId.Equals(input.DefaultWalletAccountId)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.FiscalYears == input.FiscalYears ||
                    this.FiscalYears != null &&
                    input.FiscalYears != null &&
                    this.FiscalYears.SequenceEqual(input.FiscalYears)
                ) && 
                (
                    this.HeadCount == input.HeadCount ||
                    (this.HeadCount != null &&
                    this.HeadCount.Equals(input.HeadCount))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.IndustryClass == input.IndustryClass ||
                    this.IndustryClass.Equals(input.IndustryClass)
                ) && 
                (
                    this.IndustryCode == input.IndustryCode ||
                    this.IndustryCode.Equals(input.IndustryCode)
                ) && 
                (
                    this.InvoiceLayout == input.InvoiceLayout ||
                    this.InvoiceLayout.Equals(input.InvoiceLayout)
                ) && 
                (
                    this.MinusFormat == input.MinusFormat ||
                    this.MinusFormat.Equals(input.MinusFormat)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NameKana == input.NameKana ||
                    (this.NameKana != null &&
                    this.NameKana.Equals(input.NameKana))
                ) && 
                (
                    this.Phone1 == input.Phone1 ||
                    (this.Phone1 != null &&
                    this.Phone1.Equals(input.Phone1))
                ) && 
                (
                    this.Phone2 == input.Phone2 ||
                    (this.Phone2 != null &&
                    this.Phone2.Equals(input.Phone2))
                ) && 
                (
                    this.PrefectureCode == input.PrefectureCode ||
                    this.PrefectureCode.Equals(input.PrefectureCode)
                ) && 
                (
                    this.PrivateSettlement == input.PrivateSettlement ||
                    this.PrivateSettlement.Equals(input.PrivateSettlement)
                ) && 
                (
                    this.Role == input.Role ||
                    this.Role.Equals(input.Role)
                ) && 
                (
                    this.StreetName1 == input.StreetName1 ||
                    (this.StreetName1 != null &&
                    this.StreetName1.Equals(input.StreetName1))
                ) && 
                (
                    this.StreetName2 == input.StreetName2 ||
                    (this.StreetName2 != null &&
                    this.StreetName2.Equals(input.StreetName2))
                ) && 
                (
                    this.TaxAtSourceCalcType == input.TaxAtSourceCalcType ||
                    this.TaxAtSourceCalcType.Equals(input.TaxAtSourceCalcType)
                ) && 
                (
                    this.TxnNumberFormat == input.TxnNumberFormat ||
                    this.TxnNumberFormat.Equals(input.TxnNumberFormat)
                ) && 
                (
                    this.UsePartnerCode == input.UsePartnerCode ||
                    this.UsePartnerCode.Equals(input.UsePartnerCode)
                ) && 
                (
                    this.WorkflowSetting == input.WorkflowSetting ||
                    this.WorkflowSetting.Equals(input.WorkflowSetting)
                ) && 
                (
                    this.Zipcode == input.Zipcode ||
                    (this.Zipcode != null &&
                    this.Zipcode.Equals(input.Zipcode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AmountFraction.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.CorporateNumber != null)
                    hashCode = hashCode * 59 + this.CorporateNumber.GetHashCode();
                hashCode = hashCode * 59 + this.DefaultWalletAccountId.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.FiscalYears != null)
                    hashCode = hashCode * 59 + this.FiscalYears.GetHashCode();
                if (this.HeadCount != null)
                    hashCode = hashCode * 59 + this.HeadCount.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IndustryClass.GetHashCode();
                hashCode = hashCode * 59 + this.IndustryCode.GetHashCode();
                hashCode = hashCode * 59 + this.InvoiceLayout.GetHashCode();
                hashCode = hashCode * 59 + this.MinusFormat.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NameKana != null)
                    hashCode = hashCode * 59 + this.NameKana.GetHashCode();
                if (this.Phone1 != null)
                    hashCode = hashCode * 59 + this.Phone1.GetHashCode();
                if (this.Phone2 != null)
                    hashCode = hashCode * 59 + this.Phone2.GetHashCode();
                hashCode = hashCode * 59 + this.PrefectureCode.GetHashCode();
                hashCode = hashCode * 59 + this.PrivateSettlement.GetHashCode();
                hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.StreetName1 != null)
                    hashCode = hashCode * 59 + this.StreetName1.GetHashCode();
                if (this.StreetName2 != null)
                    hashCode = hashCode * 59 + this.StreetName2.GetHashCode();
                hashCode = hashCode * 59 + this.TaxAtSourceCalcType.GetHashCode();
                hashCode = hashCode * 59 + this.TxnNumberFormat.GetHashCode();
                hashCode = hashCode * 59 + this.UsePartnerCode.GetHashCode();
                hashCode = hashCode * 59 + this.WorkflowSetting.GetHashCode();
                if (this.Zipcode != null)
                    hashCode = hashCode * 59 + this.Zipcode.GetHashCode();
                return hashCode;
            }
        }

    }

}
