/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// ApprovalFlowRouteResponseApprovalFlowRoute
    /// </summary>
    [DataContract(Name = "approvalFlowRouteResponse_approval_flow_route")]
    public partial class ApprovalFlowRouteResponseApprovalFlowRoute : IEquatable<ApprovalFlowRouteResponseApprovalFlowRoute>
    {
        /// <summary>
        /// Defines Usages
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UsagesEnum
        {
            /// <summary>
            /// Enum TxnApproval for value: TxnApproval
            /// </summary>
            [EnumMember(Value = "TxnApproval")]
            TxnApproval = 1,

            /// <summary>
            /// Enum ExpenseApplication for value: ExpenseApplication
            /// </summary>
            [EnumMember(Value = "ExpenseApplication")]
            ExpenseApplication = 2,

            /// <summary>
            /// Enum PaymentRequest for value: PaymentRequest
            /// </summary>
            [EnumMember(Value = "PaymentRequest")]
            PaymentRequest = 3,

            /// <summary>
            /// Enum ApprovalRequest for value: ApprovalRequest
            /// </summary>
            [EnumMember(Value = "ApprovalRequest")]
            ApprovalRequest = 4,

            /// <summary>
            /// Enum DocApproval for value: DocApproval
            /// </summary>
            [EnumMember(Value = "DocApproval")]
            DocApproval = 5

        }



        /// <summary>
        /// 申請種別（申請経路を使用できる申請種別を示します。例えば、ApprovalRequest の場合は、各種申請で使用できる申請経路です。） * &#x60;TxnApproval&#x60; - 仕訳承認 * &#x60;ExpenseApplication&#x60; - 経費精算 * &#x60;PaymentRequest&#x60; - 支払依頼 * &#x60;ApprovalRequest&#x60; - 各種申請 * &#x60;DocApproval&#x60; - 請求書等 (見積書・納品書・請求書・発注書)
        /// </summary>
        /// <value>申請種別（申請経路を使用できる申請種別を示します。例えば、ApprovalRequest の場合は、各種申請で使用できる申請経路です。） * &#x60;TxnApproval&#x60; - 仕訳承認 * &#x60;ExpenseApplication&#x60; - 経費精算 * &#x60;PaymentRequest&#x60; - 支払依頼 * &#x60;ApprovalRequest&#x60; - 各種申請 * &#x60;DocApproval&#x60; - 請求書等 (見積書・納品書・請求書・発注書)</value>
        [DataMember(Name = "usages", EmitDefaultValue = false)]
        public List<UsagesEnum> Usages { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalFlowRouteResponseApprovalFlowRoute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApprovalFlowRouteResponseApprovalFlowRoute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalFlowRouteResponseApprovalFlowRoute" /> class.
        /// </summary>
        /// <param name="definitionSystem">システム作成の申請経路かどうか.</param>
        /// <param name="description">申請経路の説明.</param>
        /// <param name="firstStepId">最初の承認ステップのID.</param>
        /// <param name="id">申請経路ID (required).</param>
        /// <param name="name">申請経路名.</param>
        /// <param name="requestFormIds">申請経路で利用できる申請フォームID配列 (required).</param>
        /// <param name="steps">承認ステップ（配列）.</param>
        /// <param name="usages">申請種別（申請経路を使用できる申請種別を示します。例えば、ApprovalRequest の場合は、各種申請で使用できる申請経路です。） * &#x60;TxnApproval&#x60; - 仕訳承認 * &#x60;ExpenseApplication&#x60; - 経費精算 * &#x60;PaymentRequest&#x60; - 支払依頼 * &#x60;ApprovalRequest&#x60; - 各種申請 * &#x60;DocApproval&#x60; - 請求書等 (見積書・納品書・請求書・発注書).</param>
        /// <param name="userId">更新したユーザーのユーザーID.</param>
        public ApprovalFlowRouteResponseApprovalFlowRoute(bool definitionSystem = default(bool), string description = default(string), int firstStepId = default(int), int id = default(int), string name = default(string), List<int> requestFormIds = default(List<int>), List<ApprovalFlowRouteResponseApprovalFlowRouteSteps> steps = default(List<ApprovalFlowRouteResponseApprovalFlowRouteSteps>), List<UsagesEnum> usages = default(List<UsagesEnum>), int? userId = default(int?))
        {
            this.Id = id;
            // to ensure "requestFormIds" is required (not null)
            if (requestFormIds == null)
            {
                throw new ArgumentNullException("requestFormIds is a required property for ApprovalFlowRouteResponseApprovalFlowRoute and cannot be null");
            }
            this.RequestFormIds = requestFormIds;
            this.DefinitionSystem = definitionSystem;
            this.Description = description;
            this.FirstStepId = firstStepId;
            this.Name = name;
            this.Steps = steps;
            this.Usages = usages;
            this.UserId = userId;
        }

        /// <summary>
        /// システム作成の申請経路かどうか
        /// </summary>
        /// <value>システム作成の申請経路かどうか</value>
        [DataMember(Name = "definition_system", EmitDefaultValue = true)]
        public bool DefinitionSystem { get; set; }

        /// <summary>
        /// 申請経路の説明
        /// </summary>
        /// <value>申請経路の説明</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// 最初の承認ステップのID
        /// </summary>
        /// <value>最初の承認ステップのID</value>
        [DataMember(Name = "first_step_id", EmitDefaultValue = false)]
        public int FirstStepId { get; set; }

        /// <summary>
        /// 申請経路ID
        /// </summary>
        /// <value>申請経路ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// 申請経路名
        /// </summary>
        /// <value>申請経路名</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// 申請経路で利用できる申請フォームID配列
        /// </summary>
        /// <value>申請経路で利用できる申請フォームID配列</value>
        [DataMember(Name = "request_form_ids", IsRequired = true, EmitDefaultValue = false)]
        public List<int> RequestFormIds { get; set; }

        /// <summary>
        /// 承認ステップ（配列）
        /// </summary>
        /// <value>承認ステップ（配列）</value>
        [DataMember(Name = "steps", EmitDefaultValue = false)]
        public List<ApprovalFlowRouteResponseApprovalFlowRouteSteps> Steps { get; set; }

        /// <summary>
        /// 更新したユーザーのユーザーID
        /// </summary>
        /// <value>更新したユーザーのユーザーID</value>
        [DataMember(Name = "user_id", EmitDefaultValue = true)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApprovalFlowRouteResponseApprovalFlowRoute {\n");
            sb.Append("  DefinitionSystem: ").Append(DefinitionSystem).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FirstStepId: ").Append(FirstStepId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RequestFormIds: ").Append(RequestFormIds).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Usages: ").Append(Usages).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApprovalFlowRouteResponseApprovalFlowRoute);
        }

        /// <summary>
        /// Returns true if ApprovalFlowRouteResponseApprovalFlowRoute instances are equal
        /// </summary>
        /// <param name="input">Instance of ApprovalFlowRouteResponseApprovalFlowRoute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalFlowRouteResponseApprovalFlowRoute input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DefinitionSystem == input.DefinitionSystem ||
                    this.DefinitionSystem.Equals(input.DefinitionSystem)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FirstStepId == input.FirstStepId ||
                    this.FirstStepId.Equals(input.FirstStepId)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RequestFormIds == input.RequestFormIds ||
                    this.RequestFormIds != null &&
                    input.RequestFormIds != null &&
                    this.RequestFormIds.SequenceEqual(input.RequestFormIds)
                ) && 
                (
                    this.Steps == input.Steps ||
                    this.Steps != null &&
                    input.Steps != null &&
                    this.Steps.SequenceEqual(input.Steps)
                ) && 
                (
                    this.Usages == input.Usages ||
                    this.Usages.SequenceEqual(input.Usages)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DefinitionSystem.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FirstStepId.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.RequestFormIds != null)
                {
                    hashCode = (hashCode * 59) + this.RequestFormIds.GetHashCode();
                }
                if (this.Steps != null)
                {
                    hashCode = (hashCode * 59) + this.Steps.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Usages.GetHashCode();
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
