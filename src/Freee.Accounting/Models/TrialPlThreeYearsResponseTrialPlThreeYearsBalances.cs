/*
 * freee API
 *
 *  <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"start_guide\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"specification\">仕様</h2>  <pre><code>【重要】会計freee APIの新バージョンについて 2020年12月まで、2つのバージョンが利用できる状態です。古いものは2020年12月に利用不可となります。<br> 新しいAPIを利用するにはリクエストヘッダーに以下を指定します。 X-Api-Version: 2020-06-15<br> 指定がない場合は2020年12月に廃止予定のAPIを利用することとなります。<br> 【重要】APIのバージョン指定をせずに利用し続ける場合 2020年12月に新しいバージョンのAPIに自動的に切り替わります。 詳細は、<a href=\"https://developer.freee.co.jp/release-note/2948\" target=\"_blank\">リリースノート</a>をご覧ください。<br> 旧バージョンのAPIリファレンスを確認したい場合は、<a href=\"https://freee.github.io/freee-api-schema/\" target=\"_blank\">旧バージョンのAPIリファレンスページ</a>をご覧ください。 </code></pre>  <h3 id=\"api_endpoint\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"about_authorize\">認証について</h3> <p>OAuth2.0を利用します。詳細は<a href=\"https://developer.freee.co.jp/docs\" target=\"_blank\">ドキュメントの認証</a>パートを参照してください。</p>  <h3 id=\"data_format\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポートしていますが、詳細は、API毎の説明欄（application/jsonなど）を確認してください。</p>  <h3 id=\"compatibility\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"common_response_header\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"common_error_response\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li> <li> <p>一部のエラーレスポンスにはエラーコードが含まれます。<br>詳細は、<a href=\"https://developer.freee.co.jp/tips/faq/40x-checkpoint\">HTTPステータスコード400台エラー時のチェックポイント</a>を参照してください</p> </li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"api_rate_limit\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"reports_api_endpoint\">/reportsエンドポイント</h4>  <p>freeeは/reportsエンドポイントに対して1秒間に10以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"plan_api_rate_limit\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <h3 id=\"webhook\">Webhookについて</h3>  <p>詳細は<a href=\"https://developer.freee.co.jp/docs/accounting/webhook\" target=\"_blank\">会計Webhook概要</a>を参照してください。</p>  <hr /> <h2 id=\"contact\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Freee.Accounting.Client.OpenAPIDateConverter;

namespace Freee.Accounting.Models
{
    /// <summary>
    /// TrialPlThreeYearsResponseTrialPlThreeYearsBalances
    /// </summary>
    [DataContract(Name = "trialPlThreeYearsResponse_trial_pl_three_years_balances")]
    public partial class TrialPlThreeYearsResponseTrialPlThreeYearsBalances : IEquatable<TrialPlThreeYearsResponseTrialPlThreeYearsBalances>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrialPlThreeYearsResponseTrialPlThreeYearsBalances" /> class.
        /// </summary>
        /// <param name="accountCategoryName">勘定科目カテゴリー名.</param>
        /// <param name="accountGroupName">決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる).</param>
        /// <param name="accountItemId">勘定科目ID(勘定科目の時のみ含まれる).</param>
        /// <param name="accountItemName">勘定科目名(勘定科目の時のみ含まれる).</param>
        /// <param name="closingBalance">期末残高.</param>
        /// <param name="hierarchyLevel">階層レベル.</param>
        /// <param name="items">breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる.</param>
        /// <param name="lastYearClosingBalance">前年度期末残高.</param>
        /// <param name="parentAccountCategoryName">上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる).</param>
        /// <param name="partners">breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる.</param>
        /// <param name="sections">breakdown_display_type:section, account_item_display_type:account_item指定時のみ含まれる.</param>
        /// <param name="totalLine">合計行(勘定科目カテゴリーの時のみ含まれる).</param>
        /// <param name="twoYearsBeforeClosingBalance">前々年度期末残高.</param>
        /// <param name="yearOnYear">前年比.</param>
        public TrialPlThreeYearsResponseTrialPlThreeYearsBalances(string accountCategoryName = default(string), string accountGroupName = default(string), int accountItemId = default(int), string accountItemName = default(string), int closingBalance = default(int), int hierarchyLevel = default(int), List<TrialBsThreeYearsResponseTrialBsThreeYearsItems> items = default(List<TrialBsThreeYearsResponseTrialBsThreeYearsItems>), int lastYearClosingBalance = default(int), string parentAccountCategoryName = default(string), List<TrialBsThreeYearsResponseTrialBsThreeYearsPartners> partners = default(List<TrialBsThreeYearsResponseTrialBsThreeYearsPartners>), List<TrialPlThreeYearsResponseTrialPlThreeYearsSections> sections = default(List<TrialPlThreeYearsResponseTrialPlThreeYearsSections>), bool totalLine = default(bool), int twoYearsBeforeClosingBalance = default(int), decimal yearOnYear = default(decimal))
        {
            this.AccountCategoryName = accountCategoryName;
            this.AccountGroupName = accountGroupName;
            this.AccountItemId = accountItemId;
            this.AccountItemName = accountItemName;
            this.ClosingBalance = closingBalance;
            this.HierarchyLevel = hierarchyLevel;
            this.Items = items;
            this.LastYearClosingBalance = lastYearClosingBalance;
            this.ParentAccountCategoryName = parentAccountCategoryName;
            this.Partners = partners;
            this.Sections = sections;
            this.TotalLine = totalLine;
            this.TwoYearsBeforeClosingBalance = twoYearsBeforeClosingBalance;
            this.YearOnYear = yearOnYear;
        }

        /// <summary>
        /// 勘定科目カテゴリー名
        /// </summary>
        /// <value>勘定科目カテゴリー名</value>
        [DataMember(Name = "account_category_name", EmitDefaultValue = false)]
        public string AccountCategoryName { get; set; }

        /// <summary>
        /// 決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる)
        /// </summary>
        /// <value>決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる)</value>
        [DataMember(Name = "account_group_name", EmitDefaultValue = false)]
        public string AccountGroupName { get; set; }

        /// <summary>
        /// 勘定科目ID(勘定科目の時のみ含まれる)
        /// </summary>
        /// <value>勘定科目ID(勘定科目の時のみ含まれる)</value>
        [DataMember(Name = "account_item_id", EmitDefaultValue = false)]
        public int AccountItemId { get; set; }

        /// <summary>
        /// 勘定科目名(勘定科目の時のみ含まれる)
        /// </summary>
        /// <value>勘定科目名(勘定科目の時のみ含まれる)</value>
        [DataMember(Name = "account_item_name", EmitDefaultValue = false)]
        public string AccountItemName { get; set; }

        /// <summary>
        /// 期末残高
        /// </summary>
        /// <value>期末残高</value>
        [DataMember(Name = "closing_balance", EmitDefaultValue = false)]
        public int ClosingBalance { get; set; }

        /// <summary>
        /// 階層レベル
        /// </summary>
        /// <value>階層レベル</value>
        [DataMember(Name = "hierarchy_level", EmitDefaultValue = false)]
        public int HierarchyLevel { get; set; }

        /// <summary>
        /// breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる
        /// </summary>
        /// <value>breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<TrialBsThreeYearsResponseTrialBsThreeYearsItems> Items { get; set; }

        /// <summary>
        /// 前年度期末残高
        /// </summary>
        /// <value>前年度期末残高</value>
        [DataMember(Name = "last_year_closing_balance", EmitDefaultValue = false)]
        public int LastYearClosingBalance { get; set; }

        /// <summary>
        /// 上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる)
        /// </summary>
        /// <value>上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる)</value>
        [DataMember(Name = "parent_account_category_name", EmitDefaultValue = false)]
        public string ParentAccountCategoryName { get; set; }

        /// <summary>
        /// breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる
        /// </summary>
        /// <value>breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる</value>
        [DataMember(Name = "partners", EmitDefaultValue = false)]
        public List<TrialBsThreeYearsResponseTrialBsThreeYearsPartners> Partners { get; set; }

        /// <summary>
        /// breakdown_display_type:section, account_item_display_type:account_item指定時のみ含まれる
        /// </summary>
        /// <value>breakdown_display_type:section, account_item_display_type:account_item指定時のみ含まれる</value>
        [DataMember(Name = "sections", EmitDefaultValue = false)]
        public List<TrialPlThreeYearsResponseTrialPlThreeYearsSections> Sections { get; set; }

        /// <summary>
        /// 合計行(勘定科目カテゴリーの時のみ含まれる)
        /// </summary>
        /// <value>合計行(勘定科目カテゴリーの時のみ含まれる)</value>
        [DataMember(Name = "total_line", EmitDefaultValue = false)]
        public bool TotalLine { get; set; }

        /// <summary>
        /// 前々年度期末残高
        /// </summary>
        /// <value>前々年度期末残高</value>
        [DataMember(Name = "two_years_before_closing_balance", EmitDefaultValue = false)]
        public int TwoYearsBeforeClosingBalance { get; set; }

        /// <summary>
        /// 前年比
        /// </summary>
        /// <value>前年比</value>
        [DataMember(Name = "year_on_year", EmitDefaultValue = false)]
        public decimal YearOnYear { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrialPlThreeYearsResponseTrialPlThreeYearsBalances {\n");
            sb.Append("  AccountCategoryName: ").Append(AccountCategoryName).Append("\n");
            sb.Append("  AccountGroupName: ").Append(AccountGroupName).Append("\n");
            sb.Append("  AccountItemId: ").Append(AccountItemId).Append("\n");
            sb.Append("  AccountItemName: ").Append(AccountItemName).Append("\n");
            sb.Append("  ClosingBalance: ").Append(ClosingBalance).Append("\n");
            sb.Append("  HierarchyLevel: ").Append(HierarchyLevel).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  LastYearClosingBalance: ").Append(LastYearClosingBalance).Append("\n");
            sb.Append("  ParentAccountCategoryName: ").Append(ParentAccountCategoryName).Append("\n");
            sb.Append("  Partners: ").Append(Partners).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  TotalLine: ").Append(TotalLine).Append("\n");
            sb.Append("  TwoYearsBeforeClosingBalance: ").Append(TwoYearsBeforeClosingBalance).Append("\n");
            sb.Append("  YearOnYear: ").Append(YearOnYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrialPlThreeYearsResponseTrialPlThreeYearsBalances);
        }

        /// <summary>
        /// Returns true if TrialPlThreeYearsResponseTrialPlThreeYearsBalances instances are equal
        /// </summary>
        /// <param name="input">Instance of TrialPlThreeYearsResponseTrialPlThreeYearsBalances to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrialPlThreeYearsResponseTrialPlThreeYearsBalances input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountCategoryName == input.AccountCategoryName ||
                    (this.AccountCategoryName != null &&
                    this.AccountCategoryName.Equals(input.AccountCategoryName))
                ) && 
                (
                    this.AccountGroupName == input.AccountGroupName ||
                    (this.AccountGroupName != null &&
                    this.AccountGroupName.Equals(input.AccountGroupName))
                ) && 
                (
                    this.AccountItemId == input.AccountItemId ||
                    this.AccountItemId.Equals(input.AccountItemId)
                ) && 
                (
                    this.AccountItemName == input.AccountItemName ||
                    (this.AccountItemName != null &&
                    this.AccountItemName.Equals(input.AccountItemName))
                ) && 
                (
                    this.ClosingBalance == input.ClosingBalance ||
                    this.ClosingBalance.Equals(input.ClosingBalance)
                ) && 
                (
                    this.HierarchyLevel == input.HierarchyLevel ||
                    this.HierarchyLevel.Equals(input.HierarchyLevel)
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.LastYearClosingBalance == input.LastYearClosingBalance ||
                    this.LastYearClosingBalance.Equals(input.LastYearClosingBalance)
                ) && 
                (
                    this.ParentAccountCategoryName == input.ParentAccountCategoryName ||
                    (this.ParentAccountCategoryName != null &&
                    this.ParentAccountCategoryName.Equals(input.ParentAccountCategoryName))
                ) && 
                (
                    this.Partners == input.Partners ||
                    this.Partners != null &&
                    input.Partners != null &&
                    this.Partners.SequenceEqual(input.Partners)
                ) && 
                (
                    this.Sections == input.Sections ||
                    this.Sections != null &&
                    input.Sections != null &&
                    this.Sections.SequenceEqual(input.Sections)
                ) && 
                (
                    this.TotalLine == input.TotalLine ||
                    this.TotalLine.Equals(input.TotalLine)
                ) && 
                (
                    this.TwoYearsBeforeClosingBalance == input.TwoYearsBeforeClosingBalance ||
                    this.TwoYearsBeforeClosingBalance.Equals(input.TwoYearsBeforeClosingBalance)
                ) && 
                (
                    this.YearOnYear == input.YearOnYear ||
                    this.YearOnYear.Equals(input.YearOnYear)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountCategoryName != null)
                    hashCode = hashCode * 59 + this.AccountCategoryName.GetHashCode();
                if (this.AccountGroupName != null)
                    hashCode = hashCode * 59 + this.AccountGroupName.GetHashCode();
                hashCode = hashCode * 59 + this.AccountItemId.GetHashCode();
                if (this.AccountItemName != null)
                    hashCode = hashCode * 59 + this.AccountItemName.GetHashCode();
                hashCode = hashCode * 59 + this.ClosingBalance.GetHashCode();
                hashCode = hashCode * 59 + this.HierarchyLevel.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                hashCode = hashCode * 59 + this.LastYearClosingBalance.GetHashCode();
                if (this.ParentAccountCategoryName != null)
                    hashCode = hashCode * 59 + this.ParentAccountCategoryName.GetHashCode();
                if (this.Partners != null)
                    hashCode = hashCode * 59 + this.Partners.GetHashCode();
                if (this.Sections != null)
                    hashCode = hashCode * 59 + this.Sections.GetHashCode();
                hashCode = hashCode * 59 + this.TotalLine.GetHashCode();
                hashCode = hashCode * 59 + this.TwoYearsBeforeClosingBalance.GetHashCode();
                hashCode = hashCode * 59 + this.YearOnYear.GetHashCode();
                return hashCode;
            }
        }

    }

}
