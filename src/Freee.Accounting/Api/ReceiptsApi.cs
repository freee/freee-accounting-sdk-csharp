/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Freee.Accounting.Client;
using Freee.Accounting.Models;

namespace Freee.Accounting.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiptsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ファイルボックス（証憑ファイル）のアップロード
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="receipt">証憑ファイル</param>
        /// <param name="description">メモ (255文字以内) (optional)</param>
        /// <param name="documentType">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 書類の種類（receipt: 領収書、invoice: 請求書、other: その他）  (optional)</param>
        /// <param name="issueDate">取引日 (yyyy-mm-dd) (optional)</param>
        /// <param name="qualifiedInvoice">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 適格請求書等（qualified: 該当する、not_qualified: 該当しない、unselected: 未選択）  (optional)</param>
        /// <param name="receiptMetadatumAmount">金額 (optional)</param>
        /// <param name="receiptMetadatumIssueDate">発行日 (yyyy-mm-dd) (optional)</param>
        /// <param name="receiptMetadatumPartnerName">発行元 (optional)</param>
        /// <returns>ReceiptResponse</returns>
        ReceiptResponse CreateReceipt(int companyId, System.IO.Stream receipt, string description = default(string), string documentType = default(string), string issueDate = default(string), string qualifiedInvoice = default(string), long? receiptMetadatumAmount = default(long?), string receiptMetadatumIssueDate = default(string), string receiptMetadatumPartnerName = default(string));

        /// <summary>
        /// ファイルボックス（証憑ファイル）のアップロード
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="receipt">証憑ファイル</param>
        /// <param name="description">メモ (255文字以内) (optional)</param>
        /// <param name="documentType">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 書類の種類（receipt: 領収書、invoice: 請求書、other: その他）  (optional)</param>
        /// <param name="issueDate">取引日 (yyyy-mm-dd) (optional)</param>
        /// <param name="qualifiedInvoice">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 適格請求書等（qualified: 該当する、not_qualified: 該当しない、unselected: 未選択）  (optional)</param>
        /// <param name="receiptMetadatumAmount">金額 (optional)</param>
        /// <param name="receiptMetadatumIssueDate">発行日 (yyyy-mm-dd) (optional)</param>
        /// <param name="receiptMetadatumPartnerName">発行元 (optional)</param>
        /// <returns>ApiResponse of ReceiptResponse</returns>
        ApiResponse<ReceiptResponse> CreateReceiptWithHttpInfo(int companyId, System.IO.Stream receipt, string description = default(string), string documentType = default(string), string issueDate = default(string), string qualifiedInvoice = default(string), long? receiptMetadatumAmount = default(long?), string receiptMetadatumIssueDate = default(string), string receiptMetadatumPartnerName = default(string));
        /// <summary>
        /// ファイルボックス（証憑ファイル）の削除
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns></returns>
        void DestroyReceipt(int id, int companyId);

        /// <summary>
        /// ファイルボックス（証憑ファイル）の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyReceiptWithHttpInfo(int id, int companyId);
        /// <summary>
        /// ファイルボックス（証憑ファイル）のダウンロード
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadReceipt(int id, int companyId);

        /// <summary>
        /// ファイルボックス（証憑ファイル）のダウンロード
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadReceiptWithHttpInfo(int id, int companyId);
        /// <summary>
        /// ファイルボックス（証憑ファイル）の取得
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ReceiptResponse</returns>
        ReceiptResponse GetReceipt(int id, int companyId);

        /// <summary>
        /// ファイルボックス（証憑ファイル）の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of ReceiptResponse</returns>
        ApiResponse<ReceiptResponse> GetReceiptWithHttpInfo(int id, int companyId);
        /// <summary>
        /// ファイルボックス（証憑ファイル）一覧の取得
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="endDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="userName">アップロードしたユーザー名、メールアドレス (optional)</param>
        /// <param name="number">アップロードファイルNo (optional)</param>
        /// <param name="commentType">posted:コメントあり, raised:未解決, resolved:解決済 (optional)</param>
        /// <param name="commentImportant">trueの時、重要コメント付きが対象 (optional)</param>
        /// <param name="category">all:すべて、without_deal:未登録、with_expense_application_line:経費申請中, with_deal:登録済み、ignored:無視 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetReceipts(int companyId, string startDate, string endDate, string userName = default(string), int? number = default(int?), string commentType = default(string), bool? commentImportant = default(bool?), string category = default(string), long? offset = default(long?), int? limit = default(int?));

        /// <summary>
        /// ファイルボックス（証憑ファイル）一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="endDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="userName">アップロードしたユーザー名、メールアドレス (optional)</param>
        /// <param name="number">アップロードファイルNo (optional)</param>
        /// <param name="commentType">posted:コメントあり, raised:未解決, resolved:解決済 (optional)</param>
        /// <param name="commentImportant">trueの時、重要コメント付きが対象 (optional)</param>
        /// <param name="category">all:すべて、without_deal:未登録、with_expense_application_line:経費申請中, with_deal:登録済み、ignored:無視 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetReceiptsWithHttpInfo(int companyId, string startDate, string endDate, string userName = default(string), int? number = default(int?), string commentType = default(string), bool? commentImportant = default(bool?), string category = default(string), long? offset = default(long?), int? limit = default(int?));
        /// <summary>
        /// ファイルボックス（証憑ファイル）の更新
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="receiptUpdateParams"></param>
        /// <returns>ReceiptResponse</returns>
        ReceiptResponse UpdateReceipt(int id, ReceiptUpdateParams receiptUpdateParams);

        /// <summary>
        /// ファイルボックス（証憑ファイル）の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="receiptUpdateParams"></param>
        /// <returns>ApiResponse of ReceiptResponse</returns>
        ApiResponse<ReceiptResponse> UpdateReceiptWithHttpInfo(int id, ReceiptUpdateParams receiptUpdateParams);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiptsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// ファイルボックス（証憑ファイル）のアップロード
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="receipt">証憑ファイル</param>
        /// <param name="description">メモ (255文字以内) (optional)</param>
        /// <param name="documentType">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 書類の種類（receipt: 領収書、invoice: 請求書、other: その他）  (optional)</param>
        /// <param name="issueDate">取引日 (yyyy-mm-dd) (optional)</param>
        /// <param name="qualifiedInvoice">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 適格請求書等（qualified: 該当する、not_qualified: 該当しない、unselected: 未選択）  (optional)</param>
        /// <param name="receiptMetadatumAmount">金額 (optional)</param>
        /// <param name="receiptMetadatumIssueDate">発行日 (yyyy-mm-dd) (optional)</param>
        /// <param name="receiptMetadatumPartnerName">発行元 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReceiptResponse</returns>
        System.Threading.Tasks.Task<ReceiptResponse> CreateReceiptAsync(int companyId, System.IO.Stream receipt, string description = default(string), string documentType = default(string), string issueDate = default(string), string qualifiedInvoice = default(string), long? receiptMetadatumAmount = default(long?), string receiptMetadatumIssueDate = default(string), string receiptMetadatumPartnerName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ファイルボックス（証憑ファイル）のアップロード
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="receipt">証憑ファイル</param>
        /// <param name="description">メモ (255文字以内) (optional)</param>
        /// <param name="documentType">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 書類の種類（receipt: 領収書、invoice: 請求書、other: その他）  (optional)</param>
        /// <param name="issueDate">取引日 (yyyy-mm-dd) (optional)</param>
        /// <param name="qualifiedInvoice">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 適格請求書等（qualified: 該当する、not_qualified: 該当しない、unselected: 未選択）  (optional)</param>
        /// <param name="receiptMetadatumAmount">金額 (optional)</param>
        /// <param name="receiptMetadatumIssueDate">発行日 (yyyy-mm-dd) (optional)</param>
        /// <param name="receiptMetadatumPartnerName">発行元 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReceiptResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReceiptResponse>> CreateReceiptWithHttpInfoAsync(int companyId, System.IO.Stream receipt, string description = default(string), string documentType = default(string), string issueDate = default(string), string qualifiedInvoice = default(string), long? receiptMetadatumAmount = default(long?), string receiptMetadatumIssueDate = default(string), string receiptMetadatumPartnerName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ファイルボックス（証憑ファイル）の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyReceiptAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ファイルボックス（証憑ファイル）の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyReceiptWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ファイルボックス（証憑ファイル）のダウンロード
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadReceiptAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ファイルボックス（証憑ファイル）のダウンロード
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadReceiptWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ファイルボックス（証憑ファイル）の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReceiptResponse</returns>
        System.Threading.Tasks.Task<ReceiptResponse> GetReceiptAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ファイルボックス（証憑ファイル）の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReceiptResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReceiptResponse>> GetReceiptWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ファイルボックス（証憑ファイル）一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="endDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="userName">アップロードしたユーザー名、メールアドレス (optional)</param>
        /// <param name="number">アップロードファイルNo (optional)</param>
        /// <param name="commentType">posted:コメントあり, raised:未解決, resolved:解決済 (optional)</param>
        /// <param name="commentImportant">trueの時、重要コメント付きが対象 (optional)</param>
        /// <param name="category">all:すべて、without_deal:未登録、with_expense_application_line:経費申請中, with_deal:登録済み、ignored:無視 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetReceiptsAsync(int companyId, string startDate, string endDate, string userName = default(string), int? number = default(int?), string commentType = default(string), bool? commentImportant = default(bool?), string category = default(string), long? offset = default(long?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ファイルボックス（証憑ファイル）一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="endDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="userName">アップロードしたユーザー名、メールアドレス (optional)</param>
        /// <param name="number">アップロードファイルNo (optional)</param>
        /// <param name="commentType">posted:コメントあり, raised:未解決, resolved:解決済 (optional)</param>
        /// <param name="commentImportant">trueの時、重要コメント付きが対象 (optional)</param>
        /// <param name="category">all:すべて、without_deal:未登録、with_expense_application_line:経費申請中, with_deal:登録済み、ignored:無視 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetReceiptsWithHttpInfoAsync(int companyId, string startDate, string endDate, string userName = default(string), int? number = default(int?), string commentType = default(string), bool? commentImportant = default(bool?), string category = default(string), long? offset = default(long?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ファイルボックス（証憑ファイル）の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="receiptUpdateParams"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReceiptResponse</returns>
        System.Threading.Tasks.Task<ReceiptResponse> UpdateReceiptAsync(int id, ReceiptUpdateParams receiptUpdateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ファイルボックス（証憑ファイル）の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="receiptUpdateParams"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReceiptResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReceiptResponse>> UpdateReceiptWithHttpInfoAsync(int id, ReceiptUpdateParams receiptUpdateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiptsApi : IReceiptsApiSync, IReceiptsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReceiptsApi : IReceiptsApi
    {
        private Freee.Accounting.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReceiptsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReceiptsApi(string basePath)
        {
            this.Configuration = Freee.Accounting.Client.Configuration.MergeConfigurations(
                Freee.Accounting.Client.GlobalConfiguration.Instance,
                new Freee.Accounting.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReceiptsApi(Freee.Accounting.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Freee.Accounting.Client.Configuration.MergeConfigurations(
                Freee.Accounting.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReceiptsApi(Freee.Accounting.Client.ISynchronousClient client, Freee.Accounting.Client.IAsynchronousClient asyncClient, Freee.Accounting.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Freee.Accounting.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Freee.Accounting.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Freee.Accounting.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Freee.Accounting.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）のアップロード 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="receipt">証憑ファイル</param>
        /// <param name="description">メモ (255文字以内) (optional)</param>
        /// <param name="documentType">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 書類の種類（receipt: 領収書、invoice: 請求書、other: その他）  (optional)</param>
        /// <param name="issueDate">取引日 (yyyy-mm-dd) (optional)</param>
        /// <param name="qualifiedInvoice">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 適格請求書等（qualified: 該当する、not_qualified: 該当しない、unselected: 未選択）  (optional)</param>
        /// <param name="receiptMetadatumAmount">金額 (optional)</param>
        /// <param name="receiptMetadatumIssueDate">発行日 (yyyy-mm-dd) (optional)</param>
        /// <param name="receiptMetadatumPartnerName">発行元 (optional)</param>
        /// <returns>ReceiptResponse</returns>
        public ReceiptResponse CreateReceipt(int companyId, System.IO.Stream receipt, string description = default(string), string documentType = default(string), string issueDate = default(string), string qualifiedInvoice = default(string), long? receiptMetadatumAmount = default(long?), string receiptMetadatumIssueDate = default(string), string receiptMetadatumPartnerName = default(string))
        {
            Freee.Accounting.Client.ApiResponse<ReceiptResponse> localVarResponse = CreateReceiptWithHttpInfo(companyId, receipt, description, documentType, issueDate, qualifiedInvoice, receiptMetadatumAmount, receiptMetadatumIssueDate, receiptMetadatumPartnerName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）のアップロード 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="receipt">証憑ファイル</param>
        /// <param name="description">メモ (255文字以内) (optional)</param>
        /// <param name="documentType">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 書類の種類（receipt: 領収書、invoice: 請求書、other: その他）  (optional)</param>
        /// <param name="issueDate">取引日 (yyyy-mm-dd) (optional)</param>
        /// <param name="qualifiedInvoice">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 適格請求書等（qualified: 該当する、not_qualified: 該当しない、unselected: 未選択）  (optional)</param>
        /// <param name="receiptMetadatumAmount">金額 (optional)</param>
        /// <param name="receiptMetadatumIssueDate">発行日 (yyyy-mm-dd) (optional)</param>
        /// <param name="receiptMetadatumPartnerName">発行元 (optional)</param>
        /// <returns>ApiResponse of ReceiptResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ReceiptResponse> CreateReceiptWithHttpInfo(int companyId, System.IO.Stream receipt, string description = default(string), string documentType = default(string), string issueDate = default(string), string qualifiedInvoice = default(string), long? receiptMetadatumAmount = default(long?), string receiptMetadatumIssueDate = default(string), string receiptMetadatumPartnerName = default(string))
        {
            // verify the required parameter 'receipt' is set
            if (receipt == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'receipt' when calling ReceiptsApi->CreateReceipt");
            }

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("company_id", Freee.Accounting.Client.ClientUtils.ParameterToString(companyId)); // form parameter
            if (description != null)
            {
                localVarRequestOptions.FormParameters.Add("description", Freee.Accounting.Client.ClientUtils.ParameterToString(description)); // form parameter
            }
            if (documentType != null)
            {
                localVarRequestOptions.FormParameters.Add("document_type", Freee.Accounting.Client.ClientUtils.ParameterToString(documentType)); // form parameter
            }
            if (issueDate != null)
            {
                localVarRequestOptions.FormParameters.Add("issue_date", Freee.Accounting.Client.ClientUtils.ParameterToString(issueDate)); // form parameter
            }
            if (qualifiedInvoice != null)
            {
                localVarRequestOptions.FormParameters.Add("qualified_invoice", Freee.Accounting.Client.ClientUtils.ParameterToString(qualifiedInvoice)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("receipt", receipt);
            if (receiptMetadatumAmount != null)
            {
                localVarRequestOptions.FormParameters.Add("receipt_metadatum_amount", Freee.Accounting.Client.ClientUtils.ParameterToString(receiptMetadatumAmount)); // form parameter
            }
            if (receiptMetadatumIssueDate != null)
            {
                localVarRequestOptions.FormParameters.Add("receipt_metadatum_issue_date", Freee.Accounting.Client.ClientUtils.ParameterToString(receiptMetadatumIssueDate)); // form parameter
            }
            if (receiptMetadatumPartnerName != null)
            {
                localVarRequestOptions.FormParameters.Add("receipt_metadatum_partner_name", Freee.Accounting.Client.ClientUtils.ParameterToString(receiptMetadatumPartnerName)); // form parameter
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReceiptResponse>("/api/1/receipts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）のアップロード 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="receipt">証憑ファイル</param>
        /// <param name="description">メモ (255文字以内) (optional)</param>
        /// <param name="documentType">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 書類の種類（receipt: 領収書、invoice: 請求書、other: その他）  (optional)</param>
        /// <param name="issueDate">取引日 (yyyy-mm-dd) (optional)</param>
        /// <param name="qualifiedInvoice">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 適格請求書等（qualified: 該当する、not_qualified: 該当しない、unselected: 未選択）  (optional)</param>
        /// <param name="receiptMetadatumAmount">金額 (optional)</param>
        /// <param name="receiptMetadatumIssueDate">発行日 (yyyy-mm-dd) (optional)</param>
        /// <param name="receiptMetadatumPartnerName">発行元 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReceiptResponse</returns>
        public async System.Threading.Tasks.Task<ReceiptResponse> CreateReceiptAsync(int companyId, System.IO.Stream receipt, string description = default(string), string documentType = default(string), string issueDate = default(string), string qualifiedInvoice = default(string), long? receiptMetadatumAmount = default(long?), string receiptMetadatumIssueDate = default(string), string receiptMetadatumPartnerName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ReceiptResponse> localVarResponse = await CreateReceiptWithHttpInfoAsync(companyId, receipt, description, documentType, issueDate, qualifiedInvoice, receiptMetadatumAmount, receiptMetadatumIssueDate, receiptMetadatumPartnerName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）のアップロード 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="receipt">証憑ファイル</param>
        /// <param name="description">メモ (255文字以内) (optional)</param>
        /// <param name="documentType">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 書類の種類（receipt: 領収書、invoice: 請求書、other: その他）  (optional)</param>
        /// <param name="issueDate">取引日 (yyyy-mm-dd) (optional)</param>
        /// <param name="qualifiedInvoice">この項目はインボイス制度で利用する項目です。2023年4月頃から利用できる予定です。 適格請求書等（qualified: 該当する、not_qualified: 該当しない、unselected: 未選択）  (optional)</param>
        /// <param name="receiptMetadatumAmount">金額 (optional)</param>
        /// <param name="receiptMetadatumIssueDate">発行日 (yyyy-mm-dd) (optional)</param>
        /// <param name="receiptMetadatumPartnerName">発行元 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReceiptResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ReceiptResponse>> CreateReceiptWithHttpInfoAsync(int companyId, System.IO.Stream receipt, string description = default(string), string documentType = default(string), string issueDate = default(string), string qualifiedInvoice = default(string), long? receiptMetadatumAmount = default(long?), string receiptMetadatumIssueDate = default(string), string receiptMetadatumPartnerName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'receipt' is set
            if (receipt == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'receipt' when calling ReceiptsApi->CreateReceipt");
            }


            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("company_id", Freee.Accounting.Client.ClientUtils.ParameterToString(companyId)); // form parameter
            if (description != null)
            {
                localVarRequestOptions.FormParameters.Add("description", Freee.Accounting.Client.ClientUtils.ParameterToString(description)); // form parameter
            }
            if (documentType != null)
            {
                localVarRequestOptions.FormParameters.Add("document_type", Freee.Accounting.Client.ClientUtils.ParameterToString(documentType)); // form parameter
            }
            if (issueDate != null)
            {
                localVarRequestOptions.FormParameters.Add("issue_date", Freee.Accounting.Client.ClientUtils.ParameterToString(issueDate)); // form parameter
            }
            if (qualifiedInvoice != null)
            {
                localVarRequestOptions.FormParameters.Add("qualified_invoice", Freee.Accounting.Client.ClientUtils.ParameterToString(qualifiedInvoice)); // form parameter
            }
            localVarRequestOptions.FileParameters.Add("receipt", receipt);
            if (receiptMetadatumAmount != null)
            {
                localVarRequestOptions.FormParameters.Add("receipt_metadatum_amount", Freee.Accounting.Client.ClientUtils.ParameterToString(receiptMetadatumAmount)); // form parameter
            }
            if (receiptMetadatumIssueDate != null)
            {
                localVarRequestOptions.FormParameters.Add("receipt_metadatum_issue_date", Freee.Accounting.Client.ClientUtils.ParameterToString(receiptMetadatumIssueDate)); // form parameter
            }
            if (receiptMetadatumPartnerName != null)
            {
                localVarRequestOptions.FormParameters.Add("receipt_metadatum_partner_name", Freee.Accounting.Client.ClientUtils.ParameterToString(receiptMetadatumPartnerName)); // form parameter
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReceiptResponse>("/api/1/receipts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns></returns>
        public void DestroyReceipt(int id, int companyId)
        {
            DestroyReceiptWithHttpInfo(id, companyId);
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Freee.Accounting.Client.ApiResponse<Object> DestroyReceiptWithHttpInfo(int id, int companyId)
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/1/receipts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyReceiptAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyReceiptWithHttpInfoAsync(id, companyId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<Object>> DestroyReceiptWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/1/receipts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）のダウンロード 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadReceipt(int id, int companyId)
        {
            Freee.Accounting.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadReceiptWithHttpInfo(id, companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）のダウンロード 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Freee.Accounting.Client.ApiResponse<System.IO.Stream> DownloadReceiptWithHttpInfo(int id, int companyId)
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "image/_*",
                "text/csv",
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/api/1/receipts/{id}/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）のダウンロード 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadReceiptAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadReceiptWithHttpInfoAsync(id, companyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）のダウンロード 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<System.IO.Stream>> DownloadReceiptWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/pdf",
                "image/_*",
                "text/csv",
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/api/1/receipts/{id}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ReceiptResponse</returns>
        public ReceiptResponse GetReceipt(int id, int companyId)
        {
            Freee.Accounting.Client.ApiResponse<ReceiptResponse> localVarResponse = GetReceiptWithHttpInfo(id, companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of ReceiptResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ReceiptResponse> GetReceiptWithHttpInfo(int id, int companyId)
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReceiptResponse>("/api/1/receipts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReceiptResponse</returns>
        public async System.Threading.Tasks.Task<ReceiptResponse> GetReceiptAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ReceiptResponse> localVarResponse = await GetReceiptWithHttpInfoAsync(id, companyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReceiptResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ReceiptResponse>> GetReceiptWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReceiptResponse>("/api/1/receipts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="endDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="userName">アップロードしたユーザー名、メールアドレス (optional)</param>
        /// <param name="number">アップロードファイルNo (optional)</param>
        /// <param name="commentType">posted:コメントあり, raised:未解決, resolved:解決済 (optional)</param>
        /// <param name="commentImportant">trueの時、重要コメント付きが対象 (optional)</param>
        /// <param name="category">all:すべて、without_deal:未登録、with_expense_application_line:経費申請中, with_deal:登録済み、ignored:無視 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetReceipts(int companyId, string startDate, string endDate, string userName = default(string), int? number = default(int?), string commentType = default(string), bool? commentImportant = default(bool?), string category = default(string), long? offset = default(long?), int? limit = default(int?))
        {
            Freee.Accounting.Client.ApiResponse<InlineResponse2005> localVarResponse = GetReceiptsWithHttpInfo(companyId, startDate, endDate, userName, number, commentType, commentImportant, category, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="endDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="userName">アップロードしたユーザー名、メールアドレス (optional)</param>
        /// <param name="number">アップロードファイルNo (optional)</param>
        /// <param name="commentType">posted:コメントあり, raised:未解決, resolved:解決済 (optional)</param>
        /// <param name="commentImportant">trueの時、重要コメント付きが対象 (optional)</param>
        /// <param name="category">all:すべて、without_deal:未登録、with_expense_application_line:経費申請中, with_deal:登録済み、ignored:無視 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public Freee.Accounting.Client.ApiResponse<InlineResponse2005> GetReceiptsWithHttpInfo(int companyId, string startDate, string endDate, string userName = default(string), int? number = default(int?), string commentType = default(string), bool? commentImportant = default(bool?), string category = default(string), long? offset = default(long?), int? limit = default(int?))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'startDate' when calling ReceiptsApi->GetReceipts");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'endDate' when calling ReceiptsApi->GetReceipts");
            }

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            if (userName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "user_name", userName));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (commentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "comment_type", commentType));
            }
            if (commentImportant != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "comment_important", commentImportant));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2005>("/api/1/receipts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceipts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="endDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="userName">アップロードしたユーザー名、メールアドレス (optional)</param>
        /// <param name="number">アップロードファイルNo (optional)</param>
        /// <param name="commentType">posted:コメントあり, raised:未解決, resolved:解決済 (optional)</param>
        /// <param name="commentImportant">trueの時、重要コメント付きが対象 (optional)</param>
        /// <param name="category">all:すべて、without_deal:未登録、with_expense_application_line:経費申請中, with_deal:登録済み、ignored:無視 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> GetReceiptsAsync(int companyId, string startDate, string endDate, string userName = default(string), int? number = default(int?), string commentType = default(string), bool? commentImportant = default(bool?), string category = default(string), long? offset = default(long?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<InlineResponse2005> localVarResponse = await GetReceiptsWithHttpInfoAsync(companyId, startDate, endDate, userName, number, commentType, commentImportant, category, offset, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="endDate">アップロード日 (yyyy-mm-dd)</param>
        /// <param name="userName">アップロードしたユーザー名、メールアドレス (optional)</param>
        /// <param name="number">アップロードファイルNo (optional)</param>
        /// <param name="commentType">posted:コメントあり, raised:未解決, resolved:解決済 (optional)</param>
        /// <param name="commentImportant">trueの時、重要コメント付きが対象 (optional)</param>
        /// <param name="category">all:すべて、without_deal:未登録、with_expense_application_line:経費申請中, with_deal:登録済み、ignored:無視 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<InlineResponse2005>> GetReceiptsWithHttpInfoAsync(int companyId, string startDate, string endDate, string userName = default(string), int? number = default(int?), string commentType = default(string), bool? commentImportant = default(bool?), string category = default(string), long? offset = default(long?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'startDate' when calling ReceiptsApi->GetReceipts");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'endDate' when calling ReceiptsApi->GetReceipts");
            }


            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            if (userName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "user_name", userName));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (commentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "comment_type", commentType));
            }
            if (commentImportant != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "comment_important", commentImportant));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/api/1/receipts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceipts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="receiptUpdateParams"></param>
        /// <returns>ReceiptResponse</returns>
        public ReceiptResponse UpdateReceipt(int id, ReceiptUpdateParams receiptUpdateParams)
        {
            Freee.Accounting.Client.ApiResponse<ReceiptResponse> localVarResponse = UpdateReceiptWithHttpInfo(id, receiptUpdateParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="receiptUpdateParams"></param>
        /// <returns>ApiResponse of ReceiptResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ReceiptResponse> UpdateReceiptWithHttpInfo(int id, ReceiptUpdateParams receiptUpdateParams)
        {
            // verify the required parameter 'receiptUpdateParams' is set
            if (receiptUpdateParams == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'receiptUpdateParams' when calling ReceiptsApi->UpdateReceipt");
            }

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = receiptUpdateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ReceiptResponse>("/api/1/receipts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="receiptUpdateParams"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReceiptResponse</returns>
        public async System.Threading.Tasks.Task<ReceiptResponse> UpdateReceiptAsync(int id, ReceiptUpdateParams receiptUpdateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ReceiptResponse> localVarResponse = await UpdateReceiptWithHttpInfoAsync(id, receiptUpdateParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルボックス（証憑ファイル）の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ファイルボックス（証憑ファイル）ID</param>
        /// <param name="receiptUpdateParams"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReceiptResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ReceiptResponse>> UpdateReceiptWithHttpInfoAsync(int id, ReceiptUpdateParams receiptUpdateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'receiptUpdateParams' is set
            if (receiptUpdateParams == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'receiptUpdateParams' when calling ReceiptsApi->UpdateReceipt");
            }


            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = receiptUpdateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ReceiptResponse>("/api/1/receipts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReceipt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
