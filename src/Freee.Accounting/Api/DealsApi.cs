/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Freee.Accounting.Client;
using Freee.Accounting.Models;

namespace Freee.Accounting.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 取引（収入／支出）の作成
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealCreateParams">取引（収入／支出）の作成 (optional)</param>
        /// <returns>DealCreateResponse</returns>
        DealCreateResponse CreateDeal(DealCreateParams dealCreateParams = default(DealCreateParams));

        /// <summary>
        /// 取引（収入／支出）の作成
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealCreateParams">取引（収入／支出）の作成 (optional)</param>
        /// <returns>ApiResponse of DealCreateResponse</returns>
        ApiResponse<DealCreateResponse> CreateDealWithHttpInfo(DealCreateParams dealCreateParams = default(DealCreateParams));
        /// <summary>
        /// 取引（収入／支出）の削除
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns></returns>
        void DestroyDeal(int id, int companyId);

        /// <summary>
        /// 取引（収入／支出）の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyDealWithHttpInfo(int id, int companyId);
        /// <summary>
        /// 取引（収入／支出）の取得
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <returns>DealResponse</returns>
        DealResponse GetDeal(int companyId, int id, string accruals = default(string));

        /// <summary>
        /// 取引（収入／支出）の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <returns>ApiResponse of DealResponse</returns>
        ApiResponse<DealResponse> GetDealWithHttpInfo(int companyId, int id, string accruals = default(string));
        /// <summary>
        /// 取引（収入／支出）一覧の取得
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="partnerId">取引先IDで絞込 (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="status">決済状況で絞込 (未決済: unsettled, 完了: settled) (optional)</param>
        /// <param name="type">収支区分 (収入: income, 支出: expense) (optional)</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startDueDate">支払期日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endDueDate">支払期日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startRenewDate">+更新日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endRenewDate">+更新日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最大: 100)  (optional)</param>
        /// <param name="registeredFrom">取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ） (optional)</param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetDeals(int companyId, int? partnerId = default(int?), int? accountItemId = default(int?), string partnerCode = default(string), string status = default(string), string type = default(string), string startIssueDate = default(string), string endIssueDate = default(string), string startDueDate = default(string), string endDueDate = default(string), string startRenewDate = default(string), string endRenewDate = default(string), long? offset = default(long?), int? limit = default(int?), string registeredFrom = default(string), string accruals = default(string));

        /// <summary>
        /// 取引（収入／支出）一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="partnerId">取引先IDで絞込 (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="status">決済状況で絞込 (未決済: unsettled, 完了: settled) (optional)</param>
        /// <param name="type">収支区分 (収入: income, 支出: expense) (optional)</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startDueDate">支払期日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endDueDate">支払期日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startRenewDate">+更新日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endRenewDate">+更新日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最大: 100)  (optional)</param>
        /// <param name="registeredFrom">取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ） (optional)</param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetDealsWithHttpInfo(int companyId, int? partnerId = default(int?), int? accountItemId = default(int?), string partnerCode = default(string), string status = default(string), string type = default(string), string startIssueDate = default(string), string endIssueDate = default(string), string startDueDate = default(string), string endDueDate = default(string), string startRenewDate = default(string), string endRenewDate = default(string), long? offset = default(long?), int? limit = default(int?), string registeredFrom = default(string), string accruals = default(string));
        /// <summary>
        /// 取引（収入／支出）の更新
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="dealUpdateParams">取引（収入／支出）の更新 (optional)</param>
        /// <returns>DealResponse</returns>
        DealResponse UpdateDeal(int id, DealUpdateParams dealUpdateParams = default(DealUpdateParams));

        /// <summary>
        /// 取引（収入／支出）の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="dealUpdateParams">取引（収入／支出）の更新 (optional)</param>
        /// <returns>ApiResponse of DealResponse</returns>
        ApiResponse<DealResponse> UpdateDealWithHttpInfo(int id, DealUpdateParams dealUpdateParams = default(DealUpdateParams));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 取引（収入／支出）の作成
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealCreateParams">取引（収入／支出）の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealCreateResponse</returns>
        System.Threading.Tasks.Task<DealCreateResponse> CreateDealAsync(DealCreateParams dealCreateParams = default(DealCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引（収入／支出）の作成
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealCreateParams">取引（収入／支出）の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealCreateResponse>> CreateDealWithHttpInfoAsync(DealCreateParams dealCreateParams = default(DealCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 取引（収入／支出）の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyDealAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引（収入／支出）の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyDealWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 取引（収入／支出）の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealResponse</returns>
        System.Threading.Tasks.Task<DealResponse> GetDealAsync(int companyId, int id, string accruals = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引（収入／支出）の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealResponse>> GetDealWithHttpInfoAsync(int companyId, int id, string accruals = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 取引（収入／支出）一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="partnerId">取引先IDで絞込 (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="status">決済状況で絞込 (未決済: unsettled, 完了: settled) (optional)</param>
        /// <param name="type">収支区分 (収入: income, 支出: expense) (optional)</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startDueDate">支払期日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endDueDate">支払期日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startRenewDate">+更新日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endRenewDate">+更新日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最大: 100)  (optional)</param>
        /// <param name="registeredFrom">取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ） (optional)</param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetDealsAsync(int companyId, int? partnerId = default(int?), int? accountItemId = default(int?), string partnerCode = default(string), string status = default(string), string type = default(string), string startIssueDate = default(string), string endIssueDate = default(string), string startDueDate = default(string), string endDueDate = default(string), string startRenewDate = default(string), string endRenewDate = default(string), long? offset = default(long?), int? limit = default(int?), string registeredFrom = default(string), string accruals = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引（収入／支出）一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="partnerId">取引先IDで絞込 (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="status">決済状況で絞込 (未決済: unsettled, 完了: settled) (optional)</param>
        /// <param name="type">収支区分 (収入: income, 支出: expense) (optional)</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startDueDate">支払期日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endDueDate">支払期日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startRenewDate">+更新日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endRenewDate">+更新日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最大: 100)  (optional)</param>
        /// <param name="registeredFrom">取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ） (optional)</param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetDealsWithHttpInfoAsync(int companyId, int? partnerId = default(int?), int? accountItemId = default(int?), string partnerCode = default(string), string status = default(string), string type = default(string), string startIssueDate = default(string), string endIssueDate = default(string), string startDueDate = default(string), string endDueDate = default(string), string startRenewDate = default(string), string endRenewDate = default(string), long? offset = default(long?), int? limit = default(int?), string registeredFrom = default(string), string accruals = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 取引（収入／支出）の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="dealUpdateParams">取引（収入／支出）の更新 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealResponse</returns>
        System.Threading.Tasks.Task<DealResponse> UpdateDealAsync(int id, DealUpdateParams dealUpdateParams = default(DealUpdateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 取引（収入／支出）の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="dealUpdateParams">取引（収入／支出）の更新 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealResponse>> UpdateDealWithHttpInfoAsync(int id, DealUpdateParams dealUpdateParams = default(DealUpdateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsApi : IDealsApiSync, IDealsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DealsApi : IDealsApi
    {
        private Freee.Accounting.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DealsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DealsApi(string basePath)
        {
            this.Configuration = Freee.Accounting.Client.Configuration.MergeConfigurations(
                Freee.Accounting.Client.GlobalConfiguration.Instance,
                new Freee.Accounting.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DealsApi(Freee.Accounting.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Freee.Accounting.Client.Configuration.MergeConfigurations(
                Freee.Accounting.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DealsApi(Freee.Accounting.Client.ISynchronousClient client, Freee.Accounting.Client.IAsynchronousClient asyncClient, Freee.Accounting.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Freee.Accounting.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Freee.Accounting.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Freee.Accounting.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Freee.Accounting.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 取引（収入／支出）の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealCreateParams">取引（収入／支出）の作成 (optional)</param>
        /// <returns>DealCreateResponse</returns>
        public DealCreateResponse CreateDeal(DealCreateParams dealCreateParams = default(DealCreateParams))
        {
            Freee.Accounting.Client.ApiResponse<DealCreateResponse> localVarResponse = CreateDealWithHttpInfo(dealCreateParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引（収入／支出）の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealCreateParams">取引（収入／支出）の作成 (optional)</param>
        /// <returns>ApiResponse of DealCreateResponse</returns>
        public Freee.Accounting.Client.ApiResponse<DealCreateResponse> CreateDealWithHttpInfo(DealCreateParams dealCreateParams = default(DealCreateParams))
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dealCreateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DealCreateResponse>("/api/1/deals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDeal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引（収入／支出）の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealCreateParams">取引（収入／支出）の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealCreateResponse</returns>
        public async System.Threading.Tasks.Task<DealCreateResponse> CreateDealAsync(DealCreateParams dealCreateParams = default(DealCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<DealCreateResponse> localVarResponse = await CreateDealWithHttpInfoAsync(dealCreateParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引（収入／支出）の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dealCreateParams">取引（収入／支出）の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<DealCreateResponse>> CreateDealWithHttpInfoAsync(DealCreateParams dealCreateParams = default(DealCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = dealCreateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DealCreateResponse>("/api/1/deals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDeal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引（収入／支出）の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns></returns>
        public void DestroyDeal(int id, int companyId)
        {
            DestroyDealWithHttpInfo(id, companyId);
        }

        /// <summary>
        /// 取引（収入／支出）の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Freee.Accounting.Client.ApiResponse<Object> DestroyDealWithHttpInfo(int id, int companyId)
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/1/deals/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyDeal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引（収入／支出）の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyDealAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyDealWithHttpInfoAsync(id, companyId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 取引（収入／支出）の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<Object>> DestroyDealWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/1/deals/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyDeal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引（収入／支出）の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <returns>DealResponse</returns>
        public DealResponse GetDeal(int companyId, int id, string accruals = default(string))
        {
            Freee.Accounting.Client.ApiResponse<DealResponse> localVarResponse = GetDealWithHttpInfo(companyId, id, accruals);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引（収入／支出）の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <returns>ApiResponse of DealResponse</returns>
        public Freee.Accounting.Client.ApiResponse<DealResponse> GetDealWithHttpInfo(int companyId, int id, string accruals = default(string))
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            if (accruals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "accruals", accruals));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DealResponse>("/api/1/deals/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引（収入／支出）の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealResponse</returns>
        public async System.Threading.Tasks.Task<DealResponse> GetDealAsync(int companyId, int id, string accruals = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<DealResponse> localVarResponse = await GetDealWithHttpInfoAsync(companyId, id, accruals, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引（収入／支出）の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<DealResponse>> GetDealWithHttpInfoAsync(int companyId, int id, string accruals = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            if (accruals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "accruals", accruals));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DealResponse>("/api/1/deals/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引（収入／支出）一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="partnerId">取引先IDで絞込 (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="status">決済状況で絞込 (未決済: unsettled, 完了: settled) (optional)</param>
        /// <param name="type">収支区分 (収入: income, 支出: expense) (optional)</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startDueDate">支払期日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endDueDate">支払期日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startRenewDate">+更新日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endRenewDate">+更新日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最大: 100)  (optional)</param>
        /// <param name="registeredFrom">取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ） (optional)</param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetDeals(int companyId, int? partnerId = default(int?), int? accountItemId = default(int?), string partnerCode = default(string), string status = default(string), string type = default(string), string startIssueDate = default(string), string endIssueDate = default(string), string startDueDate = default(string), string endDueDate = default(string), string startRenewDate = default(string), string endRenewDate = default(string), long? offset = default(long?), int? limit = default(int?), string registeredFrom = default(string), string accruals = default(string))
        {
            Freee.Accounting.Client.ApiResponse<InlineResponse2001> localVarResponse = GetDealsWithHttpInfo(companyId, partnerId, accountItemId, partnerCode, status, type, startIssueDate, endIssueDate, startDueDate, endDueDate, startRenewDate, endRenewDate, offset, limit, registeredFrom, accruals);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引（収入／支出）一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="partnerId">取引先IDで絞込 (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="status">決済状況で絞込 (未決済: unsettled, 完了: settled) (optional)</param>
        /// <param name="type">収支区分 (収入: income, 支出: expense) (optional)</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startDueDate">支払期日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endDueDate">支払期日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startRenewDate">+更新日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endRenewDate">+更新日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最大: 100)  (optional)</param>
        /// <param name="registeredFrom">取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ） (optional)</param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public Freee.Accounting.Client.ApiResponse<InlineResponse2001> GetDealsWithHttpInfo(int companyId, int? partnerId = default(int?), int? accountItemId = default(int?), string partnerCode = default(string), string status = default(string), string type = default(string), string startIssueDate = default(string), string endIssueDate = default(string), string startDueDate = default(string), string endDueDate = default(string), string startRenewDate = default(string), string endRenewDate = default(string), long? offset = default(long?), int? limit = default(int?), string registeredFrom = default(string), string accruals = default(string))
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            if (partnerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "partner_id", partnerId));
            }
            if (accountItemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "account_item_id", accountItemId));
            }
            if (partnerCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "partner_code", partnerCode));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (startIssueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_issue_date", startIssueDate));
            }
            if (endIssueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_issue_date", endIssueDate));
            }
            if (startDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_due_date", startDueDate));
            }
            if (endDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_due_date", endDueDate));
            }
            if (startRenewDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_renew_date", startRenewDate));
            }
            if (endRenewDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_renew_date", endRenewDate));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (registeredFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "registered_from", registeredFrom));
            }
            if (accruals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "accruals", accruals));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2001>("/api/1/deals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引（収入／支出）一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="partnerId">取引先IDで絞込 (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="status">決済状況で絞込 (未決済: unsettled, 完了: settled) (optional)</param>
        /// <param name="type">収支区分 (収入: income, 支出: expense) (optional)</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startDueDate">支払期日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endDueDate">支払期日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startRenewDate">+更新日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endRenewDate">+更新日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最大: 100)  (optional)</param>
        /// <param name="registeredFrom">取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ） (optional)</param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetDealsAsync(int companyId, int? partnerId = default(int?), int? accountItemId = default(int?), string partnerCode = default(string), string status = default(string), string type = default(string), string startIssueDate = default(string), string endIssueDate = default(string), string startDueDate = default(string), string endDueDate = default(string), string startRenewDate = default(string), string endRenewDate = default(string), long? offset = default(long?), int? limit = default(int?), string registeredFrom = default(string), string accruals = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<InlineResponse2001> localVarResponse = await GetDealsWithHttpInfoAsync(companyId, partnerId, accountItemId, partnerCode, status, type, startIssueDate, endIssueDate, startDueDate, endDueDate, startRenewDate, endRenewDate, offset, limit, registeredFrom, accruals, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引（収入／支出）一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="partnerId">取引先IDで絞込 (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="status">決済状況で絞込 (未決済: unsettled, 完了: settled) (optional)</param>
        /// <param name="type">収支区分 (収入: income, 支出: expense) (optional)</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startDueDate">支払期日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endDueDate">支払期日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="startRenewDate">+更新日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endRenewDate">+更新日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最大: 100)  (optional)</param>
        /// <param name="registeredFrom">取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ） (optional)</param>
        /// <param name="accruals">取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<InlineResponse2001>> GetDealsWithHttpInfoAsync(int companyId, int? partnerId = default(int?), int? accountItemId = default(int?), string partnerCode = default(string), string status = default(string), string type = default(string), string startIssueDate = default(string), string endIssueDate = default(string), string startDueDate = default(string), string endDueDate = default(string), string startRenewDate = default(string), string endRenewDate = default(string), long? offset = default(long?), int? limit = default(int?), string registeredFrom = default(string), string accruals = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            if (partnerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "partner_id", partnerId));
            }
            if (accountItemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "account_item_id", accountItemId));
            }
            if (partnerCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "partner_code", partnerCode));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (startIssueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_issue_date", startIssueDate));
            }
            if (endIssueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_issue_date", endIssueDate));
            }
            if (startDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_due_date", startDueDate));
            }
            if (endDueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_due_date", endDueDate));
            }
            if (startRenewDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_renew_date", startRenewDate));
            }
            if (endRenewDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_renew_date", endRenewDate));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (registeredFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "registered_from", registeredFrom));
            }
            if (accruals != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "accruals", accruals));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/api/1/deals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引（収入／支出）の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="dealUpdateParams">取引（収入／支出）の更新 (optional)</param>
        /// <returns>DealResponse</returns>
        public DealResponse UpdateDeal(int id, DealUpdateParams dealUpdateParams = default(DealUpdateParams))
        {
            Freee.Accounting.Client.ApiResponse<DealResponse> localVarResponse = UpdateDealWithHttpInfo(id, dealUpdateParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引（収入／支出）の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="dealUpdateParams">取引（収入／支出）の更新 (optional)</param>
        /// <returns>ApiResponse of DealResponse</returns>
        public Freee.Accounting.Client.ApiResponse<DealResponse> UpdateDealWithHttpInfo(int id, DealUpdateParams dealUpdateParams = default(DealUpdateParams))
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = dealUpdateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DealResponse>("/api/1/deals/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDeal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 取引（収入／支出）の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="dealUpdateParams">取引（収入／支出）の更新 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealResponse</returns>
        public async System.Threading.Tasks.Task<DealResponse> UpdateDealAsync(int id, DealUpdateParams dealUpdateParams = default(DealUpdateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<DealResponse> localVarResponse = await UpdateDealWithHttpInfoAsync(id, dealUpdateParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 取引（収入／支出）の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">取引ID</param>
        /// <param name="dealUpdateParams">取引（収入／支出）の更新 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<DealResponse>> UpdateDealWithHttpInfoAsync(int id, DealUpdateParams dealUpdateParams = default(DealUpdateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = dealUpdateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DealResponse>("/api/1/deals/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDeal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
