/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Freee.Accounting.Client;
using Freee.Accounting.Models;

namespace Freee.Accounting.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExpenseApplicationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 経費申請の作成
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseApplicationCreateParams">経費申請の作成 (optional)</param>
        /// <returns>ExpenseApplicationResponse</returns>
        ExpenseApplicationResponse CreateExpenseApplication(ExpenseApplicationCreateParams expenseApplicationCreateParams = default(ExpenseApplicationCreateParams));

        /// <summary>
        /// 経費申請の作成
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseApplicationCreateParams">経費申請の作成 (optional)</param>
        /// <returns>ApiResponse of ExpenseApplicationResponse</returns>
        ApiResponse<ExpenseApplicationResponse> CreateExpenseApplicationWithHttpInfo(ExpenseApplicationCreateParams expenseApplicationCreateParams = default(ExpenseApplicationCreateParams));
        /// <summary>
        /// 経費申請の削除
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns></returns>
        void DestroyExpenseApplication(int id, int companyId);

        /// <summary>
        /// 経費申請の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyExpenseApplicationWithHttpInfo(int id, int companyId);
        /// <summary>
        /// 経費申請詳細の取得
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ExpenseApplicationResponse</returns>
        ExpenseApplicationResponse GetExpenseApplication(int id, int companyId);

        /// <summary>
        /// 経費申請詳細の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of ExpenseApplicationResponse</returns>
        ApiResponse<ExpenseApplicationResponse> GetExpenseApplicationWithHttpInfo(int id, int companyId);
        /// <summary>
        /// 経費申請一覧の取得
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)、 取引ステータス(unsettled:清算待ち, settled:精算済み) (optional)</param>
        /// <param name="payrollAttached">true:給与連携あり、false:給与連携なし、未指定時:絞り込みなし (optional)</param>
        /// <param name="startTransactionDate">発生日(経費申請項目の日付)で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endTransactionDate">発生日(経費申請項目の日付)で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="startIssueDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="approverId">承認者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込 (下限金額) (optional)</param>
        /// <param name="maxAmount">金額で絞込 (上限金額) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <returns>ExpenseApplicationsIndexResponse</returns>
        ExpenseApplicationsIndexResponse GetExpenseApplications(int companyId, string status = default(string), bool? payrollAttached = default(bool?), string startTransactionDate = default(string), string endTransactionDate = default(string), int? applicationNumber = default(int?), string title = default(string), string startIssueDate = default(string), string endIssueDate = default(string), int? applicantId = default(int?), int? approverId = default(int?), int? minAmount = default(int?), int? maxAmount = default(int?), long? offset = default(long?), int? limit = default(int?));

        /// <summary>
        /// 経費申請一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)、 取引ステータス(unsettled:清算待ち, settled:精算済み) (optional)</param>
        /// <param name="payrollAttached">true:給与連携あり、false:給与連携なし、未指定時:絞り込みなし (optional)</param>
        /// <param name="startTransactionDate">発生日(経費申請項目の日付)で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endTransactionDate">発生日(経費申請項目の日付)で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="startIssueDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="approverId">承認者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込 (下限金額) (optional)</param>
        /// <param name="maxAmount">金額で絞込 (上限金額) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <returns>ApiResponse of ExpenseApplicationsIndexResponse</returns>
        ApiResponse<ExpenseApplicationsIndexResponse> GetExpenseApplicationsWithHttpInfo(int companyId, string status = default(string), bool? payrollAttached = default(bool?), string startTransactionDate = default(string), string endTransactionDate = default(string), int? applicationNumber = default(int?), string title = default(string), string startIssueDate = default(string), string endIssueDate = default(string), int? applicantId = default(int?), int? approverId = default(int?), int? minAmount = default(int?), int? maxAmount = default(int?), long? offset = default(long?), int? limit = default(int?));
        /// <summary>
        /// 経費申請の更新
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationUpdateParams">経費申請の更新 (optional)</param>
        /// <returns>ExpenseApplicationResponse</returns>
        ExpenseApplicationResponse UpdateExpenseApplication(int id, ExpenseApplicationUpdateParams expenseApplicationUpdateParams = default(ExpenseApplicationUpdateParams));

        /// <summary>
        /// 経費申請の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationUpdateParams">経費申請の更新 (optional)</param>
        /// <returns>ApiResponse of ExpenseApplicationResponse</returns>
        ApiResponse<ExpenseApplicationResponse> UpdateExpenseApplicationWithHttpInfo(int id, ExpenseApplicationUpdateParams expenseApplicationUpdateParams = default(ExpenseApplicationUpdateParams));
        /// <summary>
        /// 経費申請の承認操作
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationActionCreateParams">経費申請の承認操作</param>
        /// <returns>ExpenseApplicationResponse</returns>
        ExpenseApplicationResponse UpdateExpenseApplicationAction(int id, ExpenseApplicationActionCreateParams expenseApplicationActionCreateParams);

        /// <summary>
        /// 経費申請の承認操作
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationActionCreateParams">経費申請の承認操作</param>
        /// <returns>ApiResponse of ExpenseApplicationResponse</returns>
        ApiResponse<ExpenseApplicationResponse> UpdateExpenseApplicationActionWithHttpInfo(int id, ExpenseApplicationActionCreateParams expenseApplicationActionCreateParams);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExpenseApplicationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 経費申請の作成
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseApplicationCreateParams">経費申請の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseApplicationResponse</returns>
        System.Threading.Tasks.Task<ExpenseApplicationResponse> CreateExpenseApplicationAsync(ExpenseApplicationCreateParams expenseApplicationCreateParams = default(ExpenseApplicationCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 経費申請の作成
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseApplicationCreateParams">経費申請の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseApplicationResponse>> CreateExpenseApplicationWithHttpInfoAsync(ExpenseApplicationCreateParams expenseApplicationCreateParams = default(ExpenseApplicationCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 経費申請の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyExpenseApplicationAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 経費申請の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyExpenseApplicationWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 経費申請詳細の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseApplicationResponse</returns>
        System.Threading.Tasks.Task<ExpenseApplicationResponse> GetExpenseApplicationAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 経費申請詳細の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseApplicationResponse>> GetExpenseApplicationWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 経費申請一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)、 取引ステータス(unsettled:清算待ち, settled:精算済み) (optional)</param>
        /// <param name="payrollAttached">true:給与連携あり、false:給与連携なし、未指定時:絞り込みなし (optional)</param>
        /// <param name="startTransactionDate">発生日(経費申請項目の日付)で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endTransactionDate">発生日(経費申請項目の日付)で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="startIssueDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="approverId">承認者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込 (下限金額) (optional)</param>
        /// <param name="maxAmount">金額で絞込 (上限金額) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseApplicationsIndexResponse</returns>
        System.Threading.Tasks.Task<ExpenseApplicationsIndexResponse> GetExpenseApplicationsAsync(int companyId, string status = default(string), bool? payrollAttached = default(bool?), string startTransactionDate = default(string), string endTransactionDate = default(string), int? applicationNumber = default(int?), string title = default(string), string startIssueDate = default(string), string endIssueDate = default(string), int? applicantId = default(int?), int? approverId = default(int?), int? minAmount = default(int?), int? maxAmount = default(int?), long? offset = default(long?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 経費申請一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)、 取引ステータス(unsettled:清算待ち, settled:精算済み) (optional)</param>
        /// <param name="payrollAttached">true:給与連携あり、false:給与連携なし、未指定時:絞り込みなし (optional)</param>
        /// <param name="startTransactionDate">発生日(経費申請項目の日付)で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endTransactionDate">発生日(経費申請項目の日付)で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="startIssueDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="approverId">承認者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込 (下限金額) (optional)</param>
        /// <param name="maxAmount">金額で絞込 (上限金額) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseApplicationsIndexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseApplicationsIndexResponse>> GetExpenseApplicationsWithHttpInfoAsync(int companyId, string status = default(string), bool? payrollAttached = default(bool?), string startTransactionDate = default(string), string endTransactionDate = default(string), int? applicationNumber = default(int?), string title = default(string), string startIssueDate = default(string), string endIssueDate = default(string), int? applicantId = default(int?), int? approverId = default(int?), int? minAmount = default(int?), int? maxAmount = default(int?), long? offset = default(long?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 経費申請の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationUpdateParams">経費申請の更新 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseApplicationResponse</returns>
        System.Threading.Tasks.Task<ExpenseApplicationResponse> UpdateExpenseApplicationAsync(int id, ExpenseApplicationUpdateParams expenseApplicationUpdateParams = default(ExpenseApplicationUpdateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 経費申請の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationUpdateParams">経費申請の更新 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseApplicationResponse>> UpdateExpenseApplicationWithHttpInfoAsync(int id, ExpenseApplicationUpdateParams expenseApplicationUpdateParams = default(ExpenseApplicationUpdateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 経費申請の承認操作
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationActionCreateParams">経費申請の承認操作</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseApplicationResponse</returns>
        System.Threading.Tasks.Task<ExpenseApplicationResponse> UpdateExpenseApplicationActionAsync(int id, ExpenseApplicationActionCreateParams expenseApplicationActionCreateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 経費申請の承認操作
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationActionCreateParams">経費申請の承認操作</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseApplicationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseApplicationResponse>> UpdateExpenseApplicationActionWithHttpInfoAsync(int id, ExpenseApplicationActionCreateParams expenseApplicationActionCreateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExpenseApplicationsApi : IExpenseApplicationsApiSync, IExpenseApplicationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExpenseApplicationsApi : IExpenseApplicationsApi
    {
        private Freee.Accounting.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApplicationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExpenseApplicationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApplicationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExpenseApplicationsApi(string basePath)
        {
            this.Configuration = Freee.Accounting.Client.Configuration.MergeConfigurations(
                Freee.Accounting.Client.GlobalConfiguration.Instance,
                new Freee.Accounting.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApplicationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExpenseApplicationsApi(Freee.Accounting.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Freee.Accounting.Client.Configuration.MergeConfigurations(
                Freee.Accounting.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseApplicationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ExpenseApplicationsApi(Freee.Accounting.Client.ISynchronousClient client, Freee.Accounting.Client.IAsynchronousClient asyncClient, Freee.Accounting.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Freee.Accounting.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Freee.Accounting.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Freee.Accounting.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Freee.Accounting.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 経費申請の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseApplicationCreateParams">経費申請の作成 (optional)</param>
        /// <returns>ExpenseApplicationResponse</returns>
        public ExpenseApplicationResponse CreateExpenseApplication(ExpenseApplicationCreateParams expenseApplicationCreateParams = default(ExpenseApplicationCreateParams))
        {
            Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse> localVarResponse = CreateExpenseApplicationWithHttpInfo(expenseApplicationCreateParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 経費申請の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseApplicationCreateParams">経費申請の作成 (optional)</param>
        /// <returns>ApiResponse of ExpenseApplicationResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse> CreateExpenseApplicationWithHttpInfo(ExpenseApplicationCreateParams expenseApplicationCreateParams = default(ExpenseApplicationCreateParams))
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = expenseApplicationCreateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExpenseApplicationResponse>("/api/1/expense_applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateExpenseApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 経費申請の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseApplicationCreateParams">経費申請の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseApplicationResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseApplicationResponse> CreateExpenseApplicationAsync(ExpenseApplicationCreateParams expenseApplicationCreateParams = default(ExpenseApplicationCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse> localVarResponse = await CreateExpenseApplicationWithHttpInfoAsync(expenseApplicationCreateParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 経費申請の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expenseApplicationCreateParams">経費申請の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse>> CreateExpenseApplicationWithHttpInfoAsync(ExpenseApplicationCreateParams expenseApplicationCreateParams = default(ExpenseApplicationCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = expenseApplicationCreateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExpenseApplicationResponse>("/api/1/expense_applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateExpenseApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 経費申請の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns></returns>
        public void DestroyExpenseApplication(int id, int companyId)
        {
            DestroyExpenseApplicationWithHttpInfo(id, companyId);
        }

        /// <summary>
        /// 経費申請の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Freee.Accounting.Client.ApiResponse<Object> DestroyExpenseApplicationWithHttpInfo(int id, int companyId)
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/1/expense_applications/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyExpenseApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 経費申請の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyExpenseApplicationAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyExpenseApplicationWithHttpInfoAsync(id, companyId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 経費申請の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<Object>> DestroyExpenseApplicationWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/1/expense_applications/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyExpenseApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 経費申請詳細の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ExpenseApplicationResponse</returns>
        public ExpenseApplicationResponse GetExpenseApplication(int id, int companyId)
        {
            Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse> localVarResponse = GetExpenseApplicationWithHttpInfo(id, companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 経費申請詳細の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of ExpenseApplicationResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse> GetExpenseApplicationWithHttpInfo(int id, int companyId)
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExpenseApplicationResponse>("/api/1/expense_applications/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpenseApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 経費申請詳細の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseApplicationResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseApplicationResponse> GetExpenseApplicationAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse> localVarResponse = await GetExpenseApplicationWithHttpInfoAsync(id, companyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 経費申請詳細の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse>> GetExpenseApplicationWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExpenseApplicationResponse>("/api/1/expense_applications/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpenseApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 経費申請一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)、 取引ステータス(unsettled:清算待ち, settled:精算済み) (optional)</param>
        /// <param name="payrollAttached">true:給与連携あり、false:給与連携なし、未指定時:絞り込みなし (optional)</param>
        /// <param name="startTransactionDate">発生日(経費申請項目の日付)で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endTransactionDate">発生日(経費申請項目の日付)で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="startIssueDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="approverId">承認者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込 (下限金額) (optional)</param>
        /// <param name="maxAmount">金額で絞込 (上限金額) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <returns>ExpenseApplicationsIndexResponse</returns>
        public ExpenseApplicationsIndexResponse GetExpenseApplications(int companyId, string status = default(string), bool? payrollAttached = default(bool?), string startTransactionDate = default(string), string endTransactionDate = default(string), int? applicationNumber = default(int?), string title = default(string), string startIssueDate = default(string), string endIssueDate = default(string), int? applicantId = default(int?), int? approverId = default(int?), int? minAmount = default(int?), int? maxAmount = default(int?), long? offset = default(long?), int? limit = default(int?))
        {
            Freee.Accounting.Client.ApiResponse<ExpenseApplicationsIndexResponse> localVarResponse = GetExpenseApplicationsWithHttpInfo(companyId, status, payrollAttached, startTransactionDate, endTransactionDate, applicationNumber, title, startIssueDate, endIssueDate, applicantId, approverId, minAmount, maxAmount, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 経費申請一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)、 取引ステータス(unsettled:清算待ち, settled:精算済み) (optional)</param>
        /// <param name="payrollAttached">true:給与連携あり、false:給与連携なし、未指定時:絞り込みなし (optional)</param>
        /// <param name="startTransactionDate">発生日(経費申請項目の日付)で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endTransactionDate">発生日(経費申請項目の日付)で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="startIssueDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="approverId">承認者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込 (下限金額) (optional)</param>
        /// <param name="maxAmount">金額で絞込 (上限金額) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <returns>ApiResponse of ExpenseApplicationsIndexResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ExpenseApplicationsIndexResponse> GetExpenseApplicationsWithHttpInfo(int companyId, string status = default(string), bool? payrollAttached = default(bool?), string startTransactionDate = default(string), string endTransactionDate = default(string), int? applicationNumber = default(int?), string title = default(string), string startIssueDate = default(string), string endIssueDate = default(string), int? applicantId = default(int?), int? approverId = default(int?), int? minAmount = default(int?), int? maxAmount = default(int?), long? offset = default(long?), int? limit = default(int?))
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (payrollAttached != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "payroll_attached", payrollAttached));
            }
            if (startTransactionDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_transaction_date", startTransactionDate));
            }
            if (endTransactionDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_transaction_date", endTransactionDate));
            }
            if (applicationNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "application_number", applicationNumber));
            }
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }
            if (startIssueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_issue_date", startIssueDate));
            }
            if (endIssueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_issue_date", endIssueDate));
            }
            if (applicantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "applicant_id", applicantId));
            }
            if (approverId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "approver_id", approverId));
            }
            if (minAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "min_amount", minAmount));
            }
            if (maxAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "max_amount", maxAmount));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExpenseApplicationsIndexResponse>("/api/1/expense_applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpenseApplications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 経費申請一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)、 取引ステータス(unsettled:清算待ち, settled:精算済み) (optional)</param>
        /// <param name="payrollAttached">true:給与連携あり、false:給与連携なし、未指定時:絞り込みなし (optional)</param>
        /// <param name="startTransactionDate">発生日(経費申請項目の日付)で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endTransactionDate">発生日(経費申請項目の日付)で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="startIssueDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="approverId">承認者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込 (下限金額) (optional)</param>
        /// <param name="maxAmount">金額で絞込 (上限金額) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseApplicationsIndexResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseApplicationsIndexResponse> GetExpenseApplicationsAsync(int companyId, string status = default(string), bool? payrollAttached = default(bool?), string startTransactionDate = default(string), string endTransactionDate = default(string), int? applicationNumber = default(int?), string title = default(string), string startIssueDate = default(string), string endIssueDate = default(string), int? applicantId = default(int?), int? approverId = default(int?), int? minAmount = default(int?), int? maxAmount = default(int?), long? offset = default(long?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ExpenseApplicationsIndexResponse> localVarResponse = await GetExpenseApplicationsWithHttpInfoAsync(companyId, status, payrollAttached, startTransactionDate, endTransactionDate, applicationNumber, title, startIssueDate, endIssueDate, applicantId, approverId, minAmount, maxAmount, offset, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 経費申請一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)、 取引ステータス(unsettled:清算待ち, settled:精算済み) (optional)</param>
        /// <param name="payrollAttached">true:給与連携あり、false:給与連携なし、未指定時:絞り込みなし (optional)</param>
        /// <param name="startTransactionDate">発生日(経費申請項目の日付)で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endTransactionDate">発生日(経費申請項目の日付)で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="startIssueDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="approverId">承認者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込 (下限金額) (optional)</param>
        /// <param name="maxAmount">金額で絞込 (上限金額) (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseApplicationsIndexResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ExpenseApplicationsIndexResponse>> GetExpenseApplicationsWithHttpInfoAsync(int companyId, string status = default(string), bool? payrollAttached = default(bool?), string startTransactionDate = default(string), string endTransactionDate = default(string), int? applicationNumber = default(int?), string title = default(string), string startIssueDate = default(string), string endIssueDate = default(string), int? applicantId = default(int?), int? approverId = default(int?), int? minAmount = default(int?), int? maxAmount = default(int?), long? offset = default(long?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (payrollAttached != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "payroll_attached", payrollAttached));
            }
            if (startTransactionDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_transaction_date", startTransactionDate));
            }
            if (endTransactionDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_transaction_date", endTransactionDate));
            }
            if (applicationNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "application_number", applicationNumber));
            }
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }
            if (startIssueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_issue_date", startIssueDate));
            }
            if (endIssueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_issue_date", endIssueDate));
            }
            if (applicantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "applicant_id", applicantId));
            }
            if (approverId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "approver_id", approverId));
            }
            if (minAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "min_amount", minAmount));
            }
            if (maxAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "max_amount", maxAmount));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExpenseApplicationsIndexResponse>("/api/1/expense_applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExpenseApplications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 経費申請の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationUpdateParams">経費申請の更新 (optional)</param>
        /// <returns>ExpenseApplicationResponse</returns>
        public ExpenseApplicationResponse UpdateExpenseApplication(int id, ExpenseApplicationUpdateParams expenseApplicationUpdateParams = default(ExpenseApplicationUpdateParams))
        {
            Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse> localVarResponse = UpdateExpenseApplicationWithHttpInfo(id, expenseApplicationUpdateParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 経費申請の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationUpdateParams">経費申請の更新 (optional)</param>
        /// <returns>ApiResponse of ExpenseApplicationResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse> UpdateExpenseApplicationWithHttpInfo(int id, ExpenseApplicationUpdateParams expenseApplicationUpdateParams = default(ExpenseApplicationUpdateParams))
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = expenseApplicationUpdateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ExpenseApplicationResponse>("/api/1/expense_applications/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateExpenseApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 経費申請の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationUpdateParams">経費申請の更新 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseApplicationResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseApplicationResponse> UpdateExpenseApplicationAsync(int id, ExpenseApplicationUpdateParams expenseApplicationUpdateParams = default(ExpenseApplicationUpdateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse> localVarResponse = await UpdateExpenseApplicationWithHttpInfoAsync(id, expenseApplicationUpdateParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 経費申請の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationUpdateParams">経費申請の更新 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse>> UpdateExpenseApplicationWithHttpInfoAsync(int id, ExpenseApplicationUpdateParams expenseApplicationUpdateParams = default(ExpenseApplicationUpdateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = expenseApplicationUpdateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ExpenseApplicationResponse>("/api/1/expense_applications/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateExpenseApplication", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 経費申請の承認操作 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationActionCreateParams">経費申請の承認操作</param>
        /// <returns>ExpenseApplicationResponse</returns>
        public ExpenseApplicationResponse UpdateExpenseApplicationAction(int id, ExpenseApplicationActionCreateParams expenseApplicationActionCreateParams)
        {
            Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse> localVarResponse = UpdateExpenseApplicationActionWithHttpInfo(id, expenseApplicationActionCreateParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 経費申請の承認操作 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationActionCreateParams">経費申請の承認操作</param>
        /// <returns>ApiResponse of ExpenseApplicationResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse> UpdateExpenseApplicationActionWithHttpInfo(int id, ExpenseApplicationActionCreateParams expenseApplicationActionCreateParams)
        {
            // verify the required parameter 'expenseApplicationActionCreateParams' is set
            if (expenseApplicationActionCreateParams == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'expenseApplicationActionCreateParams' when calling ExpenseApplicationsApi->UpdateExpenseApplicationAction");
            }

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = expenseApplicationActionCreateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExpenseApplicationResponse>("/api/1/expense_applications/{id}/actions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateExpenseApplicationAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 経費申請の承認操作 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationActionCreateParams">経費申請の承認操作</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExpenseApplicationResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseApplicationResponse> UpdateExpenseApplicationActionAsync(int id, ExpenseApplicationActionCreateParams expenseApplicationActionCreateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse> localVarResponse = await UpdateExpenseApplicationActionWithHttpInfoAsync(id, expenseApplicationActionCreateParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 経費申請の承認操作 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">経費申請ID</param>
        /// <param name="expenseApplicationActionCreateParams">経費申請の承認操作</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExpenseApplicationResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ExpenseApplicationResponse>> UpdateExpenseApplicationActionWithHttpInfoAsync(int id, ExpenseApplicationActionCreateParams expenseApplicationActionCreateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'expenseApplicationActionCreateParams' is set
            if (expenseApplicationActionCreateParams == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'expenseApplicationActionCreateParams' when calling ExpenseApplicationsApi->UpdateExpenseApplicationAction");
            }


            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = expenseApplicationActionCreateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExpenseApplicationResponse>("/api/1/expense_applications/{id}/actions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateExpenseApplicationAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
