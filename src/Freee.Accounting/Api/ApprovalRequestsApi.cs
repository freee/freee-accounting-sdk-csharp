/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Freee.Accounting.Client;
using Freee.Accounting.Models;

namespace Freee.Accounting.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApprovalRequestsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 各種申請の作成
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approvalRequestCreateParams">各種申請の作成 (optional)</param>
        /// <returns>ApprovalRequestResponse</returns>
        ApprovalRequestResponse CreateApprovalRequest(ApprovalRequestCreateParams approvalRequestCreateParams = default(ApprovalRequestCreateParams));

        /// <summary>
        /// 各種申請の作成
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approvalRequestCreateParams">各種申請の作成 (optional)</param>
        /// <returns>ApiResponse of ApprovalRequestResponse</returns>
        ApiResponse<ApprovalRequestResponse> CreateApprovalRequestWithHttpInfo(ApprovalRequestCreateParams approvalRequestCreateParams = default(ApprovalRequestCreateParams));
        /// <summary>
        /// 各種申請の削除
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns></returns>
        void DestroyApprovalRequest(int id, int companyId);

        /// <summary>
        /// 各種申請の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyApprovalRequestWithHttpInfo(int id, int companyId);
        /// <summary>
        /// 各種申請の取得
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApprovalRequestResponse</returns>
        ApprovalRequestResponse GetApprovalRequest(int id, int companyId);

        /// <summary>
        /// 各種申請の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of ApprovalRequestResponse</returns>
        ApiResponse<ApprovalRequestResponse> GetApprovalRequestWithHttpInfo(int id, int companyId);
        /// <summary>
        /// 各種申請の申請フォームの取得
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">申請フォームID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApprovalRequestFormResponse</returns>
        ApprovalRequestFormResponse GetApprovalRequestForm(int id, int companyId);

        /// <summary>
        /// 各種申請の申請フォームの取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">申請フォームID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of ApprovalRequestFormResponse</returns>
        ApiResponse<ApprovalRequestFormResponse> GetApprovalRequestFormWithHttpInfo(int id, int companyId);
        /// <summary>
        /// 各種申請の申請フォーム一覧の取得
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApprovalRequestFormIndexResponse</returns>
        ApprovalRequestFormIndexResponse GetApprovalRequestForms(int companyId);

        /// <summary>
        /// 各種申請の申請フォーム一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of ApprovalRequestFormIndexResponse</returns>
        ApiResponse<ApprovalRequestFormIndexResponse> GetApprovalRequestFormsWithHttpInfo(int companyId);
        /// <summary>
        /// 各種申請一覧の取得
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) 承認者指定時には無効です。 (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="formId">申請フォームID (optional)</param>
        /// <param name="startApplicationDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endApplicationDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込：以上 (optional)</param>
        /// <param name="maxAmount">金額で絞込：以下 (optional)</param>
        /// <param name="approverId">承認者のユーザーID 承認者指定時には申請ステータスが申請中のものだけが取得可能です。 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <returns>ApprovalRequestsIndexResponse</returns>
        ApprovalRequestsIndexResponse GetApprovalRequests(int companyId, string status = default(string), int? applicationNumber = default(int?), string title = default(string), int? formId = default(int?), string startApplicationDate = default(string), string endApplicationDate = default(string), int? applicantId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? approverId = default(int?), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// 各種申請一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) 承認者指定時には無効です。 (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="formId">申請フォームID (optional)</param>
        /// <param name="startApplicationDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endApplicationDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込：以上 (optional)</param>
        /// <param name="maxAmount">金額で絞込：以下 (optional)</param>
        /// <param name="approverId">承認者のユーザーID 承認者指定時には申請ステータスが申請中のものだけが取得可能です。 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <returns>ApiResponse of ApprovalRequestsIndexResponse</returns>
        ApiResponse<ApprovalRequestsIndexResponse> GetApprovalRequestsWithHttpInfo(int companyId, string status = default(string), int? applicationNumber = default(int?), string title = default(string), int? formId = default(int?), string startApplicationDate = default(string), string endApplicationDate = default(string), int? applicantId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? approverId = default(int?), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// 各種申請の更新
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestUpdateParams">各種申請の更新</param>
        /// <returns>ApprovalRequestResponse</returns>
        ApprovalRequestResponse UpdateApprovalRequest(int id, ApprovalRequestUpdateParams approvalRequestUpdateParams);

        /// <summary>
        /// 各種申請の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestUpdateParams">各種申請の更新</param>
        /// <returns>ApiResponse of ApprovalRequestResponse</returns>
        ApiResponse<ApprovalRequestResponse> UpdateApprovalRequestWithHttpInfo(int id, ApprovalRequestUpdateParams approvalRequestUpdateParams);
        /// <summary>
        /// 各種申請の承認操作
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestActionCreateParams">各種申請の承認操作</param>
        /// <returns>ApprovalRequestResponse</returns>
        ApprovalRequestResponse UpdateApprovalRequestAction(int id, ApprovalRequestActionCreateParams approvalRequestActionCreateParams);

        /// <summary>
        /// 各種申請の承認操作
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestActionCreateParams">各種申請の承認操作</param>
        /// <returns>ApiResponse of ApprovalRequestResponse</returns>
        ApiResponse<ApprovalRequestResponse> UpdateApprovalRequestActionWithHttpInfo(int id, ApprovalRequestActionCreateParams approvalRequestActionCreateParams);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApprovalRequestsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 各種申請の作成
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approvalRequestCreateParams">各種申請の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestResponse</returns>
        System.Threading.Tasks.Task<ApprovalRequestResponse> CreateApprovalRequestAsync(ApprovalRequestCreateParams approvalRequestCreateParams = default(ApprovalRequestCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 各種申請の作成
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approvalRequestCreateParams">各種申請の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovalRequestResponse>> CreateApprovalRequestWithHttpInfoAsync(ApprovalRequestCreateParams approvalRequestCreateParams = default(ApprovalRequestCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 各種申請の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyApprovalRequestAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 各種申請の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyApprovalRequestWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 各種申請の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestResponse</returns>
        System.Threading.Tasks.Task<ApprovalRequestResponse> GetApprovalRequestAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 各種申請の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovalRequestResponse>> GetApprovalRequestWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 各種申請の申請フォームの取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">申請フォームID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestFormResponse</returns>
        System.Threading.Tasks.Task<ApprovalRequestFormResponse> GetApprovalRequestFormAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 各種申請の申請フォームの取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">申請フォームID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestFormResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovalRequestFormResponse>> GetApprovalRequestFormWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 各種申請の申請フォーム一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestFormIndexResponse</returns>
        System.Threading.Tasks.Task<ApprovalRequestFormIndexResponse> GetApprovalRequestFormsAsync(int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 各種申請の申請フォーム一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestFormIndexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovalRequestFormIndexResponse>> GetApprovalRequestFormsWithHttpInfoAsync(int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 各種申請一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) 承認者指定時には無効です。 (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="formId">申請フォームID (optional)</param>
        /// <param name="startApplicationDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endApplicationDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込：以上 (optional)</param>
        /// <param name="maxAmount">金額で絞込：以下 (optional)</param>
        /// <param name="approverId">承認者のユーザーID 承認者指定時には申請ステータスが申請中のものだけが取得可能です。 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestsIndexResponse</returns>
        System.Threading.Tasks.Task<ApprovalRequestsIndexResponse> GetApprovalRequestsAsync(int companyId, string status = default(string), int? applicationNumber = default(int?), string title = default(string), int? formId = default(int?), string startApplicationDate = default(string), string endApplicationDate = default(string), int? applicantId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? approverId = default(int?), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 各種申請一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) 承認者指定時には無効です。 (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="formId">申請フォームID (optional)</param>
        /// <param name="startApplicationDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endApplicationDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込：以上 (optional)</param>
        /// <param name="maxAmount">金額で絞込：以下 (optional)</param>
        /// <param name="approverId">承認者のユーザーID 承認者指定時には申請ステータスが申請中のものだけが取得可能です。 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestsIndexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovalRequestsIndexResponse>> GetApprovalRequestsWithHttpInfoAsync(int companyId, string status = default(string), int? applicationNumber = default(int?), string title = default(string), int? formId = default(int?), string startApplicationDate = default(string), string endApplicationDate = default(string), int? applicantId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? approverId = default(int?), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 各種申請の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestUpdateParams">各種申請の更新</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestResponse</returns>
        System.Threading.Tasks.Task<ApprovalRequestResponse> UpdateApprovalRequestAsync(int id, ApprovalRequestUpdateParams approvalRequestUpdateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 各種申請の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestUpdateParams">各種申請の更新</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovalRequestResponse>> UpdateApprovalRequestWithHttpInfoAsync(int id, ApprovalRequestUpdateParams approvalRequestUpdateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 各種申請の承認操作
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestActionCreateParams">各種申請の承認操作</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestResponse</returns>
        System.Threading.Tasks.Task<ApprovalRequestResponse> UpdateApprovalRequestActionAsync(int id, ApprovalRequestActionCreateParams approvalRequestActionCreateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 各種申請の承認操作
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestActionCreateParams">各種申請の承認操作</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApprovalRequestResponse>> UpdateApprovalRequestActionWithHttpInfoAsync(int id, ApprovalRequestActionCreateParams approvalRequestActionCreateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApprovalRequestsApi : IApprovalRequestsApiSync, IApprovalRequestsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApprovalRequestsApi : IApprovalRequestsApi
    {
        private Freee.Accounting.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApprovalRequestsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApprovalRequestsApi(string basePath)
        {
            this.Configuration = Freee.Accounting.Client.Configuration.MergeConfigurations(
                Freee.Accounting.Client.GlobalConfiguration.Instance,
                new Freee.Accounting.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApprovalRequestsApi(Freee.Accounting.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Freee.Accounting.Client.Configuration.MergeConfigurations(
                Freee.Accounting.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApprovalRequestsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApprovalRequestsApi(Freee.Accounting.Client.ISynchronousClient client, Freee.Accounting.Client.IAsynchronousClient asyncClient, Freee.Accounting.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Freee.Accounting.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Freee.Accounting.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Freee.Accounting.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Freee.Accounting.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 各種申請の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approvalRequestCreateParams">各種申請の作成 (optional)</param>
        /// <returns>ApprovalRequestResponse</returns>
        public ApprovalRequestResponse CreateApprovalRequest(ApprovalRequestCreateParams approvalRequestCreateParams = default(ApprovalRequestCreateParams))
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse> localVarResponse = CreateApprovalRequestWithHttpInfo(approvalRequestCreateParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approvalRequestCreateParams">各種申請の作成 (optional)</param>
        /// <returns>ApiResponse of ApprovalRequestResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse> CreateApprovalRequestWithHttpInfo(ApprovalRequestCreateParams approvalRequestCreateParams = default(ApprovalRequestCreateParams))
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = approvalRequestCreateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApprovalRequestResponse>("/api/1/approval_requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApprovalRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approvalRequestCreateParams">各種申請の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestResponse</returns>
        public async System.Threading.Tasks.Task<ApprovalRequestResponse> CreateApprovalRequestAsync(ApprovalRequestCreateParams approvalRequestCreateParams = default(ApprovalRequestCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse> localVarResponse = await CreateApprovalRequestWithHttpInfoAsync(approvalRequestCreateParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="approvalRequestCreateParams">各種申請の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse>> CreateApprovalRequestWithHttpInfoAsync(ApprovalRequestCreateParams approvalRequestCreateParams = default(ApprovalRequestCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = approvalRequestCreateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApprovalRequestResponse>("/api/1/approval_requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApprovalRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns></returns>
        public void DestroyApprovalRequest(int id, int companyId)
        {
            DestroyApprovalRequestWithHttpInfo(id, companyId);
        }

        /// <summary>
        /// 各種申請の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Freee.Accounting.Client.ApiResponse<Object> DestroyApprovalRequestWithHttpInfo(int id, int companyId)
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/1/approval_requests/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyApprovalRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyApprovalRequestAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyApprovalRequestWithHttpInfoAsync(id, companyId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 各種申請の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<Object>> DestroyApprovalRequestWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/1/approval_requests/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyApprovalRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApprovalRequestResponse</returns>
        public ApprovalRequestResponse GetApprovalRequest(int id, int companyId)
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse> localVarResponse = GetApprovalRequestWithHttpInfo(id, companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of ApprovalRequestResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse> GetApprovalRequestWithHttpInfo(int id, int companyId)
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApprovalRequestResponse>("/api/1/approval_requests/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApprovalRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestResponse</returns>
        public async System.Threading.Tasks.Task<ApprovalRequestResponse> GetApprovalRequestAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse> localVarResponse = await GetApprovalRequestWithHttpInfoAsync(id, companyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse>> GetApprovalRequestWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApprovalRequestResponse>("/api/1/approval_requests/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApprovalRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の申請フォームの取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">申請フォームID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApprovalRequestFormResponse</returns>
        public ApprovalRequestFormResponse GetApprovalRequestForm(int id, int companyId)
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestFormResponse> localVarResponse = GetApprovalRequestFormWithHttpInfo(id, companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請の申請フォームの取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">申請フォームID</param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of ApprovalRequestFormResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ApprovalRequestFormResponse> GetApprovalRequestFormWithHttpInfo(int id, int companyId)
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApprovalRequestFormResponse>("/api/1/approval_requests/forms/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApprovalRequestForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の申請フォームの取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">申請フォームID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestFormResponse</returns>
        public async System.Threading.Tasks.Task<ApprovalRequestFormResponse> GetApprovalRequestFormAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestFormResponse> localVarResponse = await GetApprovalRequestFormWithHttpInfoAsync(id, companyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請の申請フォームの取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">申請フォームID</param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestFormResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ApprovalRequestFormResponse>> GetApprovalRequestFormWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApprovalRequestFormResponse>("/api/1/approval_requests/forms/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApprovalRequestForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の申請フォーム一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApprovalRequestFormIndexResponse</returns>
        public ApprovalRequestFormIndexResponse GetApprovalRequestForms(int companyId)
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestFormIndexResponse> localVarResponse = GetApprovalRequestFormsWithHttpInfo(companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請の申請フォーム一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of ApprovalRequestFormIndexResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ApprovalRequestFormIndexResponse> GetApprovalRequestFormsWithHttpInfo(int companyId)
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApprovalRequestFormIndexResponse>("/api/1/approval_requests/forms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApprovalRequestForms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の申請フォーム一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestFormIndexResponse</returns>
        public async System.Threading.Tasks.Task<ApprovalRequestFormIndexResponse> GetApprovalRequestFormsAsync(int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestFormIndexResponse> localVarResponse = await GetApprovalRequestFormsWithHttpInfoAsync(companyId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請の申請フォーム一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestFormIndexResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ApprovalRequestFormIndexResponse>> GetApprovalRequestFormsWithHttpInfoAsync(int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApprovalRequestFormIndexResponse>("/api/1/approval_requests/forms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApprovalRequestForms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) 承認者指定時には無効です。 (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="formId">申請フォームID (optional)</param>
        /// <param name="startApplicationDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endApplicationDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込：以上 (optional)</param>
        /// <param name="maxAmount">金額で絞込：以下 (optional)</param>
        /// <param name="approverId">承認者のユーザーID 承認者指定時には申請ステータスが申請中のものだけが取得可能です。 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <returns>ApprovalRequestsIndexResponse</returns>
        public ApprovalRequestsIndexResponse GetApprovalRequests(int companyId, string status = default(string), int? applicationNumber = default(int?), string title = default(string), int? formId = default(int?), string startApplicationDate = default(string), string endApplicationDate = default(string), int? applicantId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? approverId = default(int?), int? offset = default(int?), int? limit = default(int?))
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestsIndexResponse> localVarResponse = GetApprovalRequestsWithHttpInfo(companyId, status, applicationNumber, title, formId, startApplicationDate, endApplicationDate, applicantId, minAmount, maxAmount, approverId, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) 承認者指定時には無効です。 (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="formId">申請フォームID (optional)</param>
        /// <param name="startApplicationDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endApplicationDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込：以上 (optional)</param>
        /// <param name="maxAmount">金額で絞込：以下 (optional)</param>
        /// <param name="approverId">承認者のユーザーID 承認者指定時には申請ステータスが申請中のものだけが取得可能です。 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <returns>ApiResponse of ApprovalRequestsIndexResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ApprovalRequestsIndexResponse> GetApprovalRequestsWithHttpInfo(int companyId, string status = default(string), int? applicationNumber = default(int?), string title = default(string), int? formId = default(int?), string startApplicationDate = default(string), string endApplicationDate = default(string), int? applicantId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? approverId = default(int?), int? offset = default(int?), int? limit = default(int?))
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (applicationNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "application_number", applicationNumber));
            }
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }
            if (formId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "form_id", formId));
            }
            if (startApplicationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_application_date", startApplicationDate));
            }
            if (endApplicationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_application_date", endApplicationDate));
            }
            if (applicantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "applicant_id", applicantId));
            }
            if (minAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "min_amount", minAmount));
            }
            if (maxAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "max_amount", maxAmount));
            }
            if (approverId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "approver_id", approverId));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApprovalRequestsIndexResponse>("/api/1/approval_requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApprovalRequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) 承認者指定時には無効です。 (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="formId">申請フォームID (optional)</param>
        /// <param name="startApplicationDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endApplicationDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込：以上 (optional)</param>
        /// <param name="maxAmount">金額で絞込：以下 (optional)</param>
        /// <param name="approverId">承認者のユーザーID 承認者指定時には申請ステータスが申請中のものだけが取得可能です。 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestsIndexResponse</returns>
        public async System.Threading.Tasks.Task<ApprovalRequestsIndexResponse> GetApprovalRequestsAsync(int companyId, string status = default(string), int? applicationNumber = default(int?), string title = default(string), int? formId = default(int?), string startApplicationDate = default(string), string endApplicationDate = default(string), int? applicantId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? approverId = default(int?), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestsIndexResponse> localVarResponse = await GetApprovalRequestsWithHttpInfoAsync(companyId, status, applicationNumber, title, formId, startApplicationDate, endApplicationDate, applicantId, minAmount, maxAmount, approverId, offset, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="status">申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) 承認者指定時には無効です。 (optional)</param>
        /// <param name="applicationNumber">申請No. (optional)</param>
        /// <param name="title">申請タイトル (optional)</param>
        /// <param name="formId">申請フォームID (optional)</param>
        /// <param name="startApplicationDate">申請日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endApplicationDate">申請日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="applicantId">申請者のユーザーID (optional)</param>
        /// <param name="minAmount">金額で絞込：以上 (optional)</param>
        /// <param name="maxAmount">金額で絞込：以下 (optional)</param>
        /// <param name="approverId">承認者のユーザーID 承認者指定時には申請ステータスが申請中のものだけが取得可能です。 (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestsIndexResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ApprovalRequestsIndexResponse>> GetApprovalRequestsWithHttpInfoAsync(int companyId, string status = default(string), int? applicationNumber = default(int?), string title = default(string), int? formId = default(int?), string startApplicationDate = default(string), string endApplicationDate = default(string), int? applicantId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? approverId = default(int?), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (applicationNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "application_number", applicationNumber));
            }
            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            }
            if (formId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "form_id", formId));
            }
            if (startApplicationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_application_date", startApplicationDate));
            }
            if (endApplicationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_application_date", endApplicationDate));
            }
            if (applicantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "applicant_id", applicantId));
            }
            if (minAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "min_amount", minAmount));
            }
            if (maxAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "max_amount", maxAmount));
            }
            if (approverId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "approver_id", approverId));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApprovalRequestsIndexResponse>("/api/1/approval_requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApprovalRequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestUpdateParams">各種申請の更新</param>
        /// <returns>ApprovalRequestResponse</returns>
        public ApprovalRequestResponse UpdateApprovalRequest(int id, ApprovalRequestUpdateParams approvalRequestUpdateParams)
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse> localVarResponse = UpdateApprovalRequestWithHttpInfo(id, approvalRequestUpdateParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestUpdateParams">各種申請の更新</param>
        /// <returns>ApiResponse of ApprovalRequestResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse> UpdateApprovalRequestWithHttpInfo(int id, ApprovalRequestUpdateParams approvalRequestUpdateParams)
        {
            // verify the required parameter 'approvalRequestUpdateParams' is set
            if (approvalRequestUpdateParams == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'approvalRequestUpdateParams' when calling ApprovalRequestsApi->UpdateApprovalRequest");
            }

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = approvalRequestUpdateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApprovalRequestResponse>("/api/1/approval_requests/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApprovalRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestUpdateParams">各種申請の更新</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestResponse</returns>
        public async System.Threading.Tasks.Task<ApprovalRequestResponse> UpdateApprovalRequestAsync(int id, ApprovalRequestUpdateParams approvalRequestUpdateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse> localVarResponse = await UpdateApprovalRequestWithHttpInfoAsync(id, approvalRequestUpdateParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestUpdateParams">各種申請の更新</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse>> UpdateApprovalRequestWithHttpInfoAsync(int id, ApprovalRequestUpdateParams approvalRequestUpdateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'approvalRequestUpdateParams' is set
            if (approvalRequestUpdateParams == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'approvalRequestUpdateParams' when calling ApprovalRequestsApi->UpdateApprovalRequest");
            }


            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = approvalRequestUpdateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApprovalRequestResponse>("/api/1/approval_requests/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApprovalRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の承認操作 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestActionCreateParams">各種申請の承認操作</param>
        /// <returns>ApprovalRequestResponse</returns>
        public ApprovalRequestResponse UpdateApprovalRequestAction(int id, ApprovalRequestActionCreateParams approvalRequestActionCreateParams)
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse> localVarResponse = UpdateApprovalRequestActionWithHttpInfo(id, approvalRequestActionCreateParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請の承認操作 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestActionCreateParams">各種申請の承認操作</param>
        /// <returns>ApiResponse of ApprovalRequestResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse> UpdateApprovalRequestActionWithHttpInfo(int id, ApprovalRequestActionCreateParams approvalRequestActionCreateParams)
        {
            // verify the required parameter 'approvalRequestActionCreateParams' is set
            if (approvalRequestActionCreateParams == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'approvalRequestActionCreateParams' when calling ApprovalRequestsApi->UpdateApprovalRequestAction");
            }

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = approvalRequestActionCreateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApprovalRequestResponse>("/api/1/approval_requests/{id}/actions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApprovalRequestAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 各種申請の承認操作 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestActionCreateParams">各種申請の承認操作</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApprovalRequestResponse</returns>
        public async System.Threading.Tasks.Task<ApprovalRequestResponse> UpdateApprovalRequestActionAsync(int id, ApprovalRequestActionCreateParams approvalRequestActionCreateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse> localVarResponse = await UpdateApprovalRequestActionWithHttpInfoAsync(id, approvalRequestActionCreateParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 各種申請の承認操作 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">各種申請ID</param>
        /// <param name="approvalRequestActionCreateParams">各種申請の承認操作</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApprovalRequestResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ApprovalRequestResponse>> UpdateApprovalRequestActionWithHttpInfoAsync(int id, ApprovalRequestActionCreateParams approvalRequestActionCreateParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'approvalRequestActionCreateParams' is set
            if (approvalRequestActionCreateParams == null)
            {
                throw new Freee.Accounting.Client.ApiException(400, "Missing required parameter 'approvalRequestActionCreateParams' when calling ApprovalRequestsApi->UpdateApprovalRequestAction");
            }


            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = approvalRequestActionCreateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApprovalRequestResponse>("/api/1/approval_requests/{id}/actions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApprovalRequestAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
