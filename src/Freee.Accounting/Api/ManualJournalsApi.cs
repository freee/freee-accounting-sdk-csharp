/*
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Freee.Accounting.Client;
using Freee.Accounting.Models;

namespace Freee.Accounting.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManualJournalsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 振替伝票の作成
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manualJournalCreateParams">振替伝票の作成 (optional)</param>
        /// <returns>ManualJournalResponse</returns>
        ManualJournalResponse CreateManualJournal(ManualJournalCreateParams manualJournalCreateParams = default(ManualJournalCreateParams));

        /// <summary>
        /// 振替伝票の作成
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manualJournalCreateParams">振替伝票の作成 (optional)</param>
        /// <returns>ApiResponse of ManualJournalResponse</returns>
        ApiResponse<ManualJournalResponse> CreateManualJournalWithHttpInfo(ManualJournalCreateParams manualJournalCreateParams = default(ManualJournalCreateParams));
        /// <summary>
        /// 振替伝票の削除
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="companyId">事業所ID</param>
        /// <returns></returns>
        void DestroyManualJournal(int id, int companyId);

        /// <summary>
        /// 振替伝票の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyManualJournalWithHttpInfo(int id, int companyId);
        /// <summary>
        /// 振替伝票の取得
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <returns>ManualJournalResponse</returns>
        ManualJournalResponse GetManualJournal(int companyId, int id);

        /// <summary>
        /// 振替伝票の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ManualJournalResponse</returns>
        ApiResponse<ManualJournalResponse> GetManualJournalWithHttpInfo(int companyId, int id);
        /// <summary>
        /// 振替伝票一覧の取得
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="entrySide">貸借で絞込 (貸方: credit, 借方: debit) (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="minAmount">金額で絞込：下限 (optional)</param>
        /// <param name="maxAmount">金額で絞込：上限 (optional)</param>
        /// <param name="partnerId">取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="itemId">品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="sectionId">部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment1TagId">セグメント１IDで絞込（0を指定すると、セグメント１が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment2TagId">セグメント２IDで絞込（0を指定すると、セグメント２が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment3TagId">セグメント３IDで絞込（0を指定すると、セグメント３が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="commentStatus">コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none） (optional)</param>
        /// <param name="commentImportant">重要コメント付きの振替伝票を絞込 (optional)</param>
        /// <param name="adjustment">決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） (optional)</param>
        /// <param name="txnNumber">仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ） (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 500)  (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetManualJournals(int companyId, string startIssueDate = default(string), string endIssueDate = default(string), string entrySide = default(string), int? accountItemId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), int? sectionId = default(int?), long? segment1TagId = default(long?), long? segment2TagId = default(long?), long? segment3TagId = default(long?), string commentStatus = default(string), bool? commentImportant = default(bool?), string adjustment = default(string), string txnNumber = default(string), long? offset = default(long?), int? limit = default(int?));

        /// <summary>
        /// 振替伝票一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="entrySide">貸借で絞込 (貸方: credit, 借方: debit) (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="minAmount">金額で絞込：下限 (optional)</param>
        /// <param name="maxAmount">金額で絞込：上限 (optional)</param>
        /// <param name="partnerId">取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="itemId">品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="sectionId">部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment1TagId">セグメント１IDで絞込（0を指定すると、セグメント１が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment2TagId">セグメント２IDで絞込（0を指定すると、セグメント２が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment3TagId">セグメント３IDで絞込（0を指定すると、セグメント３が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="commentStatus">コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none） (optional)</param>
        /// <param name="commentImportant">重要コメント付きの振替伝票を絞込 (optional)</param>
        /// <param name="adjustment">決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） (optional)</param>
        /// <param name="txnNumber">仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ） (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 500)  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetManualJournalsWithHttpInfo(int companyId, string startIssueDate = default(string), string endIssueDate = default(string), string entrySide = default(string), int? accountItemId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), int? sectionId = default(int?), long? segment1TagId = default(long?), long? segment2TagId = default(long?), long? segment3TagId = default(long?), string commentStatus = default(string), bool? commentImportant = default(bool?), string adjustment = default(string), string txnNumber = default(string), long? offset = default(long?), int? limit = default(int?));
        /// <summary>
        /// 振替伝票の更新
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manualJournalUpdateParams">振替伝票の更新 (optional)</param>
        /// <returns>ManualJournalResponse</returns>
        ManualJournalResponse UpdateManualJournal(int id, ManualJournalUpdateParams manualJournalUpdateParams = default(ManualJournalUpdateParams));

        /// <summary>
        /// 振替伝票の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manualJournalUpdateParams">振替伝票の更新 (optional)</param>
        /// <returns>ApiResponse of ManualJournalResponse</returns>
        ApiResponse<ManualJournalResponse> UpdateManualJournalWithHttpInfo(int id, ManualJournalUpdateParams manualJournalUpdateParams = default(ManualJournalUpdateParams));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManualJournalsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 振替伝票の作成
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manualJournalCreateParams">振替伝票の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournalResponse</returns>
        System.Threading.Tasks.Task<ManualJournalResponse> CreateManualJournalAsync(ManualJournalCreateParams manualJournalCreateParams = default(ManualJournalCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 振替伝票の作成
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manualJournalCreateParams">振替伝票の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManualJournalResponse>> CreateManualJournalWithHttpInfoAsync(ManualJournalCreateParams manualJournalCreateParams = default(ManualJournalCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 振替伝票の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyManualJournalAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 振替伝票の削除
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyManualJournalWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 振替伝票の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournalResponse</returns>
        System.Threading.Tasks.Task<ManualJournalResponse> GetManualJournalAsync(int companyId, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 振替伝票の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManualJournalResponse>> GetManualJournalWithHttpInfoAsync(int companyId, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 振替伝票一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="entrySide">貸借で絞込 (貸方: credit, 借方: debit) (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="minAmount">金額で絞込：下限 (optional)</param>
        /// <param name="maxAmount">金額で絞込：上限 (optional)</param>
        /// <param name="partnerId">取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="itemId">品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="sectionId">部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment1TagId">セグメント１IDで絞込（0を指定すると、セグメント１が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment2TagId">セグメント２IDで絞込（0を指定すると、セグメント２が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment3TagId">セグメント３IDで絞込（0を指定すると、セグメント３が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="commentStatus">コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none） (optional)</param>
        /// <param name="commentImportant">重要コメント付きの振替伝票を絞込 (optional)</param>
        /// <param name="adjustment">決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） (optional)</param>
        /// <param name="txnNumber">仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ） (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 500)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetManualJournalsAsync(int companyId, string startIssueDate = default(string), string endIssueDate = default(string), string entrySide = default(string), int? accountItemId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), int? sectionId = default(int?), long? segment1TagId = default(long?), long? segment2TagId = default(long?), long? segment3TagId = default(long?), string commentStatus = default(string), bool? commentImportant = default(bool?), string adjustment = default(string), string txnNumber = default(string), long? offset = default(long?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 振替伝票一覧の取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="entrySide">貸借で絞込 (貸方: credit, 借方: debit) (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="minAmount">金額で絞込：下限 (optional)</param>
        /// <param name="maxAmount">金額で絞込：上限 (optional)</param>
        /// <param name="partnerId">取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="itemId">品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="sectionId">部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment1TagId">セグメント１IDで絞込（0を指定すると、セグメント１が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment2TagId">セグメント２IDで絞込（0を指定すると、セグメント２が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment3TagId">セグメント３IDで絞込（0を指定すると、セグメント３が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="commentStatus">コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none） (optional)</param>
        /// <param name="commentImportant">重要コメント付きの振替伝票を絞込 (optional)</param>
        /// <param name="adjustment">決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） (optional)</param>
        /// <param name="txnNumber">仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ） (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 500)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetManualJournalsWithHttpInfoAsync(int companyId, string startIssueDate = default(string), string endIssueDate = default(string), string entrySide = default(string), int? accountItemId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), int? sectionId = default(int?), long? segment1TagId = default(long?), long? segment2TagId = default(long?), long? segment3TagId = default(long?), string commentStatus = default(string), bool? commentImportant = default(bool?), string adjustment = default(string), string txnNumber = default(string), long? offset = default(long?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 振替伝票の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manualJournalUpdateParams">振替伝票の更新 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournalResponse</returns>
        System.Threading.Tasks.Task<ManualJournalResponse> UpdateManualJournalAsync(int id, ManualJournalUpdateParams manualJournalUpdateParams = default(ManualJournalUpdateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 振替伝票の更新
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manualJournalUpdateParams">振替伝票の更新 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManualJournalResponse>> UpdateManualJournalWithHttpInfoAsync(int id, ManualJournalUpdateParams manualJournalUpdateParams = default(ManualJournalUpdateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManualJournalsApi : IManualJournalsApiSync, IManualJournalsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManualJournalsApi : IManualJournalsApi
    {
        private Freee.Accounting.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManualJournalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManualJournalsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManualJournalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManualJournalsApi(string basePath)
        {
            this.Configuration = Freee.Accounting.Client.Configuration.MergeConfigurations(
                Freee.Accounting.Client.GlobalConfiguration.Instance,
                new Freee.Accounting.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManualJournalsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManualJournalsApi(Freee.Accounting.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Freee.Accounting.Client.Configuration.MergeConfigurations(
                Freee.Accounting.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Freee.Accounting.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManualJournalsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ManualJournalsApi(Freee.Accounting.Client.ISynchronousClient client, Freee.Accounting.Client.IAsynchronousClient asyncClient, Freee.Accounting.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Freee.Accounting.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Freee.Accounting.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Freee.Accounting.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Freee.Accounting.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Freee.Accounting.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 振替伝票の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manualJournalCreateParams">振替伝票の作成 (optional)</param>
        /// <returns>ManualJournalResponse</returns>
        public ManualJournalResponse CreateManualJournal(ManualJournalCreateParams manualJournalCreateParams = default(ManualJournalCreateParams))
        {
            Freee.Accounting.Client.ApiResponse<ManualJournalResponse> localVarResponse = CreateManualJournalWithHttpInfo(manualJournalCreateParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 振替伝票の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manualJournalCreateParams">振替伝票の作成 (optional)</param>
        /// <returns>ApiResponse of ManualJournalResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ManualJournalResponse> CreateManualJournalWithHttpInfo(ManualJournalCreateParams manualJournalCreateParams = default(ManualJournalCreateParams))
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = manualJournalCreateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManualJournalResponse>("/api/1/manual_journals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManualJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 振替伝票の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manualJournalCreateParams">振替伝票の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournalResponse</returns>
        public async System.Threading.Tasks.Task<ManualJournalResponse> CreateManualJournalAsync(ManualJournalCreateParams manualJournalCreateParams = default(ManualJournalCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ManualJournalResponse> localVarResponse = await CreateManualJournalWithHttpInfoAsync(manualJournalCreateParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 振替伝票の作成 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manualJournalCreateParams">振替伝票の作成 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournalResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ManualJournalResponse>> CreateManualJournalWithHttpInfoAsync(ManualJournalCreateParams manualJournalCreateParams = default(ManualJournalCreateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = manualJournalCreateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ManualJournalResponse>("/api/1/manual_journals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateManualJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 振替伝票の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="companyId">事業所ID</param>
        /// <returns></returns>
        public void DestroyManualJournal(int id, int companyId)
        {
            DestroyManualJournalWithHttpInfo(id, companyId);
        }

        /// <summary>
        /// 振替伝票の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="companyId">事業所ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Freee.Accounting.Client.ApiResponse<Object> DestroyManualJournalWithHttpInfo(int id, int companyId)
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/1/manual_journals/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyManualJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 振替伝票の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyManualJournalAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DestroyManualJournalWithHttpInfoAsync(id, companyId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 振替伝票の削除 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="companyId">事業所ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<Object>> DestroyManualJournalWithHttpInfoAsync(int id, int companyId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/1/manual_journals/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyManualJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 振替伝票の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <returns>ManualJournalResponse</returns>
        public ManualJournalResponse GetManualJournal(int companyId, int id)
        {
            Freee.Accounting.Client.ApiResponse<ManualJournalResponse> localVarResponse = GetManualJournalWithHttpInfo(companyId, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 振替伝票の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ManualJournalResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ManualJournalResponse> GetManualJournalWithHttpInfo(int companyId, int id)
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManualJournalResponse>("/api/1/manual_journals/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 振替伝票の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournalResponse</returns>
        public async System.Threading.Tasks.Task<ManualJournalResponse> GetManualJournalAsync(int companyId, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ManualJournalResponse> localVarResponse = await GetManualJournalWithHttpInfoAsync(companyId, id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 振替伝票の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournalResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ManualJournalResponse>> GetManualJournalWithHttpInfoAsync(int companyId, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManualJournalResponse>("/api/1/manual_journals/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 振替伝票一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="entrySide">貸借で絞込 (貸方: credit, 借方: debit) (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="minAmount">金額で絞込：下限 (optional)</param>
        /// <param name="maxAmount">金額で絞込：上限 (optional)</param>
        /// <param name="partnerId">取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="itemId">品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="sectionId">部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment1TagId">セグメント１IDで絞込（0を指定すると、セグメント１が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment2TagId">セグメント２IDで絞込（0を指定すると、セグメント２が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment3TagId">セグメント３IDで絞込（0を指定すると、セグメント３が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="commentStatus">コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none） (optional)</param>
        /// <param name="commentImportant">重要コメント付きの振替伝票を絞込 (optional)</param>
        /// <param name="adjustment">決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） (optional)</param>
        /// <param name="txnNumber">仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ） (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 500)  (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetManualJournals(int companyId, string startIssueDate = default(string), string endIssueDate = default(string), string entrySide = default(string), int? accountItemId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), int? sectionId = default(int?), long? segment1TagId = default(long?), long? segment2TagId = default(long?), long? segment3TagId = default(long?), string commentStatus = default(string), bool? commentImportant = default(bool?), string adjustment = default(string), string txnNumber = default(string), long? offset = default(long?), int? limit = default(int?))
        {
            Freee.Accounting.Client.ApiResponse<InlineResponse2004> localVarResponse = GetManualJournalsWithHttpInfo(companyId, startIssueDate, endIssueDate, entrySide, accountItemId, minAmount, maxAmount, partnerId, partnerCode, itemId, sectionId, segment1TagId, segment2TagId, segment3TagId, commentStatus, commentImportant, adjustment, txnNumber, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 振替伝票一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="entrySide">貸借で絞込 (貸方: credit, 借方: debit) (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="minAmount">金額で絞込：下限 (optional)</param>
        /// <param name="maxAmount">金額で絞込：上限 (optional)</param>
        /// <param name="partnerId">取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="itemId">品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="sectionId">部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment1TagId">セグメント１IDで絞込（0を指定すると、セグメント１が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment2TagId">セグメント２IDで絞込（0を指定すると、セグメント２が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment3TagId">セグメント３IDで絞込（0を指定すると、セグメント３が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="commentStatus">コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none） (optional)</param>
        /// <param name="commentImportant">重要コメント付きの振替伝票を絞込 (optional)</param>
        /// <param name="adjustment">決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） (optional)</param>
        /// <param name="txnNumber">仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ） (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 500)  (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public Freee.Accounting.Client.ApiResponse<InlineResponse2004> GetManualJournalsWithHttpInfo(int companyId, string startIssueDate = default(string), string endIssueDate = default(string), string entrySide = default(string), int? accountItemId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), int? sectionId = default(int?), long? segment1TagId = default(long?), long? segment2TagId = default(long?), long? segment3TagId = default(long?), string commentStatus = default(string), bool? commentImportant = default(bool?), string adjustment = default(string), string txnNumber = default(string), long? offset = default(long?), int? limit = default(int?))
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            if (startIssueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_issue_date", startIssueDate));
            }
            if (endIssueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_issue_date", endIssueDate));
            }
            if (entrySide != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "entry_side", entrySide));
            }
            if (accountItemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "account_item_id", accountItemId));
            }
            if (minAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "min_amount", minAmount));
            }
            if (maxAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "max_amount", maxAmount));
            }
            if (partnerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "partner_id", partnerId));
            }
            if (partnerCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "partner_code", partnerCode));
            }
            if (itemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "item_id", itemId));
            }
            if (sectionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "section_id", sectionId));
            }
            if (segment1TagId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "segment_1_tag_id", segment1TagId));
            }
            if (segment2TagId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "segment_2_tag_id", segment2TagId));
            }
            if (segment3TagId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "segment_3_tag_id", segment3TagId));
            }
            if (commentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "comment_status", commentStatus));
            }
            if (commentImportant != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "comment_important", commentImportant));
            }
            if (adjustment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "adjustment", adjustment));
            }
            if (txnNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "txn_number", txnNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2004>("/api/1/manual_journals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 振替伝票一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="entrySide">貸借で絞込 (貸方: credit, 借方: debit) (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="minAmount">金額で絞込：下限 (optional)</param>
        /// <param name="maxAmount">金額で絞込：上限 (optional)</param>
        /// <param name="partnerId">取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="itemId">品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="sectionId">部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment1TagId">セグメント１IDで絞込（0を指定すると、セグメント１が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment2TagId">セグメント２IDで絞込（0を指定すると、セグメント２が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment3TagId">セグメント３IDで絞込（0を指定すると、セグメント３が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="commentStatus">コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none） (optional)</param>
        /// <param name="commentImportant">重要コメント付きの振替伝票を絞込 (optional)</param>
        /// <param name="adjustment">決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） (optional)</param>
        /// <param name="txnNumber">仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ） (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 500)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetManualJournalsAsync(int companyId, string startIssueDate = default(string), string endIssueDate = default(string), string entrySide = default(string), int? accountItemId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), int? sectionId = default(int?), long? segment1TagId = default(long?), long? segment2TagId = default(long?), long? segment3TagId = default(long?), string commentStatus = default(string), bool? commentImportant = default(bool?), string adjustment = default(string), string txnNumber = default(string), long? offset = default(long?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<InlineResponse2004> localVarResponse = await GetManualJournalsWithHttpInfoAsync(companyId, startIssueDate, endIssueDate, entrySide, accountItemId, minAmount, maxAmount, partnerId, partnerCode, itemId, sectionId, segment1TagId, segment2TagId, segment3TagId, commentStatus, commentImportant, adjustment, txnNumber, offset, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 振替伝票一覧の取得 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">事業所ID</param>
        /// <param name="startIssueDate">発生日で絞込：開始日(yyyy-mm-dd) (optional)</param>
        /// <param name="endIssueDate">発生日で絞込：終了日(yyyy-mm-dd) (optional)</param>
        /// <param name="entrySide">貸借で絞込 (貸方: credit, 借方: debit) (optional)</param>
        /// <param name="accountItemId">勘定科目IDで絞込 (optional)</param>
        /// <param name="minAmount">金額で絞込：下限 (optional)</param>
        /// <param name="maxAmount">金額で絞込：上限 (optional)</param>
        /// <param name="partnerId">取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="partnerCode">取引先コードで絞込 (optional)</param>
        /// <param name="itemId">品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="sectionId">部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment1TagId">セグメント１IDで絞込（0を指定すると、セグメント１が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment2TagId">セグメント２IDで絞込（0を指定すると、セグメント２が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="segment3TagId">セグメント３IDで絞込（0を指定すると、セグメント３が未選択の貸借行を絞り込めます） (optional)</param>
        /// <param name="commentStatus">コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none） (optional)</param>
        /// <param name="commentImportant">重要コメント付きの振替伝票を絞込 (optional)</param>
        /// <param name="adjustment">決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） (optional)</param>
        /// <param name="txnNumber">仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ） (optional)</param>
        /// <param name="offset">取得レコードのオフセット (デフォルト: 0) (optional)</param>
        /// <param name="limit">取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 500)  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<InlineResponse2004>> GetManualJournalsWithHttpInfoAsync(int companyId, string startIssueDate = default(string), string endIssueDate = default(string), string entrySide = default(string), int? accountItemId = default(int?), long? minAmount = default(long?), long? maxAmount = default(long?), int? partnerId = default(int?), string partnerCode = default(string), int? itemId = default(int?), int? sectionId = default(int?), long? segment1TagId = default(long?), long? segment2TagId = default(long?), long? segment3TagId = default(long?), string commentStatus = default(string), bool? commentImportant = default(bool?), string adjustment = default(string), string txnNumber = default(string), long? offset = default(long?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "company_id", companyId));
            if (startIssueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "start_issue_date", startIssueDate));
            }
            if (endIssueDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "end_issue_date", endIssueDate));
            }
            if (entrySide != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "entry_side", entrySide));
            }
            if (accountItemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "account_item_id", accountItemId));
            }
            if (minAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "min_amount", minAmount));
            }
            if (maxAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "max_amount", maxAmount));
            }
            if (partnerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "partner_id", partnerId));
            }
            if (partnerCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "partner_code", partnerCode));
            }
            if (itemId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "item_id", itemId));
            }
            if (sectionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "section_id", sectionId));
            }
            if (segment1TagId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "segment_1_tag_id", segment1TagId));
            }
            if (segment2TagId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "segment_2_tag_id", segment2TagId));
            }
            if (segment3TagId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "segment_3_tag_id", segment3TagId));
            }
            if (commentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "comment_status", commentStatus));
            }
            if (commentImportant != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "comment_important", commentImportant));
            }
            if (adjustment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "adjustment", adjustment));
            }
            if (txnNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "txn_number", txnNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Freee.Accounting.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/api/1/manual_journals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetManualJournals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 振替伝票の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manualJournalUpdateParams">振替伝票の更新 (optional)</param>
        /// <returns>ManualJournalResponse</returns>
        public ManualJournalResponse UpdateManualJournal(int id, ManualJournalUpdateParams manualJournalUpdateParams = default(ManualJournalUpdateParams))
        {
            Freee.Accounting.Client.ApiResponse<ManualJournalResponse> localVarResponse = UpdateManualJournalWithHttpInfo(id, manualJournalUpdateParams);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 振替伝票の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manualJournalUpdateParams">振替伝票の更新 (optional)</param>
        /// <returns>ApiResponse of ManualJournalResponse</returns>
        public Freee.Accounting.Client.ApiResponse<ManualJournalResponse> UpdateManualJournalWithHttpInfo(int id, ManualJournalUpdateParams manualJournalUpdateParams = default(ManualJournalUpdateParams))
        {
            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = manualJournalUpdateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ManualJournalResponse>("/api/1/manual_journals/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateManualJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 振替伝票の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manualJournalUpdateParams">振替伝票の更新 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManualJournalResponse</returns>
        public async System.Threading.Tasks.Task<ManualJournalResponse> UpdateManualJournalAsync(int id, ManualJournalUpdateParams manualJournalUpdateParams = default(ManualJournalUpdateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Freee.Accounting.Client.ApiResponse<ManualJournalResponse> localVarResponse = await UpdateManualJournalWithHttpInfoAsync(id, manualJournalUpdateParams, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 振替伝票の更新 
        /// </summary>
        /// <exception cref="Freee.Accounting.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manualJournalUpdateParams">振替伝票の更新 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManualJournalResponse)</returns>
        public async System.Threading.Tasks.Task<Freee.Accounting.Client.ApiResponse<ManualJournalResponse>> UpdateManualJournalWithHttpInfoAsync(int id, ManualJournalUpdateParams manualJournalUpdateParams = default(ManualJournalUpdateParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Freee.Accounting.Client.RequestOptions localVarRequestOptions = new Freee.Accounting.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Freee.Accounting.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Freee.Accounting.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Freee.Accounting.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = manualJournalUpdateParams;

            // authentication (oauth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ManualJournalResponse>("/api/1/manual_journals/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateManualJournal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
